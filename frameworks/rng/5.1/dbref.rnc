# Customization Layer for DocBook 5.1 Beta
# - use DocBook schema coding style
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace s = "http://purl.oclc.org/dsdl/schematron"
default namespace db = "http://docbook.org/ns/docbook"

include "docbookxi.rnc" 
{
}


db.ref = 
  ## Element for referencing content
  element ref { 
    (db.ref.inline | db.ref.external)
  }

div {
db.linkscope.attribute =
  ## Adjust all corresponding references
  attribute linkscope { 
    ## No IDREF adjustment is done
    "user" |
    ## All IDREFs in transcluded content are prefixed by
    ## user specified prefix (when idfixup="prefix") or
    ## auto-generated prefix (when idfixup="auto")
    "local" |
    ## All IDREFs in transcluded content are adjusted to
    ## point to the closest element which has a matching ID. 
    "near" |
    ##  All IDREFs in transcluded content are adjusted to
    ## point to the first element in document order which has a matching ID 
    "global"}

db.idfixup.attribute =
  ## Adjust xml:id's during transclusion
  attribute idfixup { 
  ## No ID adjustment is done
  "none" | 
  ## All IDs are stripped (except xml:id inherited from ref element)
  "strip" | 
  ## All IDs are prefixed with a value specified in prefix attribute
  "prefix" | 
  ## All IDs are prefixed with a value which is unique for each ref element
  "auto" }

db.prefix.attribute =
  ## Use prefix when idfixup="prefix"
  attribute prefix { xsd:NCName }

# common content
db.ref.common =
  db.effectivity.attributes,
  db.xml.id.attribute?,
  db.linkscope.attribute?,
  db.idfixup.attribute?,
  db.prefix.attribute?,
  (db.transform*)
}

div {
# inline content is grabed from local definitions or from external definitions file
db.definitionfile.attribute =
  ## Points to a file with definitions
  attribute definitionfile { xsd:anyURI }

db.name.attribute =
  ## Points to the definition
  attribute name { xsd:NCName }

db.ref.inline =
  # Reference in an inline context
  db.definitionfile.attribute?,
  db.name.attribute,
  db.ref.common
}

div {
# content from external sources
db.ref.encoding.attribute = db.textdata.encoding.attribute
db.ref.fileref.attribute =
  ## Identifies a link target with a URI
  attribute fileref { xsd:anyURI }
db.ref.xpointer.attribute =
  ## XPointer expression
  attribute xpointer { text }
db.ref.parse.attribute =
  ## Parse textfile as XML or text?
  attribute parse { "xml" | "text" }

db.ref.external =
  ## Reference in an block context
  db.ref.fileref.attribute,
  db.ref.xpointer.attribute?,
  db.ref.encoding.attribute?,
  db.ref.parse.attribute?,
  db.ref.common
}

div {
# FIXME: specify all kinds of possible transformations
db.transform = empty  
}

div {
db.definitions =
  ## A collection of definitions
  element definitions {
    db.definitionfile.attribute?,
    db.def*
  }
}

div {
db.def = 
  ## A single definition
  element def {
    db.name.attribute,
    db.effectivity.attributes,
    (text & db._any*)
  }
}

# hooks into standard schema

# allow references to appear almost everywhere
db.ubiq.inlines |= db.ref*

db.divisions |= db.ref
db.components |= db.ref

db.toplevel.sections |=
   (db.section|db.ref)+ | (db.simplesect|db.ref)+

db.recursive.sections |=
   (db.section|db.ref)+ | (db.simplesect|db.ref)+

db.part.components |= db.ref

db.reference.components |= db.ref

db.all.blocks |= db.ref

db.info.elements |= db.ref

# definitions can be only inside info elements
db.info.elements |= db.definitions

# or they can be provided in a separate file
start |= db.definitions


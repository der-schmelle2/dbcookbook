<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
-->

<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->
<section xml:id="dbc.html.permalinks" remap="topic" userlevel="easy"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Creating Permalinks</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>permalinks</keyword>
      <keyword>¶</keyword>
      <keyword>component.title</keyword>
    </keywordset>
  </info>
  
  <section role="problem">
    <title>Problem</title>
    <para>Your need for every appendix, chapter, section, etc. a small
      hint (often depicted as <quote>¶</quote>) which points to the
      division itself. This <quote>permalink</quote> simplies the
      retrieval and indentification of such a division.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>You need an ID attribute on your division (chapter, section,
      examples, etc.) to make it work. The
        <filename>permalinks.xsl</filename> stylesheet is a named
      template which expects an <parameter>id</parameter>
      parameter.</para>
    <example xml:id="ex.html.permalinks">
      <title>Permalink Stylesheet (<filename>permalinks.xsl</filename>)</title>
      <info>
        <output xmlns="urn:x-toms:docbook-ext">
          <filename>permalinks/permalinks.xsl</filename>
        </output>
      </info>
      <programlistingco>
        <areaspec>  
          <area xml:id="ar.html.permalinks.generate.permalink" coords="6" units="linecolumn"/>
          <area xml:id="ar.html.permalinks.permalink.text" coords="7" units="linecolumn"/>
          <area xml:id="ar.html.permalinks.span" coords="13" units="linecolumn"/>
          <area xml:id="ar.html.permalinks.a" coords="14" units="linecolumn"/>
        </areaspec>
        <programlisting language="xml" linenumbering="numbered"
          ><xi:include href="permalinks/permalinks.xsl" parse="text"
          /></programlisting>
      </programlistingco>
      <calloutlist>
        <callout arearefs="ar.html.permalinks.generate.permalink">
          <para>Contains parameter
            <parameter>generate.permalink</parameter> to switch on or
            off permalink creation.</para>
        </callout>
        <callout arearefs="ar.html.permalinks.permalink.text">
          <para>Contains parameter <parameter>permalink.text</parameter>
          which is inserted as the permalink text.</para>
        </callout>
        <callout arearefs="ar.html.permalinks.span">
          <para>Creates a <tag>span</tag> element as a wrapper element 
            which contains all information about the permalink.</para>
        </callout>
        <callout arearefs="ar.html.permalinks.a">
          <para>Creates a HTML <tag>a</tag> element. The pointer in the
            <tag class="attribute">href</tag> attribute is used from the
          <parameter>id</parameter> parameter.</para>
        </callout>
      </calloutlist>
    </example>
    <para>This is of course not enough. Use the following steps to
    include it into your customization layers:</para>
    <procedure>
      <step>
        <para>Create a customization layer as shown in <xref
          linkend="dbc.common.dbcustomize"/>.</para>
      </step>
      <step>
        <para>Include the stylesheet from <xref
            linkend="ex.html.permalinks"/> into your customization
            layer:</para>
        <programlisting language="xml"
>&lt;xsl:stylesheet version="1.0"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  &lt;!-- ... -->
  <emphasis role="bold">&lt;xsl:include href="permalinks.xsl"/></emphasis>
&lt;/xsl:stylesheet></programlisting>
      </step>
      <step>
        <para>Insert one or all of the following codes to include
            <function>permalink</function> in their respective
          elements:</para>
        <itemizedlist>
          <listitem>
            <para>For appendices, chapters, prefaces, etc. use the
              <function>component.title</function> template from
              <filename>{xhtml,xhtml-1_1,html}/component.xsl</filename>:
            </para>
            <programlisting language="xml">&lt;xsl:template name="component.title">
  &lt;xsl:param name="node" select="."/>
  &lt;!-- Some code omitted -->
  &lt;xsl:element name="h{$level+1}">
    &lt;xsl:attribute name="class">title&lt;/xsl:attribute>
    &lt;xsl:if test="$generate.id.attributes = 0">
      &lt;xsl:call-template name="anchor">
        &lt;xsl:with-param name="node" select="$node"/>
        &lt;xsl:with-param name="conditional" select="0"/>
      &lt;/xsl:call-template>
    &lt;/xsl:if>
    &lt;xsl:apply-templates select="$node" mode="object.title.markup">
      &lt;xsl:with-param name="allow-anchors" select="1"/>
    &lt;/xsl:apply-templates>
    <emphasis role="bold">&lt;xsl:call-template name="permalink">
      &lt;xsl:with-param name="id" select="$node/@id"/>
    &lt;/xsl:call-template></emphasis>
  &lt;/xsl:element>
&lt;/xsl:template></programlisting>
          </listitem>
          <listitem>
            <para>For figures, examples, procedures, tables, etc. use
              the <function>formal.object.heading</function>
              template from <filename>{xhtml,xhtml-1_1,html}/formal.xsl</filename>:</para>
            <programlisting language="xml">&lt;xsl:template name="formal.object.heading">
  &lt;xsl:param name="object" select="."/>
  &lt;xsl:param name="title">
    &lt;xsl:apply-templates select="$object" mode="object.title.markup">
      &lt;xsl:with-param name="allow-anchors" select="1"/>
    &lt;/xsl:apply-templates>
  &lt;/xsl:param>
  &lt;p class="title">
    &lt;b>
      &lt;xsl:copy-of select="$title"/>
    &lt;/b>
    <emphasis role="bold">&lt;xsl:call-template name="permalink">
      &lt;xsl:with-param name="id" select="$object/@id"/>
    &lt;/xsl:call-template></emphasis>
  &lt;/p>   
&lt;/xsl:template></programlisting>
          </listitem>
          <listitem>
            <para>For parts, use the
              <function>division.title</function> template from
              <filename>{xhtml,xhtml-1_1,html}/division.xsl</filename>:</para>
            <programlisting language="xml">&lt;xsl:template name="division.title">
  &lt;xsl:param name="node" select="."/>
  
  &lt;h1>
    &lt;xsl:attribute name="class">title&lt;/xsl:attribute>
    &lt;xsl:call-template name="anchor">
      &lt;xsl:with-param name="node" select="$node"/>
      &lt;xsl:with-param name="conditional" select="0"/>
    &lt;/xsl:call-template>
    &lt;xsl:apply-templates select="$node" mode="object.title.markup">
      &lt;xsl:with-param name="allow-anchors" select="1"/>
    &lt;/xsl:apply-templates>
    <emphasis role="bold">&lt;xsl:call-template name="permalink">
      &lt;xsl:with-param name="id" select="$node/@id"/>
    &lt;/xsl:call-template></emphasis>
  &lt;/h1>
&lt;/xsl:template></programlisting>
          </listitem>
        </itemizedlist>
      </step>
     <step>
       <para>Use your customization layer to transform your DocBook
         document into (X)HTML.</para>
     </step>
    </procedure>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para><remark>TBD</remark></para>
  </section>
  <!--<section role="seealso">
    <title>See Also</title>
    <para><remark>TBD</remark></para>
  </section>-->
</section>

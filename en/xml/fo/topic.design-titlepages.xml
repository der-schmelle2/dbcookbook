<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
-->
<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->

<section xml:id="dbc.fo.design-titlepages" remap="topic" userlevel="medium"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Designing a Title Page</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>title page</keyword>
      <keyword>cover</keyword>
      <keyword>recto page</keyword>
      <keyword>verso page</keyword>
      <keyword>title page template</keyword>
    </keywordset>
  </info>
  
  <section role="problem">
    <title>Problem</title>
    <para>You want to design a title page of your book or article.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>To design your title page there are two ways to do it,
      regardless if it is a book or an article:</para>
    <orderedlist>
      <listitem>
        <formalpara>
          <title>Indirectly</title>
          <para>Write a title page template which contains the wanted
            elements in their respective order.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Directly</title>
          <para>Customize the specific named templates.</para>
        </formalpara>
      </listitem>
    </orderedlist>
    <para>Both methods are shown below. Although the following
      descriptions focus on a book title page, the same procedure
      applies for an article title page as well.</para>
    <para>Before we customize the stylesheets, we need to define,
        <emphasis>what</emphasis> we want to display on our title
      page(s). Depending on if it is a left or a right page, different
      elements needs to be shown. For this example, we use the following
      requisites:</para>
    
    <itemizedlist xml:id="li.fo.design-titlepages.rectopage.defs">
      <title>Recto (Right) Page</title>
      <para>This is the <quote>main page</quote> and the content appears
      in the following order:</para>
      <listitem>
        <para>the book title, from <code>/book/title</code> or
            <code>/book/info/title</code></para>
      </listitem>
      <listitem>
        <para>the book subtitle, from <code>/book/subtitle</code> or
            <code>/book/info/subtitle</code></para>
      </listitem>
      <listitem>
        <para>the book's author, from
          <code>/book/info/author</code></para>
      </listitem>
      <listitem>
        <para>the edition, from <code>/book/info/edition</code></para>
      </listitem>
    </itemizedlist>
    <itemizedlist xml:id="li.fo.design-titlepages.versopage.defs">
      <title>Verso (Left) Page</title>
      <para>This usually holds the imprint and the content appears
      in the following order:</para>
      <listitem>
        <para>the book's title and subtitle in a smaller font
          size</para>
      </listitem>
      <listitem>
        <para>the author, from <code>/book/info/author</code></para>
      </listitem>
      <listitem>
        <para>the edition, from <code>/book/info/edition</code></para>
      </listitem>
      <listitem>
        <para>some legal text (copyright), from
            <code>/book/info/legalnotice</code></para>
      </listitem>
      <listitem>
        <para>the <acronym>ISBN<alt
          >International Standard Book Number</alt></acronym>, from
            <code>/book/info/biblioid</code> with <tag class="attribute"
            >class</tag> and the value <tag class="attvalue"
          >isbn</tag></para>
      </listitem>
    </itemizedlist>
    
    <section xml:id="dbc.fo.design-titlepages.titlepage.indirectly">
      <title>Using Title Page Templates</title>
      <para>To create a title page using a title page template proceed
        as follows:</para>
      <procedure xml:id="pro.fo.design-titlepages.titlepage.indirectly">
        <step>
          <para>Prepare the title page template:</para>
          <substeps>
            <step>
              <para>Copy the file
                <filename>fo/titlepage.templates.xml</filename> from the
                DocBook XSL stylesheet distribution to a directory where
                all your FO customization is stored. Use the filename
                <filename>booktitlepage.xml</filename> so we know, it
                contains only a title page for a book.</para>
            </step>
            <step>
              <para>Open the file <filename>booktitlepage.xml</filename>
                and remove anything except the
                root and <tag>t:titlepage</tag> elements with the
                attribute <tag class="attribute">t:element="book"</tag>.
                Your title page template should look like this:</para>
              <programlisting language="xml">&lt;!DOCTYPE t:templates [
&lt;!ENTITY hsize0 "10pt">
&lt;!ENTITY hsize1 "12pt">
&lt;!ENTITY hsize2 "14.4pt">
&lt;!ENTITY hsize3 "17.28pt">
&lt;!ENTITY hsize4 "20.736pt">
&lt;!ENTITY hsize5 "24.8832pt">
&lt;!ENTITY hsize0space "7.5pt"> &lt;!-- 0.75 * hsize0 -->
&lt;!ENTITY hsize1space "9pt"> &lt;!-- 0.75 * hsize1 -->
&lt;!ENTITY hsize2space "10.8pt"> &lt;!-- 0.75 * hsize2 -->
&lt;!ENTITY hsize3space "12.96pt"> &lt;!-- 0.75 * hsize3 -->
&lt;!ENTITY hsize4space "15.552pt"> &lt;!-- 0.75 * hsize4 -->
&lt;!ENTITY hsize5space "18.6624pt"> &lt;!-- 0.75 * hsize5 -->
]>
&lt;t:templates xmlns:t="http://nwalsh.com/docbook/xsl/template/1.0"
             xmlns:param="http://nwalsh.com/docbook/xsl/template/1.0/param"
             xmlns:fo="http://www.w3.org/1999/XSL/Format"
             xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   &lt;t:titlepage t:element="book" t:wrapper="fo:block">
     &lt;!-- Content disabled for better legibility -->
   &lt;/t:titlepage>
&lt;/t:templates></programlisting>
            </step>
          </substeps>
        </step>
        <step>
          <para>Customize the content of your titlepage and save your
            changes into the <filename>booktitlepage.xml</filename>
            file.</para>
          <substeps>
            <step>
              <para>Change the recto page and locate the
                  <tag>t:titlepage-content</tag> element with its
                attribute <tag>t:side="recto"</tag>. As definied in
                  <xref linkend="li.fo.design-titlepages.rectopage.defs"/>, we
                remove everything what is not needed. Additionally we
                have to output edition, which we get from an empty <tag
                  class="emptytag">edition</tag> tag. The content of the
                  <tag>t:titlepage-content</tag> should look like
                this:</para>
              <programlisting language="xml">&lt;t:titlepage-content t:side="recto">
  &lt;title     t:named-template="division.title"
             param:node="ancestor-or-self::book[1]"
             text-align="center"
             font-size="&amp;hsize5;"
             space-before="&amp;hsize5space;"
             font-weight="bold"
             font-family="{$title.fontset}"/>
  &lt;subtitle  text-align="center"
             font-size="&amp;hsize4;"
             space-before="&amp;hsize4space;"
             font-family="{$title.fontset}"/>
  &lt;author    font-size="&amp;hsize3;"
             space-before="&amp;hsize2space;"
             keep-with-next.within-column="always"/>
  &lt;edition   font-size="&amp;hsize3;"/>
&lt;/t:titlepage-content></programlisting>
            </step>
            <step>
              <para>Change the verso page and locate the
                  <tag>t:titlepage-content</tag> element with its
                attribute <tag>t:side="verso"</tag>. As definied in
                  <xref linkend="li.fo.design-titlepages.versopage.defs"/>, again,
                we remove everything what is not needed. The content of
                the <tag>t:titlepage-content</tag> should look like
                this: </para>
              <programlisting language="xml">&lt;t:titlepage-content t:side="verso">
  &lt;title     t:named-template="book.verso.title"
             font-size="&amp;hsize2;"
             font-weight="bold"
             font-family="{$title.fontset}"/>
  &lt;subtitle  t:named-template="book.verso.title"
             font-size="&amp;hsize2;"
             font-weight="bold"
             font-family="{$title.fontset}"/>
  &lt;author/>
  &lt;edition/>
  &lt;legalnotice/>
  &lt;biblioid  t:predicate="[@class = 'isbn']"/>
&lt;/t:titlepage-content></programlisting>
            </step>
            <step>
              <para>Leave the other elements
                  (<tag>t:titlepage-separator</tag> and
                  <tag>t:titlepage-before</tag>) as they are.</para>
            </step>
          </substeps>
        </step>
        <step>
          <para>Use the <filename>template/titlepage.xsl</filename>
            stylesheet from the DocBook XSL distribution to transform
            your <filename>booktitlepage.xml</filename> title page
            definition to create the
              <filename>booktitlepage.xsl</filename> output:</para>
          <screen><command>xsltproc</command> --output booktitlepage.xsl template/titlepage.xsl booktitlepage.xml</screen>
        </step>
        <step>
          <para>Insert the constructed
            <filename>booktitlepage.xsl</filename> into your
            customization layer <filename>mybooktitlepage.xsl</filename>:</para>
          <programlisting language="xml"><xi:include parse="text"
            href="xslt/mybooktitlepage.xsl"/></programlisting>
        </step>
        <step>
          <para>Build your book as usual with your customization layer.</para>
        </step>
      </procedure>
    </section>
    <section xml:id="dbc.fo.design-titlepages.titlepage.directly">
      <title>Customizing Title Pages Directly</title>  
      <para>To create a title page directly using named templates
        proceed as follows:</para>
      
      <procedure xml:id="pro.fo.design-titlepages.titlepage.directly">
        <step>
          <para>Open the file
            <filename>fo/titlepage.templates.xsl</filename> of your
            DocBook XSL stylesheet distribution.</para>
        </step>
        <step>
          <para>Search for the correct template name(s). A template name is
            composed of the following components, wheras <replaceable>ELEMENT</replaceable>
            and <replaceable>SIDE</replaceable> are placeholders:
          </para>
          <screen><replaceable>ELEMENT</replaceable>.titlepage.<replaceable>SIDE</replaceable></screen>
          <para>As we want to change the title page of a book for the
            left (verso) and right (recto) pages, the correct 
            template names are <function>book.titlepage.recto</function>
            and <function>book.titlepage.verso</function>.</para>
        </step>
        <step>
          <para>Create a new file, for example
              <filename>booktitlepage.xsl</filename>. This will contain all our
            customizations of our book's title page. </para>
        </step>
        <step>
          <para>Copy the <function>book.titlepage.recto</function> and
              <function>book.titlepage.verso</function> templates into
            your new file <filename>booktitlepage.xsl</filename>.</para>
        </step>
        <step>
          <para>Customize the template
              <function>book.titlepage.recto</function> according to the
            definitions in 
              <xref linkend="li.fo.design-titlepages.rectopage.defs"/>:</para>
          <substeps>
            <step>
              <para>Leave the two <tag>xsl:choose</tag> conditions intact to
                select the book's title and subtitle.</para>
            </step>
            <step>
              <para>Insert after the last <tag class="endtag"
                  >xsl:choose</tag> the following line to select the
                book's author from <code>d:info/d:author</code>:</para>
              <programlisting
 >&lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:info/d:author"/></programlisting>
            </step>
            <step>
              <para>Insert the following line to select the book's
                edition from <code>d:info/d:edition</code>:</para>
              <programlisting
 >&lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:info/d:edition"/></programlisting>
            </step>
            <step>
              <para>Remove the other <tag>xsl:apply-templates</tag>
                elements as we only want to display the title, subtitle,
                author, and the editor. The template should look like
                this:</para>
              <programlisting language="xml"
>&lt;xsl:template name="book.titlepage.recto">
  &lt;xsl:choose>
    &lt;xsl:when test="d:bookinfo/d:title">
      &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:bookinfo/d:title"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:info/d:title">
      &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:info/d:title"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:title">
      &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:title"/>
    &lt;/xsl:when>
  &lt;/xsl:choose>
              
  &lt;xsl:choose>
    &lt;xsl:when test="d:bookinfo/d:subtitle">
      &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:bookinfo/d:subtitle"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:info/d:subtitle">
      &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:info/subtitle"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:subtitle">
      &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:subtitle"/>
    &lt;/xsl:when>
  &lt;/xsl:choose>
  
  &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:info/d:author"/>
  &lt;xsl:apply-templates mode="book.titlepage.recto.auto.mode" select="d:info/d:edition"/>
&lt;/xsl:template></programlisting>
            </step>
          </substeps>
        </step>
        <step>
          <para>Customize the template
              <function>book.titlepage.verso</function> according to the
            definitions in <xref linkend="li.fo.design-titlepages.versopage.defs"/>
            (note the different mode):</para>
          <substeps>
            <step>
              <para>Leave the two <tag>xsl:choose</tag> conditions intact to
                select the book's title and subtitle.</para>
            </step>            
            <step>
              <para>Insert after the last <tag class="endtag">xsl:choose</tag>
                the following line to select the book's author
                from <code>d:info/d:author</code>:</para>
              <programlisting
 >&lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:author"/></programlisting>
            </step>
            <step>
              <para>Insert the following line to select the book's
                edition from <code>d:info/d:edition</code>:</para>
              <programlisting
 >&lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:edition"/></programlisting>
            </step>
            <step>
              <para>Insert the following line to select some legal text
                from <code>d:info/d:legalnotice</code>:</para>
              <programlisting
 >&lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:legalnotice"/></programlisting>
            </step>            
            <step>
              <para>Insert the following line to select the book's ISBN
                number from <code>d:info/d:biblioid</code>:</para>
               <programlisting
 >&lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode"
    select="d:info/d:biblioid[@class='isbn']"/></programlisting>
            </step>            
            <step>
              <para>Remove the other <tag>xsl:apply-templates</tag>
                elements as we only want display the title, subtitle,
                author, editor, legal text, and the ISBN number. The
                template should look like this:</para>
              <programlisting language="xml"
>&lt;xsl:template name="book.titlepage.verso">
  &lt;xsl:choose>
    &lt;xsl:when test="d:bookinfo/d:title">
      &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:bookinfo/d:title"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:info/d:title">
      &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:title"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:title">
      &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:title"/>
    &lt;/xsl:when>
  &lt;/xsl:choose>
              
  &lt;xsl:choose>
    &lt;xsl:when test="d:bookinfo/d:subtitle">
      &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:bookinfo/d:subtitle"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:info/d:subtitle">
      &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:subtitle"/>
    &lt;/xsl:when>
    &lt;xsl:when test="d:subtitle">
      &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:subtitle"/>
    &lt;/xsl:when>
  &lt;/xsl:choose>
  
  &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:author"/>
  &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:editor"/>
  &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:legalnotice"/>
  &lt;xsl:apply-templates mode="book.titlepage.verso.auto.mode" select="d:info/d:biblioid[@class='isbn']"/> 
&lt;/xsl:template></programlisting>
            </step>
          </substeps>
        </step>
        <step>
          <para>Insert the constructed
            <filename>booktitlepage.xsl</filename> into your
            customization layer <filename>mybooktitlepage.xsl</filename>:</para>
          <programlisting language="xml"><xi:include parse="text"
            href="xslt/mybooktitlepage.xsl"/></programlisting>
        </step>
        <step>
          <para>Build your book as usual with your customization layer.</para>
        </step>
      </procedure>

    </section>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para>There are several reasons to customize a title page:</para>
    <itemizedlist>
      <listitem>
        <para>You want a different order of the default elements</para>
      </listitem>
      <listitem>
        <para>You want to show or hide elements</para>
      </listitem>
      <listitem>
        <para>You want to insert corporate logos, links, or other
          graphical illustrations</para>
      </listitem>
      <listitem>
        <para>You want to distinguish between a document in draft or in
          final state.</para>
      </listitem>
    </itemizedlist>
    
    <para>All these requirements can be done, either with the direct or
      indirect method. Apart from your own preferences, use the direct
      method if you have more complicated conditions which can not be
      expressed by simple title page definitions. Sometimes it is faster to
      just add the respective named template instead of going through
      the indirect method. </para>
    <para>Regardless which method you prefer, it ends up with the same
      named templates. For a book title page, the named templates are
      called in the following order, starting with
        <function>book.titlepage</function>:</para>
    <screen linenumbering="unnumbered">book.titlepage
  book.titlepage.before.recto
  book.titlepage.recto
  book.titlepage.before.verso
  book.titlepage.verso
  book.titlepage.separator</screen>
    <para>Usually, the <function>book.titlepage</function> template is
      only customized in rare cases. For example, if you want to revamp
      the previous schema completely and add additional pages like
        <phrase xlink:href="http://en.wikipedia.org/wiki/Half_title"
        >half titles</phrase>. Each of the templates in
        <function>book.titlepage</function> are responsible for a
      different setup of a title page. We discussed the <function>book.titlepage.recto</function>
      and <function>book.titlepage.verso</function> templates already.
      The templates <function>book.titlepage.separator</function> and
        <function>book.titlepage.before.verso</function> contain page
      breaks, whereas <function>book.titlepage.before.recto</function>
      is empty.</para>
    <para>Note, all of the above templates process title page elements
      in a special mode. As you have seen in <xref
        linkend="dbc.fo.design-titlepages.titlepage.directly"/>, elements for a
      recto page are processed in the
        <code>book.titlepage.recto.auto.mode</code> mode. The same
      principle applies for a verso page and its mode
        <code>book.titlepage.verso.auto.mode</code>. However, not all
      elements have a template with such modes as not all elements can
      (and should) appear on a title page. Look into the file
        <filename>fo/titlepage.templates.xsl</filename> to see which are
      definied. Assume title and subtitle have already templates for
      recto and verso pages as well as all the elements which are listed
      in the original <function>book.titlepage.verso</function> and
      <function>book.titlepage.recto</function>.</para>
    <para>For example, the <tag>edition</tag> element has certainly no
      templates for a recto and verso book title page. If you do not
      have definied one, a fallback mechanism takes place. For this
      reason, if you call a element in <function>book.titlepage.verso</function> and
      <function>book.titlepage.recto</function>, you need also to define
      the respective templates: </para>
    <programlisting language="xml"
      >&lt;xsl:template match="d:edition" mode="book.titlepage.recto.auto.mode">
   &lt;!-- Add your code for a recto page -->
&lt;/xsl:template>
    
&lt;xsl:template match="d:edition" mode="book.titlepage.verso.auto.mode">
   &lt;!-- Add your code for a verso page -->
&lt;/xsl:template></programlisting>
    <para>Usually, you want to display the edition on a recto page
    different than on a verso page.</para>
  </section>
  <section role="seealso">
    <title>See Also</title>
    <para><link xlink:href="http://www.sagehill.net/docbookxsl/HTMLTitlePage.html"/></para>
  </section>
</section>

<?xml version="1.0" encoding="UTF-8"?>
<!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
-->
<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->

<section xml:id="dbc.db.xincludes" remap="topic"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Modularize Your Document with XIncludes</title>
  <info>
    <definitions definitionfile="defs.xml"/>
    <keywordset>
      <keyword>xinclude</keyword>
      <keyword>module</keyword>
      <keyword>assemblies</keyword>
    </keywordset>
  </info>
  
  <section role="problem">
    <title>Problem</title>
    <para>You need a method to split your document into several
        <quote>modules</quote> and put it together afterwards.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para><emphasis role="italic">XInclude</emphasis> is a W3C
      specification and defines the elements <tag>xi:include</tag> and
        <tag>xi:fallback</tag>. They are not DocBook elements (as they
      are definied by the W3C), however they have been integrated in
      version 5.x<footnote>
        <para>To use XInclude with DocBook 5.x, use the
            <filename>docbookxi.rnc</filename> RELAX NG schema. </para>
      </footnote>. Note, XIncludes work in DocBook regardless which
      version (4.x or 5.x) you use.</para>
    <para>If you want to use XIncludes, you need three things:</para>
    <itemizedlist>
      <listitem>
        <para>The element <tag>xi:include</tag>. In general, it can be
          placed almost everywhere. It is a <quote>pointer</quote> to
          the file which is going to be included.</para>
      </listitem>
      <listitem>
        <para>The attribute <tag class="attribute">href</tag> inside the
            <tag>xi:include</tag> element. It is an URI which refers to
          your included file.</para>
      </listitem>
      <listitem>
        <para>The file which is referenced by the <tag
          class="attribute">href</tag> attribute. The content of the
          file will replace the <tag>xi:include</tag> element.</para>
      </listitem>
    </itemizedlist>
    <para>The following example shows a book which points to a
      substructure assuming chapters:</para>
    <example xml:id="ex.db.xincludes.book-with-3-chapters">
      <title>A Book with XIncluded Chapters</title>
      <programlisting language="xml">&lt;book version="5.0"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  &lt;title>...&lt;/title>
  <emphasis role="bold">&lt;xi:include href="intro.xml"/>
  &lt;xi:include href="conceptual-overview.xml"/></emphasis>
&lt;/book></programlisting>
    </example>
    <para>The above book contains an introduction (file
        <filename>intro.xml</filename>) and a conceptual overview (file
        <filename>conceptual-overview.xml</filename>). Both are
      referenced by the XInclude´s <tag class="attribute">href</tag>
      attribute. </para>
    <para>Before you transform your document, you need to resolve
      your XIncludes. The following procedure shows a typical
      workflow:</para>
    <procedure>
      <title>Typical Workflow with XIncludes</title>
      <step>
        <para>Write your document structure, usually it will be a book
          or an article. Do not forget to include the XInclude namespace
            <uri>http://www.w3.org/2001/XInclude</uri> into the root
          element. It is common to use the prefix <tag class="prefix"
            >xi</tag>.</para>
      </step>
      <step>
        <para>Add <tag>xi:include</tag> elements for those elements you
          want to maintain in a separate file. Typically, this can be an
          appendix, chapter, preface, glossary, or any other top level
          elements.</para>
      </step>
      <step>
        <para>Resolve your XIncludes. Use a XML parser who supports
          XIncludes, for example, <command>xmllint</command> from the
          libxml2 library. This XML parser brings the
            <option>--xinclude</option> option to resolve all your
          XInclude elements in one step:</para>
        <screen><command>xmllint</command> --xinclude --output big.xml book.xml</screen>
        <para>The above command resolves all XIncludes and saves the
          result in the file <filename>big.xml</filename>. Note, this
          does not perform any validation! It just replaces
            <tag>xi:include</tag> with the content of the referenced
          file. After the XInclude elements are resolved, the file looks
          now like this:</para>
        <programlisting>&lt;book version="5.0"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  &lt;title>...&lt;/title>
  &lt;chapter>
    &lt;title>Introduction&lt;/title>
    &lt;para>...&lt;/para>
  &lt;/chapter>
  &lt;chapter>
   &lt;title>Conceptual Overview&lt;/title>
   &lt;para>...&lt;/para>
  &lt;/chapter>
&lt;/book></programlisting>
      </step>
      <step>
        <para>Validate the result (in our example, it is
            <filename>big.xml</filename>) with your DocBook schema. </para>
      </step>
      <step>
        <para>Transform the result file with your stylesheets into your
          output format.</para>
      </step>
    </procedure>
    
  </section>
  <section role="discussion">
    <para>The previous procedure showed a book with xincluded chapters.
      It is possible to even go deeper and include also section into a
      chapter. Actually, there is no limit. You should only be aware
      that you do not create circular references (file A includes file B
      and B includes A).</para>
    <para>As XIncludes are very common nowadays, resolving
        <tag>xi:include</tag> and transforming into the output format
      can be done in one step. This is the case for
        <command>xsltproc</command> from the libxslt library. Use the
        <option>--xinclude</option> option as shown:</para>
    <screen><command>xsltproc</command> --xinclude </screen>
    <title>Discussion</title>
    <para>The last section showed a general method to work with
      XIncludes.</para>
    <para>In most cases this is enough. However, XIncludes offers more
      benefits which are discovered in the following subsections.</para>
    
    <section xml:id="sec.db.modularize.xifallback">
      <title>Fallback</title>
      <para>If the referenced file in the <tag>xi:include</tag> element
        is not available, the XInclude step will fail. What can you do?
        The XInclude specification definies two elements:
          <tag>xi:include</tag> and <tag>xi:fallback</tag>. The latter
        can be used to add code when a ressource could not be
        retrieved:</para>
      <programlisting language="xml">&lt;xi:include href="revhistory.xml">
  &lt;xi:fallback>
    &lt;para>The revision history could not be retrieved.&lt;/para>
  &lt;/xi:fallback>
&lt;/xi:include></programlisting>
      <para>The previous code does the following: When XInclude are being
        resolved, the XML parser tries to include the file
        <filename>revhistory.xml</filename>. If the file can not be
        retrieved, it will process the <tag>xi:fallback</tag> element and
        include the contents.</para>
    </section>
    
    <section xml:id="sec.db.modularize.include-text">
      <title>Including Text</title>
      <para></para>
    </section>
    
    <section xml:id="sec.db.modularize.xpointer">
      <title>Partial Inclusion</title>
      <para></para>
    </section>

  </section>
  <section role="seealso">
    <title>See Also</title>
    <para><link xlink:href="http://www.w3.org/TR/xinclude/"/></para>
  </section>
</section>

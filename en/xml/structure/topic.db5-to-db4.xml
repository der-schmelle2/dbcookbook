<?xml version="1.0" encoding="UTF-8"?>
<!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>-->
<section xml:id="dbc.structure.db5-to-db4" remap="topic"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Converting DocBook From Version 5 into Version 4</title>
  <info>
    <definitions definitionfile="defs.xml"/>
  </info>
  
  <section role="problem">
    <title>Problem</title>
    <para>You have a DocBook document in version 5.x, but you need 4.x.</para>
  </section>
  <section role="solution">
    <title>Solution</title>
    <para>Generally, the difference between version 4 and version 5 are
      minimal. Refer to the <link
        xlink:href="http://www.docbook.org/tdg51/en/html/ch01.html#d6e550">The
        Definitive Guide</link> for detailed information what has been
        added, removed, or renamed.</para>
    <para>In cases you have or get DocBook&#xa0;5 and need the former
      version, the following stylesheet might help which supports the
      core transformation:</para>
    <example xml:id="ex.db5to4-core.xsl">
      <title><filename>db5to4-core.xsl</filename></title>
      <programlisting language="xml" linenumbering="numbered"><xi:include 
        href="xslt/db5to4-core.xsl" parse="text"/></programlisting>
    </example>
    <para>Use your favorite XSLT prozessor to transform your documents.</para>
  </section>
  <section role="discussion">
    <title>Discussion</title>
    <para>The stylesheet from <xref linkend="ex.db5to4-core.xsl"/> imports
      the templates from <filename>copy.xsl</filename> using an
      <emphasis>identity transformation</emphasis>. That means, whatever
      is <emphasis>not</emphasis> specified gets copied. In most cases
      that is what you wantâ€”a DocBook&#xa0;5 <tag>section</tag> element
      will be transformed into an equally named DocBook&#xa0;4 
      <tag>section</tag> element without the namespace.
    </para>
    <para>Where it gets difficult are the new elements which are
      introduced in DocBook&#xa0;5. Whenever the stylesheet encounter
      those it will print a warning. These elements are not copied to
      the output stream. If you have one of these elements you need to
      customize the stylesheet yourself.</para>
    <para>Another issue are the almost ubiquitary <tag>info</tag>
      element which can appear in structual and block elements. The
      above stylesheet does it wrong and copies any <tag>info</tag>
      element straight into the output stream. However, DocBook&#xa0;4
      has different element names for meta information in
      DocBook&#xa0;5. If you have <tag>info</tag> elements in your 
      document they have to be renamed, depending on the parent element:</para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Meta Information Inside Structural Elements</title>
          <para>An <tag>info</tag> element inside a <tag>sect1</tag>
            appends the suffix <literal>info</literal> to the name of
            its parent element and is renamed therefore as
              <tag>sect1info</tag>. This rule is applied for structural
            elements like <tag>book</tag>, <tag>chapter</tag>, and
            others.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Meta Information Inside Block Elements</title>
          <para>An <tag>info</tag> element inside an <tag>example</tag>
            is renamed as <tag>blockinfo</tag>. This rule is applied for
          block elements like <tag>equation</tag>, <tag>figure</tag>,
          and others.</para>
        </formalpara>
      </listitem>
    </itemizedlist>
    
    <para>Apart from the renaming, order of the renamed <tag>info</tag>
      element is crucial. Consider the following DocBook&#xa0;5
      structure:</para>
    <screen>section
  title
  info</screen>
    <para>This structure has to be renamed and reorganized as
      follows:</para>
    <screen>section
  sectioninfo
  title</screen>
    <para>As you can see, the <tag>title</tag> element appears now
        <emphasis>after</emphasis> the renamed <tag>info</tag>. All
      these issues are solved with the following additional
      stylesheet:</para>
    <example xml:id="ex.db5to4-info.xsl">
      <title><filename>db5to4-info.xsl</filename></title>
      <programlisting language="xml" linenumbering="numbered"><xi:include 
          href="xslt/db5to4-info.xsl" parse="text"/></programlisting>
    </example>
    <para>To combine both, use the following stylesheet:</para>
    <example xml:id="ex.db5to4-withinfo.xsl">
      <title><filename>db5to4-withinfo.xsl</filename></title>
      <programlisting language="xml" linenumbering="numbered"><xi:include 
          href="xslt/db5to4-withinfo.xsl" parse="text"/></programlisting>
    </example>
    <para>The above stylesheets were separated between a core
      functionality (<filename>db5to4-core.xsl</filename>) with
      additional <tag>info</tag> element handling
      (<filename>db5to4-info.xsl</filename>). In most cases you will use
      the stylesheet <filename>db5to4-withinfo.xsl</filename>, but if
      you want to implement a different <tag>info</tag> handling you
      can. In <xref linkend="ex.db5to4-withinfo.xsl"/> just replace the 
      line with importing <filename>db5to4-info.xsl</filename> with your
      own implementation.      
    </para>
  </section>
  <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>

<?xml version="1.0"?>
<!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><book xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.1"
      xml:lang="en"
      xml:id="dbcookbook"
      status="draft">
  <title>The DoCookBook</title>
  <subtitle>Recipies for DocBook Developers</subtitle>
  <info>    
      <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns="http://creativecommons.org/ns#">
         <License rdf:about="http://creativecommons.org/licenses/by-nc-sa/3.0/de/">
            <permits rdf:resource="http://creativecommons.org/ns#Reproduction"/>
            <permits rdf:resource="http://creativecommons.org/ns#Distribution"/>
            <requires rdf:resource="http://creativecommons.org/ns#Notice"/>
            <requires rdf:resource="http://creativecommons.org/ns#Attribution"/>
            <prohibits rdf:resource="http://creativecommons.org/ns#CommercialUse"/>
            <permits rdf:resource="http://creativecommons.org/ns#DerivativeWorks"/>
            <requires rdf:resource="http://creativecommons.org/ns#ShareAlike"/>
         </License>
      </rdf:RDF>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><legalnotice version="5.1" xml:lang="en" xml:id="legalnotice">
         <title>License</title>
  
         <sidebar>
            <title>Licensed under Creative Commons</title>
            <informaltable border="0" frame="void" rules="none" class="ccbox">
               <tbody>
                  <tr>
                     <td valign="top">
                        <inlinemediaobject>
                           <imageobject>
                              <imagedata fileref="png/by-nc-sa-3.0-de-88x31.png" width="88px"/>
                           </imageobject>
                           <textobject>
                              <phrase>Creative Commons License Agreement</phrase>
                           </textobject>
                        </inlinemediaobject>
                     </td>
                     <td>
                        <para>This work is licensed as Creative Commons
              Attribution-NonCommercial-ShareAlike 3.0 Germany License (CC
              BY-NC-SA 3.0 DE). For more information, refer to <xref linkend="dbc.preface.license"/> 
                           <!--or go to <link
                xlink:show="new"
                xlink:href="http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en"
              /></para>
            <para>See also the license texts <xref linkend="cc-by-nc-sa-30-de"/>
              and <xref linkend="cc-by-nc-sa-30-unported"/>-->.</para>
                     </td>
                  </tr>
               </tbody>
            </informaltable>
         </sidebar>
  
      </legalnotice>
      <biblioid class="uri" role="project">http://sf.net/p/doccookbook/</biblioid>
      <biblioid class="uri" role="home">http://doccookbook.sf.net</biblioid>
      <author>
         <personname>
            <firstname>Thomas</firstname>
            <surname>Schraitle</surname>
         </personname>
         <email>tom_schr@web.de</email>
      </author>
      <othercredit class="other" otherclass="proofreader">
         <personname>
            <firstname>Antje</firstname>
            <surname>Faber</surname>
         </personname>
      </othercredit>
      <edition>1</edition>
      <keywordset>
         <keyword>DocBook</keyword>
         <keyword>Customization</keyword>
         <keyword>XSLT</keyword>
      </keywordset>
      <pubdate>Last published version: December 2011</pubdate>
      <releaseinfo role="draft">Draft (Version 0.3)</releaseinfo>
    
      <cover xml:id="draftahead">
         <para>
            <note>
               <title>Draft Ahead!</title>
               <para>This book is a draft and still work in progress. You
            will find funny typos, embarrassing English grammar mistakes
            from a German native speaker, annoying inconsistencies,
            missing topics, and plain errors. Nevertheless, I hope the
            topics should give you an idea. </para>
               <para>Visit this site from time to time and see how the book
            grows and how more and more of these annoyances will vanish.
            To accelerate this process, send me praise, critisism,
            patches, donations, or even write a topic. Read 
            <xref linkend="dbc.preface.contrib"/> to
            find more how to support me.</para>
            </note>
         </para>      
      </cover>
      <?xml-model href="../../frameworks/rng/5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?><revhistory version="5.1">
         <title>Revision History</title>
         <revision xml:id="r0.3">
            <revnumber>0.3</revnumber>
            <date>2011-12-28</date>
            <author>
               <personname>
                  <firstname>Thomas</firstname>
                  <surname>Schraitle</surname>
               </personname>
            </author>
            <authorinitials>toms</authorinitials>
            <revdescription>
               <para>Third public release, see <link xlink:href="http://sf.net/mailarchive/message.php?msg_id=28599375"/>
               </para>
            </revdescription>
         </revision>
  
         <revision xml:id="r0.2">
            <revnumber>0.2</revnumber>
            <date>2011-12-23</date>
            <author>
               <personname>
                  <firstname>Thomas</firstname>
                  <surname>Schraitle</surname>
               </personname>
            </author>
            <authorinitials>toms</authorinitials>
            <revdescription>
               <para>Second public release, see <link xlink:href="http://sf.net/mailarchive/message.php?msg_id=28585391"/>
               </para>
            </revdescription>
         </revision>
  
         <revision xml:id="r0.1">
            <revnumber>0.1</revnumber>
            <date>2011-12-07</date>
            <author>
               <personname>
                  <firstname>Thomas</firstname>
                  <surname>Schraitle</surname>
               </personname>
            </author>
            <authorinitials>toms</authorinitials>    
            <revdescription>
               <para>First public revision announced</para>
            </revdescription>
         </revision>
      </revhistory>
  </info>
    
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><preface xml:id="dbc.preface">
      <title>Welcome!</title>
      <info>
    
  </info>
  
      <blockquote>
         <title>Mission</title>
         <para>
            <citetitle xlink:href="https://doccookbook.sf.net">The DoCookBook Project</citetitle> aims to create an open source
      book about <phrase xlink:href="http://www.docbook.org/">DocBook</phrase> and the <phrase xlink:href="http://docbook.sf.net/release/xsl/current/doc/">DocBook XSL stylesheets</phrase> written in a cookbook-style
      manner and released under a Creative Commons license.</para>
      </blockquote>
  
      <para>According to its <phrase xlink:href="http://www.docbook.org/whatis">homepage</phrase>,
      <quote>DocBook is a schema (available in several languages
      including RELAX NG, SGML and XML DTDs, and W3C XML Schema)
      maintained by the DocBook Technical Committee of OASIS. It is
      particularly well suited to books and papers about computer
      hardware and software (though it is by no means limited to these
      applications).</quote>
      </para>
      <para>Although there are helpful and valuable documentation―be it as a
    printed book<footnote xml:id="fnt.tdg">
            <para>Like the reference <citetitle xlink:href="http://www.docbook.org/tdg51/en/html/docbook.html">DocBook 5: The Definitive Guide</citetitle> from <personname>
                  <firstname>Norman</firstname>
                  <surname>Walsh</surname>
               </personname> or <personname>
                  <firstname>Bob</firstname>
                  <surname>Stayton</surname>
               </personname>'s <citetitle xlink:href="http://www.sagehill.net/docbookxsl/">DocBook
          XSL</citetitle>
            </para>
         </footnote> or online<footnote>
            <para>
               <personname>
                  <firstname>Dave</firstname>
                  <surname>Pawson</surname>
               </personname> maintains a <link xlink:href="http://www.dpawson.co.uk/">DocBook FAQ</link> and
        the previous mentioned books can be found online too.</para>
         </footnote>―I always felt there is a gap. This gap could be bridged
    with a guide that only concentrates on problems and their solution
    in a concise manner explained by step-by-step procedures. Until now
    nobody wrote a book that combines possible problems, pitfalls,
      <quote>how to do this</quote>, and the benefits in a cookbook
    style. My book is intented to be such a book. However, it
      <emphasis>does not</emphasis> seek to replace any other
    information, be it printed or online. It aims for
      <emphasis>enhancing</emphasis> the world of DocBook with a
    different view. </para>
      <para> The topics in this book are mostly based on my own experiences
    with DocBook and the DocBook XSL stylesheets. However, it also
    includes questions and answers from other sources: from the DocBook
    mailinglists, other sites that inspired me, or questions from
    collegues. It is the nature of such topics that there might be some
    overlap with other sources. When other authors inspired me, I have
    included their names. If you think your name is missing, please let
    me know. </para>
      <para>As I have learned (and still do) a lot from the masters of DocBook, 
    it is time to give something back. What you are reading is the first
    draft of the fruits of these efforts.  
    Currently, this book is available under a
    Creative Commons license (see <xref linkend="legalnotice"/> if you
    want to know more). I hope you enjoy reading this book as much as I
    enjoy writing it. </para>
  
      <section xml:id="dbc.preface.audience">
         <title>Audience</title>
         <para>This book covers topics which range from very easy to pretty
      demanding. The more challenging a problems is the more you need
      experience from different domains (CSS, FO, XSLT, etc.) As such,
      this book does not and cannot attempt to teach you DocBook or any
      such related technology (with the exception of <xref linkend="dbc.markup"/>). If you want to learn DocBook or need
      some help with XML or XSLT, search elsewhere. There are plenty of
      information available either online or printed. </para>
         <para>This book is aimed at DocBook users who write
        <emphasis>and</emphasis> seek answers for their customization
      problems. However, with some try-and-error, it can also be useful
      for ordinary writers who want to try something out. For readers
      who want further information, links included in the <citetitle>See
        Also</citetitle> section at the end of each topic. </para>
      </section>
  
      <section xml:id="dbc.preface.db4-vs-5">
         <title>DocBook 4 or 5?</title>
         <para>Although a lot of these topics can be used for both versions
      with minimal changes, this book focuses on DocBook 5. Why?
      There are several reasons: </para>
    
         <itemizedlist>
            <listitem>
               <para>DocBook 4 is in maintenance mode and DocBook 5
          is the future.</para>
            </listitem>
            <listitem>
               <para>I wanted to show an exhaustive example with
          DocBook 5. With this book, I hope, users can learn how to
          adopt and use it.</para>
            </listitem>
            <listitem>
               <para>It is easy to transform DocBook 4 into version 5 as
          shown in <xref linkend="dbc.structure.db4-to-db5"/>.</para>
            </listitem>
            <listitem>
               <para>It simplifies writing <emphasis>a lot</emphasis> if you
          can concentrate on only one version and not on two. It is also
          easier to read for you.</para>
            </listitem>      
         </itemizedlist>
    
         <para>The differences are documented in the <citetitle>DocBook5: The
        Definitive Guide</citetitle> book, section <citetitle xlink:href="http://www.docbook.org/tdg5/en/html/ch01.html#introduction-whats-new">What’s New in DocBook V5.0?</citetitle>.</para>
    
         <para>Apart from the DocBook examples, the transformation examples
      are currently based on the DocBook XSL stylesheets version 1.x.y.
      They are stable, well-documented and can be used with any XSLT 1.0
      processor. At the moment, these stylesheets are rewritten for XSLT
      2.0. 
    </para>
         <para>On the other side, there is always the tension between
      implementing new concepts and retaining backward compatibility.
      For this reason, the XSLT 1.0 stylesheets are rewritten for XSLT
      2.0. This task is not finished yet. As soon as they are
      production-stable, they will be covered in this book.</para>
    
      </section>
  
      <section xml:id="dbc.preface.further-reading">
         <title>Further Readings</title>
         <para>By no means is this book complete. As this book is based on
      technologies like CSS, XML, (X)HTML, and XSLT, it is always a good
      idea to seek other information. I highly recommend to read the
      books by <personname>
               <firstname>Norman</firstname>
               <surname>Walsh</surname>
            </personname> and <personname>
               <firstname>Bob</firstname>
               <surname>Stayton</surname>
            </personname> as mentioned before.</para>
      </section>
  
      <section xml:id="dbc.preface.typo">
         <title>Typographical Conventions</title>
         <para>The following typographical conventions are used in this book:</para>
         <itemizedlist>
            <listitem>
               <para>
                  <emphasis>Italic</emphasis> is used for definition of new
          terms or emphasised text.</para>
            </listitem>
            <listitem>
               <para>
                  <literal>Monospace text</literal> is used for code
          listings, URLs, filenames, namespaces, or links.</para>
            </listitem>
            <listitem>
               <para>
                  <command>Monospace bold text</command> for commands or
          emphasised text in listings.</para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>
                     <literal>Monospace italic
        text</literal>
                  </emphasis> is used for placeholders in
          listings.</para>
            </listitem>
         </itemizedlist>
      </section>
  
      <section xml:id="dbc.preface.feedback">
         <title>Feedback</title>
         <para>The project is hosted on <link xlink:show="new" xlink:href="https://sourceforge.net">SourceForge</link> under the
      name <link xlink:show="new" xlink:href="https://sourceforge.net/projects/doccookbook/">DocCookBook</link>.
      Feel free to send me praise, constructive criticism, suggestions,
      ideas, improvements, or anything else. 
    </para>
      </section>
  
      <section xml:id="dbc.preface.contrib">
         <title>Contribute to the Book</title>
         <para>The source code of this book is published and maintained as a 
      Mercurial repository. Feel free to clone it, make improvements and
      mail me your changes to <email>tom_schr@web.de</email>
            <!-- 
        or use the link <link 
        xlink:href="https://sourceforge.net/sendmessage.php?touser=27667"
      />-->. 
    </para>
         <para>
      Getting a copy takes just a few seconds. 
      If you have  Mercurial already installed on your system, run the 
      following command:</para>
         <screen>hg clone https://hg.code.sf.net/p/doccookbook/code doccookbook</screen>
         <para>Mercurial is a free, distributed version control system and
      available for Mac, Linux, and Windows. Download it from <link xlink:href="http://mercurial.selenic.com"/>.</para>
      </section>
  
      <section xml:id="dbc.preface.piwik">
         <title>A Few Words About Piwik</title>
         <para>If you are reading this text online, you may have noticed that
      this project uses <application xlink:href="http://piwik.org">Piwik</application>. According to its home page, Piwik is a
        <quote>real time web analytics software program</quote>. The
      result gives me detailed reports on my Web sites visitors: where do they
      come from, which browser and operating system they use and so on.
    </para>
         <para>Why Piwik? First it is open source, but that is not the main
      reason. The main reason why I use Piwik is it collects data anonymously 
      to create statistical studies. With these result I can improve
      this project and make it better.</para>
         <para>For example, if my visitors browsing the Web through Firefox,
      Opera, and Chromium instead of Internet Explorer, I can focus more
      on the first three browsers. Focusing on one area gives me more
      time to write cool new topics. Or improve existing text. Or draw
      nice graphics. Furthermore with the collected data I can see which
      topics are the most popular and which needs additional devotion. I
      hope you get the idea.</para>
         <para>Just to make it clear: The collected data is completely
      anonymous and only used to improve this project. It will
        <emphasis>never</emphasis> be sold nor will it be used to spam
      you.</para>
      </section>
  
      <!--<section xml:id="dbc.preface.faq">
    <title>FAQ</title>
    <qandaset>
      <qandaentry>
        <question>
          <para>Why is my problem not covered?</para>
        </question>
        <answer>
          <para>This can have several reasons: it is already planned but
          not written yet or I was not aware of this issue. Probably it
          is just a lack of time. If you think, you have covered or know
          some topic, I would really appreciate it if you contribute
          your ideas. Just fill out a ticket on <link 
            xlink:href="https://sourceforge.net/p/doccookbook/tickets/"/>
            or write me an email to <email>&mymail;</email>.
          </para>
        </answer>
      </qandaentry>
      <qandaentry>
        <question>
          <para>aaa</para>
        </question>
        <answer>
          <para>bbb</para>
        </answer>
      </qandaentry>
    </qandaset>
  </section>-->
  
  <section xml:id="dbc.preface.license">
         <title>Licensed under Creative Commons</title>
         <para>The book is currently released under a Creative Commons
        <acronym xlink:href="http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en">CC BY-NC-SA 3.0 DE<alt>Creative Commons
          Attribution-NonCommercial-ShareAlike 3.0</alt>
            </acronym>
      license (see original German text in <xref linkend="cc-by-nc-sa-30-de" xrefstyle="select:label"/> or the
      English translation in <xref linkend="cc-by-nc-sa-30-unported" xrefstyle="select:label"/>). After this book is finished, the
      license will be changed to <acronym xlink:href="http://creativecommons.org/licenses/by-sa/3.0/de/deed.en">CC BY-SA 3.0 DE<alt>Creative Commons Attribution-ShareAlike 3.0</alt>
            </acronym>.</para>
      </section>  
  
      <section xml:id="dbc.preface.ack">
         <title>Acknowledgments</title>
         <para>Such a large project is usually not a one man show. Many
    people contributed to this book:</para>
         <!--  -->
    <!--<para>Written <?dbtimestamp?></para>-->
    <itemizedlist>
            <listitem>
               <para>
                  <personname>
                     <firstname>Antje</firstname>
                     <surname>Faber</surname>
                  </personname> for proofreading some of my texts.</para>
            </listitem>
            <listitem>
               <para>
                  <personname>
                     <firstname>Lars</firstname>
                     <surname>Vogel</surname>
                  </personname> for his suggestions and improvements.</para>
            </listitem>
            <listitem>
               <para>
                  <personname>
                     <firstname>Matthias</firstname>
                     <surname>Weckbecker</surname>
                  </personname> for helping me with some wording and ideas.</para>
            </listitem>
         </itemizedlist>
      </section>
   </preface>
  
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><chapter xml:id="dbc.markup" remap="topic">
      <title>Knowing DocBook’s Structure</title>
      <info>
    
         <biblioid class="other" otherclass="ticket">19</biblioid>
         <abstract>
            <para>DocBook has a wide variety of elements covering different
        semantics: from structural elements like <tag>book</tag>
               <tag>,
          chapter</tag>, <tag>appendix</tag>, to block elements like
          <tag>orderedlist</tag>, <tag>table</tag>, <tag>figure</tag>,
        to inline elements like <tag>filename</tag>, <tag>quote</tag>,
        or <tag>link</tag>. All of these elements are well covered in
          <citetitle>The Definitive Guide</citetitle>. This chapter
        shows more the unknown parts and how to avoid pitfalls and
        improve consistency throughout your documentation. </para>
         </abstract>
      </info>
  
      <section xml:id="dbc.markup.intro">
         <title>Introduction</title>
         <para>
            <remark>TBD</remark>
         </para>
      </section>
  
      <!-- 
   * Knowing the Differences Between DocBook's Version 4 and Version 5
   * Modularize your Document with XIncludes
   * Modularize your Document with Assemblies
   * Differentiate DocBook Elements (Divisions, Block, Inline)
   * Writing Topics with DocBook
   * Distinguish Between Section and SectX
   * Using Lists
   * Using Tables
   * Adding Codelistings
   * Implementing Cross References
   * Writing a Glossary
   * Inserting Remarks
   * Writing a Reference
   * Writing Bibliographies
   * Inserting Indexterms
   * Adding Images
   * Utilize Extended XLinks
     http://www.balisage.net/Proceedings/vol7/html/Vlist01/BalisageVol7-Vlist01.html
   * Knowing DocBook Derivates: Simple DocBook, Publishers Schema
   * Using Alternative Description for Acronyms
     <acronym><alt>extensible Markup Language</alt>XML</acronym>
   * Using Manpage Notation
     <citerefentry>
      <refentrytitle>foo</refentrytitle><manvolnum>1</manvolnum>
    </citerefentry>
   * Inserting Inline Quotes
  -->
  <!-- <xi:include href="db/topic.toplevel.xml"/> -->
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.db.xincludes" remap="topic" userlevel="easy">
         <title>Modularize Your Document with XIncludes</title>
         <info>
    
            <keywordset>
               <keyword>XInclude</keyword>
               <keyword>module</keyword>
               <keyword>assemblies</keyword>
               <keyword>XPointer</keyword>
            </keywordset>
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You need a method to split your document into several
        <quote>modules</quote> and put it together afterwards.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Use <emphasis role="italic">XInclude</emphasis>. It is a <acronym>W3C<alt>World Wide Web Consortium</alt>
               </acronym>
      specification and defines the elements <tag>xi:include</tag> and
        <tag>xi:fallback</tag>. They are not DocBook elements (as they
      are definied by the <acronym>W3C</acronym> and not <acronym>OASIS<alt>Organization for the Advancement of Structured Information Standards</alt>
               </acronym>), however 
      they have been integrated in version 5.x<footnote>
                  <para>To use XInclude with DocBook 5.x, use the
            <filename>docbookxi.rnc</filename> RELAX NG schema. </para>
               </footnote>. Note, XIncludes work in DocBook regardless which
      version (4.x or 5.x) you use.</para>
            <para>If you want to use XIncludes, you need these things:</para>
            <itemizedlist>
               <listitem>
                  <para>A XML parser who supports XIncludes.</para>
               </listitem>
               <listitem>
                  <para>The element <tag>xi:include</tag>. In general, it can be
          placed almost everywhere. It is a <quote>pointer</quote> to
          the file which is going to be included.</para>
               </listitem>
               <listitem>
                  <para>The attribute <tag class="attribute">href</tag> inside the
            <tag>xi:include</tag> element. It is an URI which refers to
          your included file.</para>
               </listitem>
               <listitem>
                  <para>The file which is referenced by the <tag class="attribute">href</tag> attribute. The content of the
          file will replace the <tag>xi:include</tag> element.</para>
               </listitem>
            </itemizedlist>
            <para>The following example shows a book which points to a
      substructure assuming chapters:</para>
            <example xml:id="ex.db.xincludes.book-with-3-chapters">
               <title>A Book with XIncluded Chapters</title>
               <programlisting language="xml">&lt;book version="5.0"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
  &lt;title&gt;...&lt;/title&gt;
  <emphasis role="bold">&lt;xi:include href="intro.xml"/&gt;
  &lt;xi:include href="conceptual-overview.xml"/&gt;</emphasis>
&lt;/book&gt;</programlisting>
            </example>
            <para>The above book contains an introduction (file
        <filename>intro.xml</filename>) and a conceptual overview (file
        <filename>conceptual-overview.xml</filename>). Both are
      referenced by the XInclude´s <tag class="attribute">href</tag>
      attribute. </para>
            <para>Before you transform your document, you need to resolve your
      XIncludes, either by your XML parser or <quote>manually</quote> by
      a XSLT transformation. The following procedure shows a typical
      workflow:</para>
            <procedure>
               <title>Typical Workflow with XIncludes</title>
               <step>
                  <para>Write your document structure, usually it will be a book
          or an article. Do not forget to include the XInclude namespace
            <uri>http://www.w3.org/2001/XInclude</uri> into the root
          element. It is common to use the prefix <tag class="prefix">xi</tag>.</para>
               </step>
               <step>
                  <para>Add <tag>xi:include</tag> elements for those elements you
          want to maintain in a separate file. Typically, this can be an
          appendix, chapter, preface, glossary, or any other top level
          elements.</para>
               </step>
               <step>
                  <para>Resolve your XIncludes. Use a XML parser who supports
          XIncludes, for example, <command>xmllint</command> from the
          libxml2 library. This XML parser brings the
            <option>--xinclude</option> option to resolve all your
          XInclude elements in one step:</para>
                  <screen>
                     <command>xmllint</command> --xinclude --output big.xml book.xml</screen>
                  <para>The above command resolves all XIncludes and saves the
          result in the file <filename>big.xml</filename>. Note, this
          does not perform any validation! It just replaces
            <tag>xi:include</tag> with the content of the referenced
          file. After the XInclude elements are resolved, the file looks
          now like this:</para>
                  <programlisting>&lt;book version="5.0"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
  &lt;title&gt;...&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Introduction&lt;/title&gt;
    &lt;para&gt;...&lt;/para&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
   &lt;title&gt;Conceptual Overview&lt;/title&gt;
   &lt;para&gt;...&lt;/para&gt;
  &lt;/chapter&gt;
&lt;/book&gt;</programlisting>
               </step>
               <step>
                  <para>Validate the result (in our example, it is
            <filename>big.xml</filename>) with your DocBook schema. </para>
               </step>
               <step>
                  <para>Transform the result file with your stylesheets into your
          output format.</para>
               </step>
            </procedure>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The previous procedure showed a book with xincluded chapters.
      It is possible to even go deeper and include also section into a
      chapter. Actually, there is no limit. You should only be aware
      that you do not create circular references (file A includes file B
      and B includes A).</para>
            <para>As XIncludes are very common nowadays, resolving
        <tag>xi:include</tag> and transforming into the output format
      can be done in one step. This is the case for
        <command>xsltproc</command> from the libxslt library. Use the
        <option>--xinclude</option> option as shown:</para>
            <screen>
               <command>xsltproc</command> --xinclude<!--
    --> <replaceable>STYLESHEET</replaceable>
               <!--
    --> <replaceable>XMLFILE</replaceable>
            </screen>
            <para>If you prefer Saxon, version 9 contains the
      <option>-xi</option> option to resolve XIncludes:</para>
            <screen>
               <command>saxon9</command> -xi<!-- 
    --> -xsl:<replaceable>STYLESHEET</replaceable>
               <!-- 
    --> -s:<replaceable>XMLFILE</replaceable>
            </screen>
            <para>The last section showed a general method to work with
      XIncludes. In most cases this is enough. However, XIncludes offers
      more benefits which are discovered in the following
      subsections.</para>
    
            <section xml:id="sec.db.modularize.xifallback">
               <title>Fallbacks</title>
               <para>If the referenced file in the <tag>xi:include</tag> element
        is not available, the XInclude step will fail. How can you avoid
        that? The XInclude specification defines also the
          <tag>xi:fallback</tag> element. This element can be used to
        add code when a referenced resource could not be retrieved:</para>
               <example xml:id="ex.db.modularize.xifallback">
                  <title>Fallback Possibility with <tag>xi:fallback</tag>
                  </title>        
                  <programlisting language="xml">&lt;xi:include href="revhistory.xml"&gt;
  &lt;xi:fallback&gt;
    &lt;para&gt;The revision history could not be retrieved.&lt;/para&gt;
  &lt;/xi:fallback&gt;
&lt;/xi:include&gt;</programlisting>
               </example>
               <para>The previous code does the following: When the
          <tag>xi:include</tag> element is being processed, the XML
        parser tries to include the file
          <filename>revhistory.xml</filename>. If the file can not be
        retrieved, the XML parser will consider the <tag>xi:fallback</tag> element
        and include the contents. In the above case it includes a
        <tag>para</tag> element showing the failed attempt.</para>
               <para>This method is useful when you want to process files which
        cannot be expected to always be there. For example, the previous
        revision history needs to be generated first. However, it is not
        always sure that the revision history can be generated from an
        possible offline version control system.</para>
            </section>
    
            <section xml:id="sec.db.modularize.include-text">
               <title>Including Text</title>
               <para>The previous examples dealt with included resources which
        are XML only. If you need to include text, this can also be done
        with XInclude.</para>
               <para>Most common usecase is including source code which is
      maintained separately. The following example points to a C source
      code which needs to be included as text:</para>
               <example xml:id="ex.db.modularize.include-text">
                  <title>Included Text in a Programlisting</title>
                  <programlisting language="xml">&lt;programlisting language="c"&gt;&lt;xi:include
   <emphasis role="bold">parse="text"</emphasis>
   href="parser.c"/&gt;&lt;/programlisting&gt;</programlisting>
               </example>
               <para>The important line is <code>parse="text"</code>. This
        advises the XInclude processor to handle the referenced file
        just as text and not as XML. The default value for <tag class="attribute">parse</tag> is <tag class="attvalue">xml</tag>.</para>
               <para>It is recommended to remove any whitespaces inside
          <tag>programlisting</tag> as shown above to avoid spurious
        indendation or linebreaks.</para>
            </section>
    
            <!-- TODO: Move it to another topic? -->
    <!--
    <section xml:id="sec.db.modularize.xpointer">
      <title>Partial Inclusion with XPointer</title>
      <para>Previous examples showed how to include a file with an XML
        structure. The inclusion pulled always the
          <emphasis>complete</emphasis> file. If you need only a
        fragment of this file (for example, a note) use
          <emphasis>XPointers</emphasis>. </para>
      <para>However, XPointers are only partially implemented and some
        parts of the specification are not released as a W3C
        recommendation. Nevertheless they are sometimes helpful if
        used carefully.
      </para>
    </section>
    -->
  </section>
         <section role="seealso">
            <title>See Also</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <link xlink:href="http://www.w3.org/TR/xinclude/">XML Inclusions (XInclude) Version 1.0</link>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.sagehill.net/docbookxsl/ModularDoc.html#UsingXinclude">Using XInclude</link>
                  </para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.section.vs.sectx" remap="topic" userlevel="easy">
         <title>Distinguish Between Section and SectX Elements</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You need to know what the differences and advantages are of
      using a <tag>section</tag> over a <tag>sectX</tag> element.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>The differences between <tag>section</tag> against
      <tag>sectX</tag> are depicted in <xref linkend="tab.section.vs.sectx.comparison"/>: </para>
    
            <table xml:id="tab.section.vs.sectx.comparison">
               <title>Comparison Between <tag>section</tag> and <tag>sectX</tag> Elements</title>
               <tgroup cols="3">
                  <thead>
                     <row>
                        <entry>Issue</entry>
                        <entry>
                           <tag>section</tag>
                        </entry>
                        <entry>
                           <tag>sectX</tag>
                        </entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>Nesting Level?</entry>
                        <entry>Undefinied<footnote>
                              <para>See discussion.</para>
                           </footnote>
                        </entry>
                        <entry>Up to five levels (<tag>sect5</tag>)</entry>
                     </row>
                     <row>
                        <entry>Readability?</entry>
                        <entry>Worse</entry>
                        <entry>Better</entry>
                     </row>
                     <row>
                        <entry>Easy Relocation?</entry>
                        <entry>Yes</entry>
                        <entry>No, needs to be renamed</entry>
                     </row>
                     <row>
                        <entry>Renaming after relocation?</entry>
                        <entry>No</entry>
                        <entry>Yes</entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>Apart from technical issues, using <tag>section</tag> or
        <tag>sect1</tag> is in most cases a matter of taste. However,
      knowing some of the differences in <xref linkend="tab.section.vs.sectx.comparison" xrefstyle="select:label"/> can be helpful to decide which is for
      your document the better element.
    </para>
            <formalpara>
               <title>Nesting Level</title>
               <para>If you have documents which goes further than level five,
        use the <tag>section</tag> element. This can be indefinitely
        nested. On the other side, if you want to restrict the level up to
        five, better use the <tag>sectX</tag> elements. You can, however,
        use DocBook's RELAX NG schema to customize it further (see next
        section).</para>
            </formalpara>
            <formalpara>
               <title>Readability</title>
               <para>This issue depends on how you edit your DocBook source code.
        If you edit it manually in your editor (in other words: without
        the aid of some kind of <quote>WYSYWYG</quote>), you can see and
        understand the level straight from the tag name when using
          <tag>sectX</tag>. Especially if you have lots of nested
        section this makes it a lot easier than <tag>section</tag>.
        However, modern XML editors can show the XPath where
        you are, so it may be negligible.</para>
            </formalpara>
            <formalpara>
               <title>Relocation</title>
               <para>If you have to change the structure a lot, using
        <tag>section</tag> elements make it a lot easier. When you use a
      <tag>sect2</tag> element and this should become a <tag>sect1</tag>
      element you have to rename it. </para>
            </formalpara>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>
               <link xlink:href="http://www.docbook.org/tdg51/en/html/ch05.html#ex.limitsdepth"/>
            </para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.markup.lists" remap="topic" userlevel="easy">
         <title>Using Lists</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to know what list types are available in DocBook.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>DocBook provides three basic lists which are used most often:</para>
    
            <itemizedlist>
               <listitem>
                  <para>
                     <tag>itemizedlist</tag>, for unordered lists (like
          <tag>ul</tag> in HTML)</para>
               </listitem>
               <listitem>
                  <para>
                     <tag>orderedlist</tag> for numbered lists (like
            <tag>ol</tag> in HTML)</para>
               </listitem>
               <listitem>
                  <para>
                     <tag>variablelist</tag>, for lists containing terms and their
          definition (like <tag>dl</tag> in HTML)</para>
               </listitem>
            </itemizedlist>
    
            <para>Additionally, for specific purposes, DocBook provides special
      lists (not explained in this topic):</para>
    
            <itemizedlist>
               <listitem>
                  <para>
                     <tag>bibliolist</tag> is a wrapper for bibliographic
          content. A <tag>bibliolist</tag> is usually inserted in
          section-like elements where a <tag>bibliography</tag> is not
          allowed.</para>
               </listitem>
               <listitem>
                  <para>
                     <tag>calloutlist</tag>, a usually numbered list which
          points to a line in a listing</para>
               </listitem>
               <listitem>
                  <para>
                     <tag>glosslist</tag> is a wrapper for glossary content.
          A <tag>glosslist</tag> is usually inserted in section-like
          elements where a <tag>glossary</tag> is not allowed.</para>
               </listitem>
               <listitem>
                  <para>
                     <tag>segmentedlist</tag> is a list which can be used which
          have a one-to-one dependence with its title. A
          <tag>segmentedlist</tag> can be formatted in a number of ways
          (tabular or as a list block).
        </para>
               </listitem>
               <listitem>
                  <para>
                     <tag>simplelist</tag> is an unordered list for single
          words or small phrases.</para>
               </listitem>
            </itemizedlist>
    
            <para>The previous lists are used to maintain semantic
      distinction.</para>
    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The list types <tag>orderedlist</tag> and <tag>itemizedlist</tag>
    are structural identical (except for its initial element) as you will
    see in the following subsections.</para>    
            <para>The <tag>variablelist</tag> is slightly different and contains
      the <tag>term</tag> element for its term.</para>
   
            <section>
               <title>Features of <tag>itemizedlist</tag>
               </title>
               <para>An <tag>itemizedlist</tag> is a unordered list and can be
        written as shown in the following example:</para>
               <example>
                  <title>Unordered List with Three Entries</title>
                  <programlisting language="xml">&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;The first entry&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;The second entry&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;The third entry&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;</programlisting>
               </example>
               <para>The <tag>itemizedlist</tag> list in DocBook uses by default
        a disc symbol (• solid circle). If you nest an
        <tag>itemizedlist</tag>, it will first start the disc (• solid
        circle) and uses a circle (○ open circle) and finally a square
        (■ solid square). If you nest your list deeper, the sequence is
        repeated. The hierarchy looks like this:</para>
               <informaltable>
                  <tgroup cols="2">
                     <colspec colnum="1" align="right"/>
                     <thead>
                        <row>
                           <entry>Level</entry>
                           <entry>Shows as</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry>1.</entry>
                           <entry>• • •</entry>
                        </row>
                        <row>
                           <entry>2.</entry>
                           <entry>○ ○ ○</entry>
                        </row>
                        <row>
                           <entry>3.</entry>
                           <entry>■ ■ ■</entry>
                        </row>
                     </tbody>
                  </tgroup>
               </informaltable>
               <!--<screen>• • •         1. level
  ○ ○ ○       2. level
    ■ ■ ■     3. level</screen>-->
      <para>The default bullet symbol can be overwritten with the <tag class="attribute">mark</tag> attribute:</para>
               <programlisting language="xml">&lt;itemizedlist mark="circle"&gt;</programlisting>
               <para>It is even possible to deviate from its default symbol in a
        <tag>listitem</tag> by using the <tag>overwrite</tag> attribute:</para>
               <programlisting language="xml">&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;The first entry&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem overwrite="square"&gt;
    &lt;para&gt;The second entry&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;The third entry&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;</programlisting>
            </section>
            <section>
               <title>Features of <tag>orderedlist</tag>
               </title>
               <para>An <tag>orderedlist</tag> can be written as shown in the
      following example:</para>
               <example>
                  <title>Numbered List with Three Entries</title>
                  <programlisting language="xml">&lt;orderedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;The first entry&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;The second entry&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;The third entry&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/orderedlist&gt;</programlisting>
               </example>
               <para>The <tag>orderedlist</tag> in DocBook numbers as arabic
        numbers by default. If you nest an <tag>orderedlist</tag>, it
        will be automatically numbered as shown in the following
        sequence:</para>
               <informaltable>
                  <tgroup cols="2">
                     <colspec colnum="1" align="right"/>
                     <thead>
                        <row>
                           <entry>Level</entry>
                           <entry>Shows as</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry>1.</entry>
                           <entry>1, 2, 3</entry>
                        </row>
                        <row>
                           <entry>2.</entry>
                           <entry>a, b, c</entry>
                        </row>
                        <row>
                           <entry>3.</entry>
                           <entry>i, ii, iii</entry>
                        </row>
                        <row>
                           <entry>4.</entry>
                           <entry>A, B, C</entry>
                        </row>
                        <row>
                           <entry>5.</entry>
                           <entry>I, II, III</entry>
                        </row>
                     </tbody>
                  </tgroup>
               </informaltable>
               <!--<screen>1, 2, 3              1. level
  a, b, c            2. level
    i, ii, iii       3. level
      A, B, C        4. level
        I, II, III   5. level</screen>-->
      <para>The numbering style in an <tag>orderedlist</tag> can be
        changed with the <tag class="attribute">numberation</tag>
        attribute. Allowed values are <simplelist type="inline">
          <?dbchoice choice="or"?>
          <member>arabic</member>
                     <member>loweralpha</member>
                     <member>lowerroman</member>
                     <member>upperalpha</member>
                     <member>upperroman</member>
                     <member>arabicindic</member>
                  </simplelist>.</para>
            </section>
            <section>
               <title>Features of <tag>variablelist</tag>
               </title>
               <para>An <tag>variablelist</tag>, despite its confusing name,
        holds all sort of terms and their definition. It is not limited
        to variables only. The following example shows how to mark a
        <tag>variablelist</tag>.</para>
               <example>
                  <title>Definition List with Two Entries</title>
                  <programlisting language="xml">&lt;variablelist&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;Hamburg&lt;/term&gt;
    &lt;listitem&gt;
       &lt;para&gt;Town in the northern part of Germany&lt;/para&gt;
    &lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;Nueremberg&lt;/term&gt;
    &lt;listitem&gt;
       &lt;para&gt;Town in the south-eastern part of Germany&lt;/para&gt;
    &lt;/listitem&gt;
  &lt;/varlistentry&gt;
&lt;/variablelist&gt;</programlisting>
               </example>
               <para>A <tag>varlistentry</tag> can contain more than one term.
        How the terms are displayed depends usually on the output
        formats. By default, each <tag>term</tag> is printed on a
        separate line.</para>
            </section>
         </section>
         <section role="seealso">
            <title>See Also</title>
    
            <itemizedlist>
               <title>External Links</title>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg5/en/html/bibliolist.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg5/en/html/calloutlist.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg5/en/html/glosslist.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg5/en/html/itemizedlist.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg5/en/html/orderedlist.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg5/en/html/segmentedlist.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg5/en/html/simplelist.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.sagehill.net/docbookxsl/Lists.html"/>
                  </para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.db.remarks" remap="topic" userlevel="easy">
         <title>Inserting Remarks</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to insert comments or remarks in your document to
      enable or disable them in the output format.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>For this purpose, DocBook provides a <tag xlink:href="http://www.docbook.org/tdg51/en/html/tag.html">remark</tag> element. The following example shows
        how to use it:</para>
            <example xml:id="ex.db.inlineremark">
               <title>A Remark Inside a Paragraph</title>
               <screen>&lt;para&gt;
This is a small text.&lt;remark&gt;Add more content&lt;/remark&gt;
&lt;/para&gt;</screen>
            </example>    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>To add comments in your document, there are two
      methods:</para>
            <itemizedlist>
               <listitem>
                  <para>Use XML comments</para>
               </listitem>
               <listitem>
                  <para>Use DocBook’s <tag>remark</tag> element</para>
               </listitem>
            </itemizedlist>
            <para>XML comments can be placed almost everywhere in your XML
      document. It is a very common method to give yourself or others
      some hints. This can be done with XML comments 
      like in this example:</para>
            <screen linenumbering="unnumbered">&lt;para&gt;
This is a text &lt;!-- Ohh, we should add more --&gt;
&lt;/para&gt;</screen>
            <para>However, XML comments has one drawback: They are suppressed
      during transformation. As such, they are unavailable in your
      output format and can not be displayed anymore. Usually, you <emphasis>do
      not</emphasis> want them to appear in your output. </para>
            <para>On the contrary, by using the <tag>remark</tag> element,
      comments can be shown or suppressed whenever you want them. For
      example, if you write your document and put some remarks, you can
      show them to your contributors for review. After the document is
      ready to be published, leave the remark as they are but suppress
      the remark transformation.
    </para>
            <para>To display or suppress your remarks, use the parameter
        <parameter>show.comments</parameter>. This parameter can appear
      either on the command line of your XSLT processor or in a
      customization layer. Any non-zero value shows your remarks whereas
      a value of zero suppress them.</para>
            <para>When should you use XML comments and when remarks? The
      following table gives you a quick overview.</para>
    
            <table xml:id="tab.db.xmlcomments-vs-remarks">
               <title>Comparison XML Comments versus Remarks</title>
               <tgroup cols="3">
                  <thead>
                     <row>
                        <entry>Topic</entry>
                        <entry>XML Comments</entry>
                        <entry>Remarks</entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>When to use it?</entry>
                        <entry>
                           <para>Comments which are only read by you</para>
                        </entry>
                        <entry>
                           <para>Comments which can and should be read by others</para>
                        </entry>
                     </row>
                     <row>
                        <entry>Where to place it?</entry>
                        <entry>
                           <para>Almost everywhere<footnote>
                                 <para>An example where you <emphasis>cannot</emphasis>
                  insert your XML comment is inside an attribute.</para>
                              </footnote>
                           </para>
                        </entry>
                        <entry>
                           <para>Restricted by the DocBook schema<footnote>
                                 <para>See <link xlink:href="http://www.docbook.org/tdg51/en/html/tag.html"/> 
                  for more details.</para>
                              </footnote>
                           </para>
                        </entry>
                     </row>
                     <row>
                        <entry>Can be displayed and suppressed?</entry>
                        <entry>No, always suppressed</entry>
                        <entry>Yes, by using the parameter <parameter>show.comments</parameter>
                        </entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.xref-vs-link" remap="topic" userlevel="easy">
         <title>Knowing the Difference of Crossreferences and Links</title>
         <info>
    
            <keywordset>
               <keyword>crossreference</keyword>
               <keyword>xref</keyword>
               <keyword>links</keyword>
               <keyword>localization</keyword>
            </keywordset>
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to set a <quote>link</quote> but you do not know
      which DocBook element to use.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>DocBook distinguishes between two link types:</para>
            <itemizedlist>
               <listitem>
                  <formalpara>
                     <title>Internal Links or Cross References</title>
                     <para>use primarily <tag>xref</tag>
                     </para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>External Links</title>
                     <para>use primarily <tag>link</tag>
                     </para>
                  </formalpara>
               </listitem>
            </itemizedlist>    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>There are several difference between <tag>xref</tag> and
        <tag>link</tag>. An <tag>xref</tag> is used for cross
      referencing another part of the document. In its simplest form,
      you need only an ID value of the object where you want to link
      to:</para>
            <example xml:id="ex.xref-vs-link.xref">
               <title>A Cross Reference</title>
               <programlisting language="xml">&lt;chapter xml:id="tea"&gt;
  &lt;title&gt;Tea&lt;/title&gt;
  &lt;section xml:id="about-tea"&gt;
    &lt;title&gt;About Tea&lt;/title&gt;
    &lt;para&gt;This section gives you an introduction about tea.&lt;/para&gt;
  &lt;/section&gt;
  &lt;section xml:id="prepar"&gt;
    &lt;title&gt;Preparing Tea&lt;/title&gt;
    &lt;para&gt;Read an introduction in &lt;xref linkend="about-tea"/&gt;.&lt;/para&gt;
  &lt;/section&gt;      
&lt;/chapter&gt;</programlisting>
            </example>
            <para>The DocBook XSL stylesheets take care of resolving the
      <tag>xref</tag>. By default, it replaces the <tag>xref</tag>
      element with a number and the title of the reference. It could
      look like this:</para>
            <screen>Read an introduction in Section 1.1, “About Tea”.</screen>
            <para>The text <code>Section 1.1, “About Tea”</code> is a <quote>hot
    link</quote> and points to the respective section. Using
      <tag>xref</tag> for cross references has several advantages:</para>
            <itemizedlist>
               <title>Advantages of Cross References Using <tag>xref</tag>
               </title>
               <listitem>
                  <para>Whenever a text of a title changes, all <tag>xref</tag>s
          pointing to it will automatically change too.</para>
               </listitem>
               <listitem>
                  <para>During validation, the <tag class="attribute">linkend</tag> attribute is checked, if this ID
          exists.</para>
               </listitem>
               <listitem>
                  <para>During resolution, additonal words like
          <quote>Section</quote>, <quote>Chapter</quote>, or
          <quote>Figure</quote> are automatically inserted according to
          the used document language.</para>
               </listitem>
               <listitem>
                  <para>You do not have to care about numbering.</para>
               </listitem>
               <listitem>
                  <para>For further customization use the <tag class="attribute">xrefstyle</tag> attribute.</para>
               </listitem>
            </itemizedlist>
    
            <para>In contrast, an <tag>link</tag> is used in most cases for
      <emphasis>external</emphasis> links.</para>
            <example xml:id="ex.xref-vs-link.link">
               <title>A Hyperlink</title>
               <programlisting language="xml">&lt;section xml:id="about-tea"&gt;
  &lt;title&gt;About Tea&lt;/title&gt;
  &lt;para&gt;See &lt;link xlink:href="http://www.example.org/tea"/&gt; for further information.&lt;/para&gt;
&lt;/section&gt;</programlisting>
            </example>
            <para>Using an <tag>link</tag> has the following advantages:</para>
            <itemizedlist>
               <title>Advantages of External Links Using <tag>link</tag>
               </title>
               <listitem>
                  <para>Usually no automatic resolution performed (only if you use
          <tag class="attribute">xlink:href</tag>).</para>
               </listitem>
               <listitem>
                  <para>No validation necessary.</para>
               </listitem>
               <listitem>
                  <para>Additional inline elements allowed.</para>
               </listitem>
            </itemizedlist>
    
            <para>The differences between <tag>xref</tag> and <tag>link</tag>
      are collected in <xref linkend="tab.xref-vs-link"/>.      
    </para>
    
            <table xml:id="tab.xref-vs-link">
               <title>Differences Between <tag>xref</tag> and <tag>link</tag>
               </title>
               <tgroup cols="3">
                  <thead>
                     <row>
                        <entry>Topic</entry>
                        <entry>
                           <tag xlink:href="http://www.docbook.org/tdg51/en/html/xref.html">xref</tag>
                        </entry>
                        <entry>
                           <tag xlink:href="http://www.docbook.org/tdg51/en/html/link.html">link</tag>
                        </entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>TDG Definition</entry>
                        <entry>A cross reference to another part of the document</entry>
                        <entry>A hypertext link</entry>
                     </row>
                     <row>
                        <entry>Content Model</entry>
                        <entry>empty</entry>
                        <entry>text and inline elements</entry>
                     </row>
                     <row>
                        <entry>Automatic text</entry>
                        <entry>Yes</entry>
                        <entry>No</entry>
                     </row>
                     <row>
                        <entry>ID/IDREF Checking</entry>
                        <entry>Yes</entry>
                        <entry>Only when used with <tag class="attribute">linkend</tag>
                        </entry>
                     </row>
                     <row>
                        <entry>Restrictions</entry>
                        <entry>Only cross referencing to elements which contains a <tag>title</tag>
                        </entry>
                        <entry>No restrictions</entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <xref linkend="dbc.db.xref"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <xref linkend="dbc.db.link"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg51/en/html/link.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.docbook.org/tdg51/en/html/xref.html"/>
                  </para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.db.xref" remap="topic" userlevel="easy">
         <title>Inserting Cross References</title>
         <info>
    
            <keywordset>
               <keyword>cross references</keyword>
               <keyword>internal link</keyword>
               <keyword>xref</keyword>
            </keywordset>
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>The problem explained.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>The solution explained.</para>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>Some discussion about the problem and solution.</para>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>Include URL or bibliographic references.</para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?><section xml:id="dbc.db.link" remap="topic" userlevel="easy" version="5.1">
         <title>Choosing Between Link Methods</title>
         <info>
    
            <keywordset>
               <keyword>external links</keyword>
               <keyword>xlink:href</keyword>
               <keyword>ulink</keyword>
            </keywordset>
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You need some ideas how to markup links.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Use the <tag>link</tag>
               <footnote>
                  <para>In DocBook 4 use the <tag>ulink</tag> element</para>
               </footnote> element. Usually, external links are used in two ways:</para>
            <itemizedlist>
               <listitem>
                  <formalpara>
                     <title>Without Text</title>
                     <para>The link element is completely empty:</para>
                  </formalpara>
                  <programlisting language="xml">&lt;link xlink:href="https://doccookbook.sf.net"/&gt;</programlisting>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>With Text</title>
                     <para>The link element contains some text or even other
          elements:</para>
                  </formalpara>
                  <programlisting language="xml">&lt;link xlink:href="https://doccookbook.sf.net"&gt;The DoCookBook&lt;/link&gt;</programlisting>
               </listitem>
            </itemizedlist>
    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The <tag>link</tag> element has several features for creating
      internal or external links. It is allowed to use text content or
      leave a <tag>link</tag> completely empty. Regardless of the text
      content, you have to choose between the attributes <tag class="attribute">xlink:href</tag> or <tag class="attribute">linkend</tag>. </para>
    
            <section xml:id="sec.db.link.attributes">
               <title>Knowing the Properties of the <tag class="attribute">xlink:href</tag> and
          <tag class="attribute">linkend</tag> Attributes</title>
               <para>Using <tag class="attribute">linkend</tag> leads always to
        an internal link and is semantically equivalent to
          <tag>xref</tag>. You cannot create external links with the
          <tag class="attribute">linkend</tag> attribute. </para>
               <para>On the other hand, the XLink attribute <tag class="attribute">xlink:href</tag> can be used for both types:
        internal or external links. An example is shown in <xref linkend="tab.db.link.internal-vs.external"/>.</para>

               <table xml:id="tab.db.link.internal-vs.external">
                  <title>Internal and External Links Examples With <tag class="attribute">linkend</tag> vs. <tag class="attribute">xlink:href</tag>
                  </title>
                  <titleabbrev>Internal and External Links Examples</titleabbrev>
                  <tgroup cols="3">
                     <thead>
                        <row>
                           <entry/>
                           <entry>
                              <tag class="attribute">xlink:href</tag>
                           </entry>
                           <entry>
                              <tag class="attribute">linkend</tag>
                           </entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry>Datatype</entry>
                           <entry>xsd:anyURI</entry>
                           <entry>xsd:IDREF</entry>
                        </row>
                        <row>
                           <entry>Internal</entry>
                           <entry>
                              <tag class="attvalue">#cha.intro</tag>
                           </entry>
                           <entry>
                              <tag class="attvalue">cha.intro</tag>
                           </entry>
                        </row>
                        <row>
                           <entry>External</entry>
                           <entry>
                              <tag class="attvalue">http://www.docbook.org</tag>
                           </entry>
                           <entry align="center">―</entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table>
    
               <para>Note, validation is only performed when using <tag class="attribute">linkend</tag>, not with <tag class="attribute">xlink:href</tag>. The reason for this is the
        different datatypes. The XML parser can only validate a
          <property>xsd:ID</property> and <property>xsd:IDREF</property>
        connection.</para>
            </section>
    
            <section xml:id="sec.db.link.matrix">
               <title>Choosing the Needed Combination</title>
               <para>With text content, you have several combinations which is
        shown in <xref linkend="tab.db.link"/>:</para>
               <table xml:id="tab.db.link">
                  <title>Different Possibilities for Links</title>
                  <tgroup cols="4">
                     <colspec colname="c0" colwidth="1*"/>
                     <colspec colname="c1" colwidth="1*"/>
                     <colspec colname="c2" colwidth="4*"/>
                     <colspec colname="c3" colwidth="4*"/>
                     <thead>
                        <row>
                           <entry morerows="1" namest="c0" nameend="c1"/>
                           <entry namest="c2" nameend="c3" align="center">Content</entry>
                        </row>
                        <row>
              <!--<entry/>-->
              <entry>With Content</entry>
                           <entry>Empty</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
                           <entry morerows="1" valign="middle">
                              <emphasis role="strong">Linking Attributes</emphasis>
                           </entry>
                           <entry>
                              <tag>xlink:href</tag>
                           </entry>
                           <entry>Content is a link to the specified URI</entry>
                           <entry>The specified URI is used as the content</entry>
                        </row>
                        <row>
              <!-- <entry/> -->
              <entry>
                              <tag>linkend</tag>
                           </entry>
                           <entry>Content is an internal link to the element identified</entry>
                           <entry>Semantically equivalent to an <tag>xref</tag>
                (internal link)</entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table>
      
               <para>The following list shows some examples:</para>
      
               <variablelist>
                  <varlistentry xml:id="vl.db.link.content-xlinkhref">
                     <term>Links With Content Using <tag class="attribute">xlink:href</tag>
                     </term>
                     <listitem>
                        <para>Use this code to create an external link with a text
              different than the URL:</para>
                        <programlisting language="xml">&lt;link xlink:href="https://doccookbook.sf.net"&gt;My Project&lt;/link&gt;</programlisting>     
                     </listitem>
                  </varlistentry>
                  <varlistentry xml:id="vl.db.link.content-linkend">
                     <term>Links With Content Using <tag class="attribute">linkend</tag>
                     </term>
                     <listitem>
                        <para>Use this code to create an internal link (cross
              reference). The <quote>hot text</quote>
              is created from the content of <tag>link</tag>:</para>
                        <programlisting language="xml">&lt;link linkend="cha.intro"&gt;Introduction&lt;/link&gt;</programlisting>
                     </listitem>
                  </varlistentry>
                  <varlistentry xml:id="vl.db.link.empty-xlinkhref">
                     <term>Empty Links Using <tag class="attribute">xlink:href</tag>
                     </term>
                     <listitem>
                        <para>Use this code to create an external link where the <quote>hot text</quote>
              is taken from the URL:</para>
                        <programlisting language="xml">&lt;link xlink:href="http://www.example.org/Intro"/&gt;</programlisting>
                        <para>If you want to create an internal link without ID
              validation check, use this code:</para>
                        <programlisting language="xml">&lt;link xlink:href="#cha.intro"/&gt;</programlisting>
                        <para>Be aware, if the ID does not exist in your document,
              the link will be broken.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>Empty Links Using <tag class="attribute">linkend</tag>
                     </term>
                     <listitem>
                        <para>This notation is semantically equivalent to an
              <tag>xref</tag>. See also <xref linkend="dbc.db.xref"/>:</para>
                        <programlisting language="xml">&lt;link linkend="cha.intro"/&gt;</programlisting>
                        <para>The only difference of the previous example is the ID
              <tag class="attvalue">cha.intro</tag> must be unique and
              is checked if it is available in your document. If not, it
            is an validation error.</para>
                     </listitem>
                  </varlistentry>
               </variablelist>
      
               <para>In most cases, it is enough to just use an empty link element.
        As such, you should avoid this notation:</para>
               <programlisting language="xml">&lt;link xlink:href="https://doccookbook.sf.net"&gt;https://doccookbook.sf.net&lt;/link&gt;</programlisting>
               <para>This is mostly unnecessary as it is overly verbose, difficult
        to read, and does not add any value. Correct such links to this
        notations: </para>
               <programlisting language="xml">&lt;link xlink:href="https://doccookbook.sf.net"/&gt;</programlisting>     
            </section>
    
            <section xml:id="sec.db.link.xlinks">
               <title>Further Notes on Links</title>
               <para>DocBook 5 also adds new concepts. One of this new concept is that
        <emphasis>every</emphasis> element can become a link. In other
        words, you do <emphasis role="italic">not</emphasis> have to use a
        <tag>link</tag> element anymore. For example, if you want to
        insert a book title with an additional link, it could be   
        marked up like this:</para>
               <programlisting>&lt;citetitle&gt;&lt;ulink url="https://doccookbook.sf.net"&gt;The DoCookBook&lt;/ulink&gt;&lt;/citetitle&gt;</programlisting>
               <para>or this, depending on what you prefer:</para>
               <programlisting>&lt;ulink url="https://doccookbook.sf.net"&gt;&lt;citetitle&gt;The DoCookBook&lt;/citetitle&gt;&lt;/ulink&gt;</programlisting>
               <para>With DocBook 5 this can be shortend:</para>
               <programlisting>&lt;citetitle xlink:href="https://doccookbook.sf.net"&gt;The DoCookBook&lt;/citetitle&gt;</programlisting>
               <para>Apart from the previous described link concept,
        DocBook 5 allows to control the link behavior. For example,
        to open a new window when clicking a link, use the <tag class="attribute">xlink:show</tag> attribute: </para>
               <programlisting language="xml">&lt;link xlink:show="new" xlink:href="https://doccookbook.sf.net"/&gt;</programlisting>
               <para>The attribute value <tag class="attvalue">show</tag> opens a
        <quote>new window, frame, pane, or other relevant presentation
          context</quote> (see <link xlink:href="http://www.docbook.org/tdg51/en/html/ref-elements.html#common.linking.attributes">Common Linking Attributes</link>).
        Of course, this is only useful for online formats. </para>
      
            </section>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>
               <link xlink:href="http://www.docbook.org/tdg5/en/html/link.html"/>
            </para>
         </section>
      </section>
      <!-- TODO: Needs to investigate alt in acronym more: -->
  <!--<xi:include href="db/topic.acronym.xml"/>-->
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.db.quotes" remap="topic" userlevel="easy">
         <title>Inserting Inline Quotes</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to use inline quotes in a consistent and language
      independant way.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Use the <tag>quote</tag> tag:</para>
            <programlisting language="xml">&lt;para&gt;This is an &lt;quote&gt;English quote&lt;/quote&gt;.&lt;/para&gt;</programlisting>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>When people need quotes, they usually write
      <phrase>"this"</phrase>. However, from a typographical point of
      view, this is wrong. There are special start and end quotation
      characters. The more elegant way is to use <quote>this</quote>.
    </para>
            <para>However, the open and close characters are language dependent.
      Each language has different quotation rules. German readers
      prefer <quote xml:lang="de">this</quote>, French <quote xml:lang="fr">this</quote>, and the Italians use <quote xml:lang="it">this</quote>. </para>
            <para>Using quote markers directly has one disadvantages: if your
      text contains different languages you need to know how quotes are
      displayed in the respective language. Also it is easier and more
      consistent to leave this typographic detail to the DocBook
      stylesheets.</para>
            <para>One nice thing with inserting <tag>quote</tag> is it can be
      adapted to a different language by using the <tag class="attribute">xml:lang</tag> attribute:</para>
            <programlisting language="xml">&lt;para&gt;This is a &lt;quote xml:lang="de"&gt;German quote&lt;/quote&gt;.&lt;/para&gt;</programlisting>
         </section>
      </section>
   </chapter>
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><chapter xml:id="dbc.common" version="5.1">
      <title>Common Customizations</title>
      <info>
    
         <biblioid class="other" otherclass="ticket">20</biblioid>
         <abstract>
            <para>Some typical problems are independant from their target
        formats. This chapter gives you some information what falls into
        this category.</para>
         </abstract>
      </info>
  
      <section xml:id="dbc.common.intro">
         <title>Introduction</title>
         <para>A lot of customizations can be shared between different output
      formats. As such, it is probably a good idea to think about how to
      structure and store your customizations before starting. The
      following directories are a good start, especially if you want to
      support different output formats:</para>
         <screen>mycustomizations/
  +-- common/
  +-- fo/
  +-- html/
  +-- futher formats...</screen>
         <para>The <filename class="directory">common</filename> directory
      contains all the stylesheets which are not specific to any
      formats. On the contrary, <filename class="directory">fo</filename>, <filename class="directory">html</filename>,
      etc. contains the respective customizations for their target
      formats. </para>
         <para>Furthermore, it is recommended to use the same file name than
      the original from the DocBook XSL stylesheets. This makes it
      easier to see, what changes can be expected within your files.</para>
      </section>
  
      <!-- 
   * Finding Professional Fonts
   * Getting to Know Available DocBook XSL Stylesheets 
   * Generating localized text (e.g. gentext.nav.next, gentext.nav.prev,)
   * Extending Language Files with your Own Text
   * Getting an Overview -> maybe _before_ any of the topics?
   * DocBook customization (through parameters or customization layers)
   * Changing and Extending Language Entries
   * Outputing Time and Dates
   * Taking Advantage of Common Bibliography
   * Taking Advantage of Common Glossary
   * Colorising Profiled Text
     http://lists.oasis-open.org/archives/docbook-apps/201108/msg00100.html
   * Printing XPath from Stylesheet
   * Creating Unit Test with XSpec
  -->
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.common.fonts" remap="topic" userlevel="easy">
         <title>Finding Professional Fonts</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You need to find professional fonts, preferebly released under
      an open source license which can be used for print or Web formats.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>There are some very good fonts which can be used freely. Most
      fonts are even released under the <link xlink:href="http://scripts.sil.org/OFL">Open Font License</link>
      or other free or open licenses. The following list is a small
      overview which is by no means complete (use also your favorite
      search enginge):</para>
            <variablelist>
               <varlistentry>
                  <term>
                     <link xlink:href="http://scripts.sil.org"/>
                  </term>
                  <listitem>
                     <para>
                        <acronym>SIL<alt>Summer Institute of
            Linguistics</alt>
                        </acronym> is a nonprofit organization for
            sustainable language development. One part is to <quote>support 
            the use of non-Roman and complex scripts in language development.</quote>
                        <acronym>SIL</acronym> creates the Charis SIL, Doulos SIL,
            Gentium, Andika, and other typefaces. All fonts are released
            under the 
            </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <link xlink:href="http://www.google.com/webfonts"/>
                  </term>
                  <listitem>
                     <para>Google Web Fonts is a huge collection of open source
            fonts. They can be freely incorporated into your Web sites
            using CSS or can be downloaded and embedded in PDF.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <link xlink:href="http://www.tug.org/tetex/"/>
                  </term>
                  <listitem>
                     <para>The TeTeX distribution and <acronym>CTAN<alt>Comprehensive 
            TeX Archive Network</alt>
                        </acronym> contains also some high quality
            fonts, however, more aimed at the print business and not for
          the Web.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <link xlink:href="http://www.linuxlibertine.org"/>
                  </term>
                  <listitem>
                     <para>The Linux Libertine fonts are designed to be an
            alternative to the serif Times fonts.  
            The Linux Libertine and the Linux Biolinum fonts are a
            collection of serif and sans serif fonts with the usual
            Latin, Greek, Cyrillic, and Hebrew glyphs. Additionally, the fonts
            contain ligatures, true small caps, old style numbers,
            proportional or monospaced numbers, true superscript and
            subscript, and much more.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <link xlink:href="http://dejavu-fonts.org"/>
                  </term>
                  <listitem>
                     <para>
                        <remark>TBD</remark>
                     </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <link xlink:href="http://www.stixfonts.org"/>
                  </term>
                  <listitem>
                     <para>
                        <remark>TBD</remark>
                     </para>
                  </listitem>
               </varlistentry>
            </variablelist>
    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>Before you use a font, check the following list:</para>
            <itemizedlist>
               <listitem>
                  <formalpara>
                     <title>Amount of Glyphs</title>
                     <para>Does your font support your language? Although modern
            fonts use Unicode thesedays, nevertheless your language
            might be not supported. Especially if you need
              <quote>uncommon</quote> languages or rarely used glyphs.
          </para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Missing Styles</title>
                     <para>Some fonts are published in only one style, usually
            <emphasis>regular</emphasis>. Such fonts makes it more difficult
            to universally adopt them in different scenarios where more
            styles (bold, italic, or a combination) are needed.
          </para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Font Formats</title>
                     <para>Modern fonts are usually Unicode fonts in <acronym>OTF<alt>OpenType Font</alt>
                        </acronym> or TrueType format. Older fonts are
            mostly PostScript Type 1 fonts which have a limited amount
            of glphys (theoretically 256). PostScript fonts cannot be used on the
            Web.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Font Combinations</title>
                     <para>For a non-designer, it is generally easier to use a
            complete font family conisting of sans serif, serif and
            monospaced typefaces. The reason for this is these typefaces
            are made to fit together. It is much more difficult to
            select fonts which work aesthetically as it needs
            experiences.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Quality</title>
                     <para>This is a broad topic and it depends where you want to
            use the font. Is it primarily used for Web content or only
            for print? Or both? Some fonts looks only good in a Web
            page, other work only for a book. Sometimes the
            <emphasis>Hinting</emphasis> (adjustment of a font to a
            certain resolution) may or may not work.
          </para>
                  </formalpara>
               </listitem>
            </itemizedlist>   
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.common.dbcustomize" remap="topic" userlevel="medium">
         <title>Writing Customization Layers</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to write a customization layer for the DocBook XSL
      stylesheets, but you do not know how to do it.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>A DocBook XSL customization layer comprised the following
    components:</para>
    
            <itemizedlist>
               <listitem>
                  <para>A XSLT stylesheet skeletton with the start tag <tag class="starttag">xsl:stylesheet</tag> and the end tag
          <tag class="endtag">xsl:stylesheet</tag>
                  </para>
               </listitem>
               <listitem>
                  <para>At least the namespaces for XSLT, DocBook 5, and your
          output format (for example, FO or XHTML).</para>
               </listitem>
               <listitem>
                  <para>A <tag class="emptytag">xsl:import</tag> element to 
          incoporate the base format.</para>
               </listitem>
               <listitem>
                  <para>Your customizations.</para>
               </listitem>
            </itemizedlist>
            <para>How this can look is shown in the following listing.</para>
            <example xml:id="ex.common.dbcustomize.general-cust-layer">
               <title>General Customization Layer</title>
               <programlisting language="xml">&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:d="http://docbook.org/ns/docbook"&gt;
  
  &lt;xsl:import href="http://docbook.sourceforge.net/release/xsl-ns/current/<replaceable>FORMAT</replaceable>/docbook.xsl"/&gt;
  
  &lt;!-- Your customizations go here --&gt;
  
&lt;/xsl:stylesheet&gt;</programlisting>
            </example>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>
               <remark>TBD</remark>
            </para>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>
               <link xlink:href="http://www.sagehill.net/docbookxsl/CustomMethods.html#CustomizationLayer"/>
            </para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.common.dbtimestamp" remap="topic" userlevel="easy">
         <title>Inserting Date and Time</title>
    
         <section role="problem">
            <title>Problem</title>
            <para>You want to insert the current date, time, or both in your
      output format (for example, to show the date of creation).</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Use the <tag class="xmlpi">dbtimestamp</tag> processing
      instruction (PI). For example, integrate it into the
        <tag>pubdate</tag> to show the current publication date on the
      titlepage: </para>
            <screen language="xml">&lt;info&gt;
  &lt;!-- ... --&gt;
  &lt;pubdate&gt;<emphasis role="strong">&lt;?dbtimestamp?&gt;</emphasis>&lt;/pubdate&gt;
&lt;/info&gt;</screen>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The above PI includes the date in its
        <emphasis>localized</emphasis> form, or in other words: the
      output depends on the current language. If you do not have set any
      language, the default is English (<code>en_US</code>) which is 
      <code>month/day/year</code>. If you want to
      change the default format, use one of the two options: </para>
            <itemizedlist>
               <listitem>
                  <para>Change the default format</para>
               </listitem>
               <listitem>
                  <para>Add pseudo-attributes</para>
               </listitem>
            </itemizedlist>
    
            <section xml:id="dbc.common.dbtimestamp.default-format">
               <title>Changing the Default Format</title>
               <para>Each language contains in its language files<remark>add
          xref</remark> the context <code>datetime</code>. The following
        code shows it for the English language file:</para>
               <screen language="xml">&lt;l:context name="datetime"&gt;
  &lt;l:template name="format" text="m/d/Y"/&gt;
&lt;/l:context&gt;</screen>
               <para>This is only useful, if you want to completely change the appearance of
        a date in your document. </para>
               <!-- Add procedure to explain how to change? -->
    </section>
            <section xml:id="dbc.common.dbtimestamp.pseudo-attrib">
               <title>Adding Pseudo-Attributes</title>
               <para>The simpler method is to change the PI directly. Especially
        if you do not want to customize the date for the complete
        document or you want it change individually. Basically, add a
          <emphasis>pseudo-attribute</emphasis>
                  <footnote>
                     <para>A <emphasis>pseudo-attribute</emphasis> looks like an
            XML attribute due to its similar syntax. However, it is not.
            A processing instruction can only contain text and no
            attributes. For more information about PIs, refer to the XML
            specification at <link xlink:href="http://www.w3.org/TR/REC-xml/#sec-pi"/>.</para>
                  </footnote> into the <tag class="xmlpi">dbtimestamp</tag> PI.
        For example, if you want to insert only the year, add the <tag class="attribute">format</tag> pseudo-attribute: </para>
               <screen language="xml">&lt;?dbtimestamp format="Y"?&gt;</screen>
               <para>More format-letters can be found in the reference page (see
        link at the <citetitle>See Also</citetitle> section).</para>
            </section>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <link xlink:show="new" xlink:href="http://www.sagehill.net/docbookxsl/Datetime.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:show="new"
                           xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/pi/dbtimestamp.html"/>,
        the reference page for the PI</para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.common.l10n" remap="topic" userlevel="easy">
         <title>Extending Language Files with Your Own Text</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You need a general solution to add localized text without
      hard-coding it into your stylesheet. Depending on the language, it
      should display the correct, translated text.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Use <emphasis>language files</emphasis> to add your text.
      Language files are the DocBook way to support several languages,
      all located under the <filename class="directory">common</filename> directory. Each file is in XML format and
      contains all your translated text as a key/value pair. For more
      complex settings and to group things, there are
        <emphasis>contexts</emphasis>. The key is never translated, it
      is used for every language, and is only needed to find and
      retrieve the translated text. </para>
            <para>To use a language file, proceed as follows:</para>
            <procedure>
               <title>Adding Your Own Localized Text</title>
               <step>
                  <para>Create a customization layer as shown in <xref linkend="dbc.common.dbcustomize"/>.</para>
               </step>
               <step>
                  <para>Add the parameter <parameter>local.l10n.xml</parameter> in
          your customization layer and point it to your language
          file:</para>        
                  <screen>&lt;xsl:param name="local.l10n.xml" select="document('myl10n.xml')"/&gt;</screen>
               </step>
               <step>
                  <para>Open the <filename>myl10n.xml</filename> file and insert
        the following XML code as an example:</para>
                  <programlisting language="xml">&lt;l:i18n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0"&gt; 
  &lt;l:l10n language="en"&gt;
    &lt;l:gentext key="Authors" text="Authors"/&gt;
    &lt;l:gentext key="lastbuilt" text="Last built: "/&gt;
  &lt;/l:l10n&gt;
  &lt;l:l10n language="de"&gt;
    &lt;l:gentext key="Authors" text="Authoren"/&gt;
    &lt;l:gentext key="lastbuilt" text="Zuletzt gebaut: "/&gt;
  &lt;/l:l10n&gt;
&lt;/l:i18n&gt;</programlisting>
                  <para>The above code shows two language, English and German.
          Furthermore, it contains text two entries for each language
            (<quote>Authors</quote> and
          <quote>lastbuilt</quote>).</para>    
               </step>
               <step>
                  <para>Call the <function>gentext</function> template to retrieve
        the translated text:</para>
                  <programlisting language="xml">&lt;xsl:call-template name="gentext"&gt;
  &lt;xsl:with-param name="key" select="'Authors'"/&gt;
&lt;/xsl:call-template&gt;</programlisting>
               </step>
            </procedure>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The <quote>gentext</quote> method to insert language specific
      text is quite powerful, but not almighty. It helps you to keep
      translateable text in one place and avoids hard-coded locations in
      your stylesheets. If you need the translated text not for the
      default language (usually marked in the root element), but for a
      different language, use the <tag>xsl:with-param</tag> as
      shown:</para>
            <programlisting language="xml">&lt;xsl:call-template name="gentext"&gt;
  &lt;xsl:with-param name="key" select="'Authors'"/&gt;
  &lt;xsl:with-param name="lang"&gt;de&lt;/xsl:with-param&gt;
&lt;/xsl:call-template&gt;</programlisting>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>
               <link xlink:href="http://www.sagehill.net/docbookxsl/Localizations.html"/>
            </para>
         </section>
      </section>
  
   </chapter>
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><chapter xml:id="dbc.structure" version="5.1">
      <title>Manipulating DocBook Document Structure</title>
  
      <info>
    
         <biblioid class="other" otherclass="ticket">21</biblioid>
         <abstract>
            <para>DocBook files can be created manually or by tools.
        Sometimes tools create a structure which is inconvenient for
        some reasons or you have legacy documents which contain the
          <quote>wrong</quote> structure. This chapter shows how to
        restructure your DocBook document in the way you want.</para>
         </abstract>
      </info>
  
  
      <section xml:id="dbc.structure.intro">
         <title>Introduction</title>
         <para>The methods described in this chapter are mostly XSLT
      solutions where you can find more or less in any XSLT book.
      Actually, some ideas origin from
          <personname>
               <firstname>Sal</firstname>
               <surname>Mangano</surname>
            </personname>´s excellent
        <citetitle>XSLT Cookbook</citetitle>. However, the solutions in
      this chapter are targeted exclusively on DocBook.</para>
         <para>Most of these solutions are based on an <emphasis>identity
    transformation</emphasis> stylesheet which is shown in <xref linkend="ex.copy.xsl"/>.</para>
    
         <example xml:id="ex.copy.xsl">
            <title>
               <filename>copy.xsl</filename>
            </title>
            <programlisting linenumbering="numbered" language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:template match="node() | @*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@* | node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</programlisting>
         </example>
    
         <para>This simple stylesheet copies everything from the input
      document to the output document without any modifications.
      Although it seems quite useless at a first glance, it reveals its
      full power when combining it with customizations. </para>
      </section>
  
      <!-- 
    * Combining two DocBook documents
    * Resolving XInclude Elements
    * Autogenerate indexterm ranges
    * Preserving Entities
    * Renaming Image Filenames
    * Checking Style Guide Issues with XSLT
    * Using the xmllint Shell to test XPath expressions
    * Using Placeholders (Entities, PIs, XIncludes, phrase, ref)
    * Creating a RevHistory from RSS and Atom
  -->
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.struct.pretty-print" remap="topic" userlevel="easy">
         <title>Pretty-Printing DocBook Documents</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>Your file, be it autogenerated or somehow
      <quote>mangled</quote> is poorly indented and you want to 
      get rid of this. </para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>There are different solutions to this problem:</para>
            <itemizedlist>
               <listitem>
                  <para>a <quote>pretty-print</quote> stylesheet</para>
               </listitem>
               <listitem>
                  <para>the XML parser <command>xmllint</command>
                  </para>
               </listitem>
               <listitem>
                  <para>the <command>xmlformat</command> command</para>
               </listitem>
            </itemizedlist>
    
            <section xml:id="sec.struct.pretty-print.xmllint">
               <title>XML Parser <command>xmllint</command>
               </title>
               <para>The XML parser <command>xmllint</command> offers the
      <option>--format</option> option to turn on indentation for each element.</para>
               <screen>
                  <command>xmllint</command> --format <replaceable>XMLFILE</replaceable>
               </screen>
            </section>
            <section xml:id="sec.struct.pretty-print.xslt">
               <title>The Pretty-Print Stylesheet</title>
               <para>The simplest stylesheet for indentation is shown in <xref linkend="ex.pretty.xsl"/>.
      It relies on the <filename>copy.xsl</filename> stylesheet.</para>
               <example xml:id="ex.pretty.xsl">
                  <title>
                     <filename>pretty.xsl</filename>
                  </title>
                  <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns="http://docbook.org/ns/docbook"&gt;
  
  &lt;xsl:import href="copy.xsl"/&gt;
  &lt;xsl:output indent="yes"/&gt;

  &lt;xsl:strip-space elements="*"/&gt;
  &lt;xsl:preserve-space elements="d:screen d:literallayout
    d:programlisting d:address"/&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
               </example>
            </section>
            <section xml:id="sec.struct.pretty-print.xmlformat">
               <title>Command <command>xmlformat</command>
               </title>
               <para>The <command>xmlformat</command> tool is a Perl script which
      is available from the Web site <link xlink:href="http://www.kitebird.com/software/xmlformat/"/>. 
      </para>
               <para>The tool distinguishes between block elements, inline
        elements, and verbatim elements (similar to DocBook).
        The difference between the types is the whitespace
        normalization.</para>
               <para>Block elements typically begin with a new line and
        children are indented. Spacing before and after can be
        controlled too. </para>
               <para>Inline elements occur in block elements. Normalization and 
      line-wrapping occurs in regard to the enclosing block element.</para>
               <para>Verbatim elements are not formatted at all. That means, the
        content of the input element is the same as the content of the
        output element, including whitespaces.
      </para>
            </section>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The <command>xmllint</command> command with its
        <option>--format</option> option is the easiest candidate but lacks
      customization. This is useful if you do not have any other tools
      at hand and you prefer a quick and rough reformatting.</para>
            <para>The <filename>pretty.xsl</filename> stylesheet is a pure XSLT
      solution. As such, it works on every platform which supports an
      XSLT processor. It is adaptable to your needs, but mixed content
      (like in <tag>para</tag>) is problematic.</para>
            <para>The most adaptable method is <command>xmlformat</command>.</para>
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.db4-to-db5" remap="topic" userlevel="medium">
         <title>Converting DocBook from Version 4 to Version 5</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You have a DocBook document in version 4.x, but you need 5.x.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Generally, the difference between version 4 and version 5 is
      minimal. Refer to the <link xlink:href="http://www.docbook.org/tdg51/en/html/ch01.html#d6e550">The
        Definitive Guide</link> for detailed information what has been
      added, removed, or renamed.
    </para>
            <para>One major change is that all DocBook 5.x elements are in the
      namespace <uri>http://docbook.org/ns/docbook</uri>. All these
      changes are taken into account by the
        <filename>db4-upgrade.xsl</filename> stylesheet in the DocBook
      Subversion repository. The URL is <link xlink:href="https://docbook.svn.sourceforge.net/svnroot/docbook/trunk/docbook/relaxng/tools/db4-upgrade.xsl"/>. You just need to apply this stylesheet to your source DocBook
      document, for example:</para>
            <screen>
               <command>xsltproc</command> doc.xml db4-upgrade.xsl</screen>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>One disadvantage is that entities are not preserved. This is
      not a stylesheet issue as the entities are already resolved when
      the XSLT processor gets its hand on the source tree. The
      stylesheet never sees the entities.
    </para>
            <para>The <citetitle xlink:href="http://docbook.org/docs/howto/#entities">DocBook
      Transition Guide</citetitle> recommends the following steps (cited
      from there):</para>
            <procedure xml:id="pr.structure.db4-to-db5.preserving-entities">
               <title>Preserving Entities between DocBook Conversion</title>
               <step>
                  <para>Open your existing document using your favorite editing
          tool. You must use a tool that is <emphasis>not</emphasis>
          XML-aware, or one that allows you to edit markup <quote>in
            the raw</quote>.</para>
               </step>
               <step>
                  <para>Replace all occurrences of the entity references that you
          want to preserve with some unique string. For example, if you
          want to preserve <tag class="genentity">Product</tag>
          references, you could replace them all with
            <literal>[[[Product]]]</literal> (assuming that the string
            <literal>[[[Product]]]</literal> doesn't occur anywhere else
          in your document).</para>
               </step>
               <step>
                  <para>Copy the document type declaration of your document
          and save it some place. The document type declaration is
          everything from “&lt;!DOCTYPE” to the closing “]&gt;”. </para>
               </step>
               <step>
                  <para>Perform the conversion with the
          <filename>db4-upgrade.xsl</filename> stylesheet.</para>
               </step>
               <step>
                  <para>Open the new document using your favorite editing tool.
          Replace all occurrences of the unique string you used to save
          the entity references with the corresponding entity
          references.</para>
               </step>
               <step>
                  <para>Paste the document type declaration that you saved onto
          the top of your new document.</para>
               </step>
               <step>
                  <para>Remove the external identifier (the PUBLIC and/or SYSTEM
          keywords) from the document type declaration. A document that
          begins with:</para>
                  <screen>&lt;!DOCTYPE book [
 &lt;!ENTITY someEntity "some replacement text"&gt;
]&gt;</screen>
                  <para>is perfectly well-formed. If you don't remove the
          references to the DTD, then your parser will likely try to
          validate against DocBook V4.0 and that's not going to work.
          Alternatively, you could refer to the DocBook V5.0 DTD.</para>
               </step>
            </procedure>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>Further information can be found in <link xlink:href="http://docbook.org/docs/howto/#convert4to5"/>.</para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.db5-to-db4" remap="topic" userlevel="medium">
         <title>Converting DocBook from Version 5 to Version 4</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You have a DocBook document in version 5.x, but you need 4.x.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Generally, the difference between version 4 and version 5 are
      minimal. Refer to the <link xlink:href="http://www.docbook.org/tdg51/en/html/ch01.html#d6e550">The
        Definitive Guide</link> for detailed information what has been
        added, removed, or renamed.</para>
            <para>In case you have or get DocBook 5 and need the former
      version, the following stylesheet which supports the
      core transformation might help:</para>
            <example xml:id="ex.db5to4-core.xsl">
               <title>
                  <filename>db5to4-core.xsl</filename>
               </title>
               <programlisting language="xml" linenumbering="numbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:exsl="http://exslt.org/common"
  exclude-result-prefixes="d xi xlink exsl html"&gt;

  &lt;xsl:import href="copy.xsl"/&gt;
  
  &lt;xsl:output method="xml" indent="yes" 
    doctype-public="-//OASIS//DTD DocBook XML V4.5//EN"
    doctype-system="http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;
  &lt;xsl:preserve-space 
    elements="d:screen d:programlisting d:literallayout xi:*"/&gt;
  &lt;xsl:variable name="inlines"&gt;abbrev accel acronym alt anchor
    annotation application author biblioref citation citebiblioid
    citerefentry citetitle classname code command computeroutput
    constant coref database date editor email emphasis envar errorcode
    errorname errortext errortype exceptionname filename firstterm
    footnote footnoteref foreignphrase function glossterm guibutton
    guiicon guilabel guimenu guimenuitem guisubmenu hardware indexterm
    initializer inlineequation inlinemediaobject interfacename jobtitle
    keycap keycode keycombo keysym link literal markup menuchoice
    methodname modifier mousebutton nonterminal olink ooclass
    ooexception oointerface option optional org orgname package
    parameter person personname phrase productname productnumber prompt
    property quote remark replaceable returnvalue shortcut subscript
    superscript symbol systemitem tag termdef token trademark type uri
    userinput varname wordasword xref&lt;/xsl:variable&gt;
  
  &lt;!-- Overwrite standard template and create elements without 
       a namespace node
  --&gt;
  &lt;xsl:template match="d:*"&gt;
    &lt;xsl:element name="{local-name()}"&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="@xml:id|@xml:lang"&gt;
    &lt;xsl:attribute name="{local-name()}"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:template&gt;
  
  &lt;!-- Suppress the following attributes: --&gt;
  &lt;xsl:template match="@annotations|@version"/&gt;
  &lt;xsl:template match="@xlink:*"/&gt;
  
  &lt;xsl:template match="@xlink:href"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="contains($inlines, local-name(..))"&gt;
        &lt;ulink url="{.}" remap="{local-name(..)}"&gt;
          &lt;xsl:value-of select=".."/&gt;
        &lt;/ulink&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:message&gt;@xlink:href could not be processed!
  parent element: &lt;xsl:value-of select="local-name(..)"/&gt;
        &lt;/xsl:message&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="d:*[@xlink:href]"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="contains($inlines, local-name())"&gt;
        &lt;ulink url="{@xlink:href}" remap="{local-name(.)}"&gt;
          &lt;xsl:element name="{local-name()}"&gt;
            &lt;xsl:apply-templates 
              select="@*[local-name() != 'href' and
                         namespace-uri() != 'http://www.w3.org/1999/xlink']
                      |node()"/&gt;
          &lt;/xsl:element&gt;
        &lt;/ulink&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:element name="{local-name()}"&gt;
          &lt;xsl:apply-templates 
            select="@*[local-name() != 'href' and
                       namespace-uri() != 'http://www.w3.org/1999/xlink']
                    |node()"/&gt;
        &lt;/xsl:element&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="d:link/@xlink:href"&gt;
    &lt;xsl:attribute name="url"&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="d:link[@xlink:href]"&gt;
    &lt;ulink&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/ulink&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="d:link[@linkend]"&gt;
    &lt;link&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/link&gt;
  &lt;/xsl:template&gt;
  
  &lt;!-- Renamed DocBook elements --&gt;
  &lt;xsl:template match="d:personblurb"&gt;
    &lt;authorblurb&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/authorblurb&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="d:tag"&gt;
    &lt;sgmltag&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/sgmltag&gt;
  &lt;/xsl:template&gt;
  
  &lt;!-- New DocBook v5.1 and HTML elements, no mapping available --&gt;
  &lt;xsl:template match="d:acknowledgements|d:annotation|d:arc
                       |d:cover
                       |d:definitions
                       |d:extendedlink
                       |d:givenname
                       |d:locator
                       |d:org|d:tocdiv
                       |html:*"&gt;
    &lt;xsl:message&gt;Don't know how to transfer "&lt;xsl:value-of
      select="local-name()"/&gt;" element into DocBook 4&lt;/xsl:message&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <para>Use your favorite XSLT processor to transform your documents.</para>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The stylesheet from <xref linkend="ex.db5to4-core.xsl"/> imports
      the templates from <filename>copy.xsl</filename> using an
      <emphasis>identity transformation</emphasis>. That means, whatever
      is <emphasis>not</emphasis> specified gets copied. In most cases
      that is what you want—a DocBook 5 <tag>section</tag> element
      will be transformed into an equally named DocBook 4 
      <tag>section</tag> element without the namespace.
    </para>
            <para>Where it gets difficult are the new elements which are
      introduced in DocBook 5. Whenever the stylesheet encounters
      those it will print a warning. These elements are not copied to
      the output stream. If you have one of those elements you need to
      customize the stylesheet yourself.</para>
            <para>Another issue is the almost ubiquitary <tag>info</tag>
      element which can appear in structual and block elements. The
      above stylesheet does it wrong and copies any <tag>info</tag>
      element straight into the output stream. However, DocBook 4
      has different element names for meta information in
      DocBook 5. If you have <tag>info</tag> elements in your 
      document they have to be renamed, depending on the parent element:</para>
            <itemizedlist>
               <listitem>
                  <formalpara>
                     <title>Meta Information Inside Structural Elements</title>
                     <para>An <tag>info</tag> element inside a <tag>sect1</tag>
            appends the suffix <literal>info</literal> to the name of
            its parent element and is renamed therefore as
              <tag>sect1info</tag>. This rule is applied for structural
            elements like <tag>book</tag>, <tag>chapter</tag>, and
            others.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Meta Information Inside Block Elements</title>
                     <para>An <tag>info</tag> element inside an <tag>example</tag>
            is renamed as <tag>blockinfo</tag>. This rule is applied for
          block elements like <tag>equation</tag>, <tag>figure</tag>,
          and others.</para>
                  </formalpara>
               </listitem>
            </itemizedlist>
    
            <para>Apart from the renaming, the order of the renamed <tag>info</tag>
      element is crucial. Consider the following DocBook 5
      structure:</para>
            <screen>section
  title
  info</screen>
            <para>This structure has to be renamed and reorganized as
      follows:</para>
            <screen>section
  sectioninfo
  title</screen>
            <para>As you can see, the <tag>title</tag> element appears now
        <emphasis>after</emphasis> the renamed <tag>info</tag>. All
      these issues are solved with the following additional
      stylesheet:</para>
            <example xml:id="ex.db5to4-info.xsl">
               <title>
                  <filename>db5to4-info.xsl</filename>
               </title>
               <programlisting language="xml" linenumbering="numbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:exsl="http://exslt.org/common"
  exclude-result-prefixes="d xlink exsl"&gt;
  
  &lt;!-- Structural elements using info --&gt;
  &lt;xsl:template match="d:appendix[d:info]
                      |d:article[d:info]
                      |d:bibliography[d:info]
                      |d:book[d:info]
                      |d:chapter[d:info]
                      |d:colophon[d:info]
                      |d:equation[d:info]
                      |d:glossary[d:info]
                      |d:index[d:info]
                      |d:legalnotice[d:info]
                      |d:part[d:info]
                      |d:partintro[d:info]
                      |d:preface[d:info]
                      |d:reference[d:info]
                      |d:refsect1[d:info]
                      |d:refsect2[d:info]
                      |d:refsect3[d:info]
                      |d:refsection[d:info]
                      |d:refsynopsisdiv[d:info]
                      |d:sect1[d:info]
                      |d:sect2[d:info]
                      |d:sect3[d:info]
                      |d:sect4[d:info]
                      |d:sect5[d:info]
                      |d:section[d:info]
                      |d:set[d:info]
                      |d:setindex[d:info]"&gt;
    &lt;!-- Change order of info and title  --&gt;
    &lt;xsl:element name="{local-name()}"&gt;
      &lt;xsl:apply-templates select="@*"/&gt;
      &lt;xsl:apply-templates select="d:title/preceding-sibling::processing-instruction()
                                   |d:title/preceding-sibling::comment()"/&gt;
      &lt;xsl:apply-templates select="d:info"/&gt;
      &lt;xsl:apply-templates select="d:title"/&gt;
      &lt;!-- Process the rest --&gt;
      &lt;xsl:apply-templates select="d:info/following-sibling::node()"/&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
  
  &lt;!-- Block elements using info --&gt;
  &lt;xsl:template match="d:bibliolist[d:info]
                      |d:blockquote[d:info]
                      |d:equation[d:info]
                      |d:example[d:info]
                      |d:figure[d:info]
                      |d:glosslist[d:info]
                      |d:informalequation[d:info]
                      |d:informalexample[d:info]
                      |d:informalfigure[d:info]
                      |d:informaltable[d:info]
                      |d:itemizedlist[d:info]
                      |d:legalnotice[d:info]
                      |d:msgset[d:info]
                      |d:orderedlist[d:info]
                      |d:procedure[d:info]
                      |d:qandadiv[d:info]
                      |d:qandaentry[d:info]
                      |d:qandaset[d:info]
                      |d:table[d:info]
                      |d:task[d:info]
                      |d:taskprerequisites[d:info]
                      |d:taskrelated[d:info]
                      |d:tasksummary[d:info]
                      |d:variablelist[d:info]"&gt;
    &lt;xsl:element name="{local-name()}"&gt;
      &lt;xsl:apply-templates select="@*"/&gt;
      &lt;xsl:apply-templates select="d:title/preceding-sibling::processing-instruction()
                                   |d:title/preceding-sibling::comment()"/&gt;
      &lt;xsl:apply-templates select="d:info"&gt;
        &lt;xsl:with-param name="infoname"&gt;block&lt;/xsl:with-param&gt;
      &lt;/xsl:apply-templates&gt;
      &lt;xsl:apply-templates select="d:title|
                                   d:title/following-sibling::processing-instruction()[1]
                                   |d:title/following-sibling::comment()[1]"/&gt;
      
      &lt;!-- Process the rest --&gt;
      &lt;xsl:apply-templates select="d:info/following-sibling::node()"/&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Suppress other info elements who has no direct mapping --&gt;
  &lt;xsl:template match="d:*[d:info]"/&gt;
  
  &lt;xsl:template match="d:info"&gt;
    &lt;xsl:param name="infoname" select="local-name(..)"/&gt;
    &lt;xsl:variable name="rtf-node"&gt;
      &lt;xsl:element name="{$infoname}info"&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:element&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="count(exsl:node-set($rtf-node)/*/*) &gt; 0"&gt;
        &lt;xsl:copy-of select="$rtf-node"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;&lt;!-- Don't copy, it's empty --&gt;&lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <para>To combine both, use the following stylesheet:</para>
            <example xml:id="ex.db5to4-withinfo.xsl">
               <title>
                  <filename>db5to4-withinfo.xsl</filename>
               </title>
               <programlisting language="xml" linenumbering="numbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:d="http://docbook.org/ns/docbook"&gt;

  &lt;xsl:import href="db5to4-core.xsl"/&gt;
  &lt;xsl:import href="db5to4-info.xsl"/&gt;
  
  &lt;xsl:output method="xml" indent="yes" 
    doctype-public="-//OASIS//DTD DocBook XML V4.5//EN"
    doctype-system="http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"/&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <para>The above stylesheets were separated between a core
      functionality (<filename>db5to4-core.xsl</filename>) with
      additional <tag>info</tag> element handling
      (<filename>db5to4-info.xsl</filename>). In most cases you will use
      the stylesheet <filename>db5to4-withinfo.xsl</filename>, but if
      you want to implement a different <tag>info</tag> handling you
      can. In <xref linkend="ex.db5to4-withinfo.xsl"/> just replace the 
      line with importing <filename>db5to4-info.xsl</filename> with your
      own implementation.      
    </para>
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><section xml:id="dbc.structure.splitdb" remap="topic" userlevel="medium">
         <title>Splitting DocBook Documents</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You have a big DocBook document, like a book, and you want to
      split each <tag>chapter</tag>, <tag>appendix</tag> etc. into a
      separate file.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>There are two solutions to this problems:</para>
            <itemizedlist>
               <listitem>
                  <para>Apply a XSLT stylesheet which uses an extension element
          like <function>exsl:document</function>
                  </para>
               </listitem>
               <listitem>
                  <para>Run the <command>dbautosplit</command> command</para>
               </listitem>
            </itemizedlist>
    
            <section xml:id="sec.structure.splitdb.xsl">
               <title>Splitting with XSLT</title>
               <para>The stylesheet in <xref linkend="ex.dbsplit.xsl"/> uses 
        extension elements to create separate documents from the main
        output. It uses code from
        <filename>html/chunk-code.xsl</filename>.</para>
               <example xml:id="ex.dbsplit.xsl">
                  <title>
                     <filename>dbsplit.xsl</filename>
                  </title>
                  <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE xsl:stylesheet 
[
 &lt;!ENTITY db "http://docbook.sourceforge.net/release/xsl-ns/current"&gt; 
]&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns:exsl="http://exslt.org/common"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  extension-element-prefixes="exsl"&gt;

  &lt;xsl:import href="chunker.xsl"/&gt;
  &lt;xsl:import href="copy.xsl"/&gt;
  &lt;xsl:output indent="yes"/&gt;


  &lt;xsl:param name="base.dir" select="'out/'"/&gt;
  &lt;xsl:param name="use.id.as.filename" select="0"/&gt;
  &lt;xsl:param name="rootid"/&gt;

  &lt;xsl:param name="dbsplit.root.filename"&gt;Index&lt;/xsl:param&gt;
  &lt;xsl:param name="dbsplit.ext"&gt;.xml&lt;/xsl:param&gt;
  &lt;xsl:param name="dbsplit.chunk.depth" select="2"/&gt;

  &lt;xsl:template name="object.id"&gt;
    &lt;xsl:param name="object" select="."/&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$object/@id"&gt;
        &lt;xsl:value-of select="$object/@id"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="$object/@xml:id"&gt;
        &lt;xsl:value-of select="$object/@xml:id"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:value-of select="generate-id($object)"/&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*" mode="recursive-chunk-filename"&gt;
    &lt;xsl:param name="recursive" select="false()"/&gt;
    &lt;xsl:variable name="filename"&gt;
      &lt;xsl:choose&gt;
        &lt;!-- if this is the root element, use the dbsplit.root.filename --&gt;
        &lt;xsl:when test="not(parent::*) and $dbsplit.root.filename != ''"&gt;
          &lt;xsl:value-of select="$dbsplit.root.filename"/&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:when&gt;
        &lt;!-- Special case --&gt;
        &lt;xsl:when
          test="self::d:legalnotice and not($generate.legalnotice.link = 0)"&gt;
          &lt;xsl:choose&gt;
            &lt;xsl:when
              test="(@id or @xml:id) and not($use.id.as.filename = 0)"&gt;
              &lt;!-- * if this legalnotice has an ID, then go ahead and use --&gt;
              &lt;!-- * just the value of that ID as the basename for the file --&gt;
              &lt;!-- * (that is, without prepending an "ln-" too it) --&gt;
              &lt;xsl:value-of select="(@id|@xml:id)[1]"/&gt;
              &lt;xsl:value-of select="$dbsplit.ext"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
              &lt;!-- * otherwise, if this legalnotice does not have an ID, --&gt;
              &lt;!-- * then we generate an ID... --&gt;
              &lt;xsl:variable name="id"&gt;
                &lt;xsl:call-template name="object.id"/&gt;
              &lt;/xsl:variable&gt;
              &lt;!-- * ...and then we take that generated ID, prepend an --&gt;
              &lt;!-- * "ln-" to it, and use that as the basename for the file --&gt;
              &lt;xsl:value-of select="concat('ln-',$id,$dbsplit.ext)"/&gt;
            &lt;/xsl:otherwise&gt;
          &lt;/xsl:choose&gt;
        &lt;/xsl:when&gt;
        &lt;!-- if there's no dbhtml filename, and if we're to use IDs as --&gt;
        &lt;!-- filenames, then use the ID to generate the filename. --&gt;
        &lt;xsl:when test="(@id or @xml:id) and $use.id.as.filename != 0"&gt;
          &lt;xsl:value-of select="(@id|@xml:id)[1]"/&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise/&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:variable&gt;

    &lt;xsl:choose&gt;
      &lt;xsl:when test="not($recursive) and $filename != ''"&gt;
        &lt;!-- if this chunk has an explicit name, use it --&gt;
        &lt;xsl:value-of select="$filename"/&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:set"&gt;
        &lt;xsl:value-of select="$dbsplit.root.filename"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:book"&gt;
        &lt;xsl:text&gt;bk&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:article"&gt;
        &lt;xsl:if test="/d:set"&gt;
          &lt;!-- in a set, make sure we inherit the right book info... --&gt;
          &lt;xsl:apply-templates mode="recursive-chunk-filename"
            select="parent::*"&gt;
            &lt;xsl:with-param name="recursive" select="true()"/&gt;
          &lt;/xsl:apply-templates&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:text&gt;ar&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:preface"&gt;
        &lt;xsl:if test="/d:set"&gt;
          &lt;!-- in a set, make sure we inherit the right book info... --&gt;
          &lt;xsl:apply-templates mode="recursive-chunk-filename"
            select="parent::*"&gt;
            &lt;xsl:with-param name="recursive" select="true()"/&gt;
          &lt;/xsl:apply-templates&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:text&gt;pr&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:chapter"&gt;
        &lt;xsl:if test="/d:set"&gt;
          &lt;!-- in a set, make sure we inherit the right book info... --&gt;
          &lt;xsl:apply-templates mode="recursive-chunk-filename"
            select="parent::*"&gt;
            &lt;xsl:with-param name="recursive" select="true()"/&gt;
          &lt;/xsl:apply-templates&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:text&gt;ch&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:appendix"&gt;
        &lt;xsl:if test="/d:set"&gt;
          &lt;!-- in a set, make sure we inherit the right book info... --&gt;
          &lt;xsl:apply-templates mode="recursive-chunk-filename"
            select="parent::*"&gt;
            &lt;xsl:with-param name="recursive" select="true()"/&gt;
          &lt;/xsl:apply-templates&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:text&gt;ap&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="a" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:part"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="/d:set"&gt;
            &lt;!-- in a set, make sure we inherit the right book info... --&gt;
            &lt;xsl:apply-templates mode="recursive-chunk-filename"
              select="parent::*"&gt;
              &lt;xsl:with-param name="recursive" select="true()"/&gt;
            &lt;/xsl:apply-templates&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt; &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;

        &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:reference"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="/d:set"&gt;
            &lt;!-- in a set, make sure we inherit the right book info... --&gt;
            &lt;xsl:apply-templates mode="recursive-chunk-filename"
              select="parent::*"&gt;
              &lt;xsl:with-param name="recursive" select="true()"/&gt;
            &lt;/xsl:apply-templates&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt; &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;

        &lt;xsl:text&gt;rn&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:refentry"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="parent::d:reference"&gt;
            &lt;xsl:apply-templates mode="recursive-chunk-filename"
              select="parent::*"&gt;
              &lt;xsl:with-param name="recursive" select="true()"/&gt;
            &lt;/xsl:apply-templates&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:if test="/d:set"&gt;
              &lt;!-- in a set, make sure we inherit the right book info... --&gt;
              &lt;xsl:apply-templates mode="recursive-chunk-filename"
                select="parent::*"&gt;
                &lt;xsl:with-param name="recursive" select="true()"/&gt;
              &lt;/xsl:apply-templates&gt;
            &lt;/xsl:if&gt;
          &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;

        &lt;xsl:text&gt;re&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:colophon"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="/d:set"&gt;
            &lt;!-- in a set, make sure we inherit the right book info... --&gt;
            &lt;xsl:apply-templates mode="recursive-chunk-filename"
              select="parent::*"&gt;
              &lt;xsl:with-param name="recursive" select="true()"/&gt;
            &lt;/xsl:apply-templates&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt; &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;

        &lt;xsl:text&gt;co&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:sect1 or self::d:sect2 or self::d:sect3 or 
                      self::d:sect4 or self::d:sect5 or self::d:section"&gt;
        &lt;xsl:apply-templates mode="recursive-chunk-filename"
          select="parent::*"&gt;
          &lt;xsl:with-param name="recursive" select="true()"/&gt;
        &lt;/xsl:apply-templates&gt;
        &lt;xsl:text&gt;s&lt;/xsl:text&gt;
        &lt;xsl:number format="01"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:bibliography"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="/d:set"&gt;
            &lt;!-- in a set, make sure we inherit the right book info... --&gt;
            &lt;xsl:apply-templates mode="recursive-chunk-filename"
              select="parent::*"&gt;
              &lt;xsl:with-param name="recursive" select="true()"/&gt;
            &lt;/xsl:apply-templates&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt; &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;

        &lt;xsl:text&gt;bi&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:glossary"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="/d:set"&gt;
            &lt;!-- in a set, make sure we inherit the right book info... --&gt;
            &lt;xsl:apply-templates mode="recursive-chunk-filename"
              select="parent::*"&gt;
              &lt;xsl:with-param name="recursive" select="true()"/&gt;
            &lt;/xsl:apply-templates&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt; &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;

        &lt;xsl:text&gt;go&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:index"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="/d:set"&gt;
            &lt;!-- in a set, make sure we inherit the right book info... --&gt;
            &lt;xsl:apply-templates mode="recursive-chunk-filename"
              select="parent::*"&gt;
              &lt;xsl:with-param name="recursive" select="true()"/&gt;
            &lt;/xsl:apply-templates&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt; &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;

        &lt;xsl:text&gt;ix&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:book"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="self::d:setindex"&gt;
        &lt;xsl:text&gt;si&lt;/xsl:text&gt;
        &lt;xsl:number level="any" format="01" from="d:set"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:otherwise&gt;
        &lt;xsl:text&gt;chunk-filename-error-&lt;/xsl:text&gt;
        &lt;xsl:value-of select="name(.)"/&gt;
        &lt;xsl:number level="any" format="01" from="d:set"/&gt;
        &lt;xsl:if test="not($recursive)"&gt;
          &lt;xsl:value-of select="$dbsplit.ext"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="generate-filename"&gt;
    &lt;xsl:apply-templates select="." mode="recursive-chunk-filename"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="generate-content"&gt;
    &lt;xsl:variable name="filename"&gt;
      &lt;xsl:call-template name="make-relative-filename"&gt;
        &lt;xsl:with-param name="base.dir" select="$base.dir"/&gt;
        &lt;xsl:with-param name="base.name"&gt;
           &lt;xsl:call-template name="generate-filename"/&gt;
        &lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="depth" select="count(ancestor::*)"/&gt;
    
    &lt;!--&lt;xsl:message&gt;generate-content:
      name: &lt;xsl:value-of select="name()"/&gt;
      filename: &lt;xsl:value-of select="$filename"/&gt;
      depth: &lt;xsl:value-of select="$depth"/&gt;
      test: &lt;xsl:value-of select="$depth &gt;= $dbsplit.chunk.depth"/&gt;
    &lt;/xsl:message&gt;--&gt;
    
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$depth &amp;lt;= $dbsplit.chunk.depth"&gt;
        &lt;xi:include href="{$filename}"/&gt;
        &lt;xsl:call-template name="write.xml.chunk"&gt;
          &lt;xsl:with-param name="filename" select="$filename"/&gt;
          &lt;xsl:with-param name="content"&gt;
            &lt;xsl:copy-of select="preceding-sibling::processing-instruction()|
                                 preceding-sibling::comment()"/&gt;
            &lt;xsl:copy&gt;
              &lt;xsl:apply-templates/&gt;
            &lt;/xsl:copy&gt;
          &lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:copy&gt;
          &lt;xsl:apply-templates/&gt;
        &lt;/xsl:copy&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template
    match="d:acknowledgements|d:appendix|d:article|
           d:bibliography|
           d:chapter|d:colophon|d:dedication|d:glossary|
           d:part|d:preface|d:reference|d:topic|
           d:sect1|d:section[not(parent::d:section)]"&gt;
    &lt;xsl:call-template name="generate-content"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</programlisting>
               </example>
               <para>The <filename>chunker.xsl</filename> file is more or
        less a stripped down version of the
          <filename>html/chunker.xsl</filename> file from the DocBook XSL
        stylesheets. It is used to create processor independent writing
        of our XML chunks. The file was integrated into
          <filename>dbsplit.xsl</filename> to make it more independent
        from the DocBook XSL stylesheets.</para>
               <example>
                  <title>
                     <filename>chunker.xsl</filename>
                  </title>
                  <programlisting language="xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:saxon="http://icl.com/saxon"
  xmlns:lxslt="http://xml.apache.org/xslt"
  xmlns:redirect="http://xml.apache.org/xalan/redirect"
  xmlns:exsl="http://exslt.org/common"
  xmlns="http://www.w3.org/1999/xhtml" version="1.0"
  exclude-result-prefixes="saxon lxslt redirect exsl"
  extension-element-prefixes="saxon redirect lxslt exsl"&gt;

  &lt;xsl:param name="chunker.output.method" select="'xml'"/&gt;
  &lt;xsl:param name="chunker.output.encoding" select="'UTF-8'"/&gt;
  &lt;xsl:param name="chunker.output.indent" select="'no'"/&gt;
  &lt;xsl:param name="chunker.output.omit-xml-declaration" select="'no'"/&gt;
  &lt;xsl:param name="chunker.output.standalone" select="'no'"/&gt;
  &lt;xsl:param name="chunker.output.doctype-public" select="''"/&gt;
  &lt;xsl:param name="chunker.output.doctype-system" select="''"/&gt;
  &lt;xsl:param name="chunker.output.media-type" select="''"/&gt;
  &lt;xsl:param name="chunker.output.cdata-section-elements" select="''"/&gt;
  &lt;xsl:param name="chunker.output.quiet" select="0"/&gt;

  &lt;xsl:param name="saxon.character.representation"
    select="'entity;decimal'"/&gt;

  &lt;xsl:template name="make-relative-filename"&gt;
    &lt;xsl:param name="base.dir" select="'./'"/&gt;
    &lt;xsl:param name="base.name" select="''"/&gt;

    &lt;xsl:choose&gt;
      &lt;!-- put Saxon first to work around a bug in libxslt --&gt;
      &lt;xsl:when test="element-available('saxon:output')"&gt;
        &lt;!-- Saxon doesn't make the chunks relative --&gt;
        &lt;xsl:value-of select="concat($base.dir,$base.name)"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="element-available('exsl:document')"&gt;
        &lt;!-- EXSL document does make the chunks relative, I think --&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="count(parent::*) = 0"&gt;
            &lt;xsl:value-of select="concat($base.dir,$base.name)"/&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:value-of select="$base.name"/&gt;
          &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="element-available('redirect:write')"&gt;
        &lt;!-- Xalan doesn't make the chunks relative --&gt;
        &lt;xsl:value-of select="concat($base.dir,$base.name)"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:message terminate="yes"&gt;
          &lt;xsl:text&gt;Don't know how to chunk with &lt;/xsl:text&gt;
          &lt;xsl:value-of select="system-property('xsl:vendor')"/&gt;
        &lt;/xsl:message&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="write.chunk"&gt;
    &lt;xsl:param name="filename" select="''"/&gt;
    &lt;xsl:param name="quiet" select="$chunker.output.quiet"/&gt;
    &lt;xsl:param name="suppress-context-node-name" select="0"/&gt;
    &lt;xsl:param name="message-prolog"/&gt;
    &lt;xsl:param name="message-epilog"/&gt;

    &lt;xsl:param name="method" select="$chunker.output.method"/&gt;
    &lt;xsl:param name="encoding" select="$chunker.output.encoding"/&gt;
    &lt;xsl:param name="indent" select="$chunker.output.indent"/&gt;
    &lt;xsl:param name="omit-xml-declaration"
      select="$chunker.output.omit-xml-declaration"/&gt;
    &lt;xsl:param name="standalone" select="$chunker.output.standalone"/&gt;
    &lt;xsl:param name="doctype-public"
      select="$chunker.output.doctype-public"/&gt;
    &lt;xsl:param name="doctype-system"
      select="$chunker.output.doctype-system"/&gt;
    &lt;xsl:param name="media-type" select="$chunker.output.media-type"/&gt;
    &lt;xsl:param name="cdata-section-elements"
      select="$chunker.output.cdata-section-elements"/&gt;

    &lt;xsl:param name="content"/&gt;

    &lt;xsl:if test="$quiet = 0"&gt;
      &lt;xsl:message&gt;
        &lt;xsl:if test="not($message-prolog = '')"&gt;
          &lt;xsl:value-of select="$message-prolog"/&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:text&gt;Writing &lt;/xsl:text&gt;
        &lt;xsl:value-of select="$filename"/&gt;
        &lt;xsl:if test="name(.) != '' and $suppress-context-node-name = 0"&gt;
          &lt;xsl:text&gt; for &lt;/xsl:text&gt;
          &lt;xsl:value-of select="name(.)"/&gt;
          &lt;xsl:if test="@id or @xml:id"&gt;
            &lt;xsl:text&gt;(&lt;/xsl:text&gt;
            &lt;xsl:value-of select="(@id|@xml:id)[1]"/&gt;
            &lt;xsl:text&gt;)&lt;/xsl:text&gt;
          &lt;/xsl:if&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:if test="not($message-epilog = '')"&gt;
          &lt;xsl:value-of select="$message-epilog"/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:message&gt;
    &lt;/xsl:if&gt;

    &lt;xsl:choose&gt;
      &lt;xsl:when test="element-available('exsl:document')"&gt;
        &lt;xsl:choose&gt;
          &lt;!-- Handle the permutations ... --&gt;
          &lt;xsl:when test="$media-type != ''"&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system != ''"&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}"
                  doctype-public="{$doctype-public}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system = ''"&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}"
                  doctype-public="{$doctype-public}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public = '' and $doctype-system != ''"&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;!-- $doctype-public = '' and $doctype-system = ''"&gt; --&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}" standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system != ''"&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  doctype-public="{$doctype-public}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system = ''"&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  doctype-public="{$doctype-public}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public = '' and $doctype-system != ''"&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;!-- $doctype-public = '' and $doctype-system = ''"&gt; --&gt;
                &lt;exsl:document href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/exsl:document&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="element-available('saxon:output')"&gt;
        &lt;xsl:choose&gt;
          &lt;!-- Handle the permutations ... --&gt;
          &lt;xsl:when test="$media-type != ''"&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system != ''"&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}"
                  doctype-public="{$doctype-public}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system = ''"&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}"
                  doctype-public="{$doctype-public}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public = '' and $doctype-system != ''"&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;!-- $doctype-public = '' and $doctype-system = ''"&gt; --&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  media-type="{$media-type}" standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system != ''"&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  doctype-public="{$doctype-public}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public != '' and $doctype-system = ''"&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  doctype-public="{$doctype-public}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when
                test="$doctype-public = '' and $doctype-system != ''"&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  doctype-system="{$doctype-system}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;!-- $doctype-public = '' and $doctype-system = ''"&gt; --&gt;
                &lt;saxon:output
                  saxon:character-representation="{$saxon.character.representation}"
                  href="{$filename}" method="{$method}"
                  encoding="{$encoding}" indent="{$indent}"
                  omit-xml-declaration="{$omit-xml-declaration}"
                  cdata-section-elements="{$cdata-section-elements}"
                  standalone="{$standalone}"&gt;
                  &lt;xsl:copy-of select="$content"/&gt;
                &lt;/saxon:output&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:when test="element-available('redirect:write')"&gt;
        &lt;!-- Xalan uses redirect --&gt;
        &lt;redirect:write file="{$filename}"&gt;
          &lt;xsl:copy-of select="$content"/&gt;
        &lt;/redirect:write&gt;
      &lt;/xsl:when&gt;

      &lt;xsl:otherwise&gt;
        &lt;!-- it doesn't matter since we won't be making chunks... --&gt;
        &lt;xsl:message terminate="yes"&gt;
          &lt;xsl:text&gt;Can't make chunks with &lt;/xsl:text&gt;
          &lt;xsl:value-of select="system-property('xsl:vendor')"/&gt;
          &lt;xsl:text&gt;'s processor.&lt;/xsl:text&gt;
        &lt;/xsl:message&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="write.xml.chunk"&gt;
    &lt;xsl:param name="filename" select="''"/&gt;
    &lt;xsl:param name="quiet" select="$chunker.output.quiet"/&gt;
    &lt;xsl:param name="suppress-context-node-name" select="0"/&gt;
    &lt;xsl:param name="message-prolog"/&gt;
    &lt;xsl:param name="message-epilog"/&gt;
    &lt;xsl:param name="method" select="'xml'"/&gt;
    &lt;xsl:param name="encoding" select="$chunker.output.encoding"/&gt;
    &lt;xsl:param name="media-type" select="$chunker.output.media-type"/&gt;
    &lt;xsl:param name="content"/&gt;
    &lt;xsl:call-template name="write.chunk"&gt;
      &lt;xsl:with-param name="filename" select="$filename"/&gt;
      &lt;xsl:with-param name="quiet" select="$quiet"/&gt;
      &lt;xsl:with-param name="suppress-context-node-name"
        select="$suppress-context-node-name"/&gt;
      &lt;xsl:with-param name="message-prolog" select="$message-prolog"/&gt;
      &lt;xsl:with-param name="message-epilog" select="$message-epilog"/&gt;
      &lt;xsl:with-param name="method" select="$method"/&gt;
      &lt;xsl:with-param name="encoding" select="$encoding"/&gt;
      &lt;xsl:with-param name="indent" select="'yes'"/&gt;
      &lt;xsl:with-param name="omit-xml-declaration" select="'no'"/&gt;
      &lt;xsl:with-param name="standalone" select="'no'"/&gt;
      &lt;xsl:with-param name="doctype-public"/&gt;
      &lt;xsl:with-param name="doctype-system"/&gt;
      &lt;xsl:with-param name="media-type" select="$media-type"/&gt;
      &lt;xsl:with-param name="cdata-section-elements"/&gt;
      &lt;xsl:with-param name="content" select="$content"/&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
               </example>
               <para>It can be customized with several parameters:</para>
               <variablelist>
                  <varlistentry>
                     <term>
                        <parameter>base.dir</parameter>
                     </term>
                     <listitem>
                        <para>Determines the output directory</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <parameter>dbsplit.chunk.depth</parameter>
                     </term>
                     <listitem>
                        <para>Controls the depth where to split </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <parameter>dbsplit.ext</parameter>
                     </term>
                     <listitem>
                        <para>Defines the file extension for each filename written.</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <parameter>dbsplit.root.filename</parameter>
                     </term>
                     <listitem>
                        <para>Identifies the name of the root filename when splitted 
            </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <parameter>use.id.as.filename</parameter>
                     </term>
                     <listitem>
                        <para>Uses ID values as filenames</para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <parameter>rootid</parameter>
                     </term>
                     <listitem>
                        <para>Specify the root element to split</para>
                     </listitem>
                  </varlistentry>
               </variablelist>
            </section>
            <section xml:id="sec.structure.splitdb.dbsplit">
               <title>Splitting with the <command>dbautosplit</command>
               </title>
               <para>TBD</para>
            </section>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>
      
    </para>
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.extract" remap="topic" userlevel="easy">
         <title>Extracting One Element from DocBook Document</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You have a big DocBook document and you need to extract one
      structural element like a <tag>chapter</tag>, <tag>appendix</tag>
      etc. to edit or process it separately from the main document.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>To make the solution work, the structural element needs an ID
    attribute. If this is available, use the following stylesheet:</para>
            <example xml:id="ex.rootid.xsl">
               <title>Extracting Stylesheet <filename>rootid.xsl</filename>
               </title>
               <programlisting linenumbering="numbered" language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:key name="id" match="*" use="@id|@xml:id"/&gt;
  &lt;!-- Contains the ID attribute of the extracted element: --&gt;
  &lt;xsl:param name="rootid"/&gt;
  &lt;!-- Controls some log messages: 0=off, 1=on --&gt;
  &lt;xsl:param name="rootid.debug" select="0"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$rootid !=''"&gt;
        &lt;xsl:if test="count(key('id',$rootid)) = 0"&gt;
          &lt;xsl:message terminate="yes"&gt;
            &lt;xsl:text&gt;ID '&lt;/xsl:text&gt;
            &lt;xsl:value-of select="$rootid"/&gt;
            &lt;xsl:text&gt;' not found in document.&lt;/xsl:text&gt;
          &lt;/xsl:message&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:call-template name="rootid.debug.message"/&gt;
        &lt;xsl:call-template name="rootid.process"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:call-template name="normal.process"/&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="rootid.debug.message"&gt;
    &lt;xsl:if test="$rootid.debug != 0"&gt;
      &lt;xsl:message&gt;
        &lt;xsl:text&gt;Using ID &lt;/xsl:text&gt;
        &lt;xsl:value-of select="concat('&amp;quot;', $rootid, '&amp;quot;')"/&gt;
      &lt;/xsl:message&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template name="rootid.process"&gt;
    &lt;xsl:apply-templates select="key('id',$rootid)" mode="process.root"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="normal.process"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="node() | @*" mode="process.root"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@* | node()" mode="process.root"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <para>Pass the <parameter>rootid</parameter> parameter to your XSLT
    processor with the corresponding ID, for example:</para>
            <screen>
               <command>xsltproc</command> --stringparam rootid intro rootid.xsl <replaceable>XML_FILE</replaceable>
            </screen>
            <para>The result contains only the element with the corresponding ID
      value and everything inside it.</para>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>This solution cuts off the element with the corresponding ID
      and copies the element itself and its children to the output
      stream. The copying is done in the <literal>process.root</literal>
      mode. The stylesheet does not apply any further processing. This can be a
      disadvantage, for example, a <tag>xref</tag> pointing outside of
      the respective element. If the resulting file contains such a
      cross reference, it will not be valid anymore.</para>
            <para>It is possible to convert such cross references into a
      <quote>resolved form</quote> by using the following code:</para>
            <example xml:id="ex.rootid-resolve-xrefs.xsl">
               <title>
                  <filename>rootid-resolve-xrefs.xsl</filename>
               </title>
               <programlisting language="xml" linenumbering="numbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:d="http://docbook.org/ns/docbook"&gt;
  
  &lt;xsl:import href="rootid.xsl"/&gt;
  
  &lt;xsl:template match="d:xref" mode="process.root"&gt;
    &lt;xsl:variable name="xhref" select="@xlink:href"/&gt;
    &lt;!-- is the @xlink:href a local idref link? --&gt;
    &lt;xsl:variable name="xlink.idref"&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="starts-with($xhref,'#')"&gt;
          &lt;xsl:value-of select="substring($xhref, 2)"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="contains($xhref, '://')"&gt;
         &lt;xsl:message&gt;
            &lt;xsl:text&gt;ERROR: Don't know what do do with @xlink:href: &lt;/xsl:text&gt;
            &lt;xsl:value-of select="$xhref"/&gt;&lt;/xsl:message&gt; 
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise/&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="xlink.targets" select="key('id',$xlink.idref)"/&gt;
    &lt;xsl:variable name="linkend.targets" select="key('id',@linkend)"/&gt;
    &lt;xsl:variable name="target" select="($xlink.targets | $linkend.targets)[1]"/&gt;
    &lt;xsl:variable name="refelem" select="local-name($target)"/&gt;
    
    &lt;xsl:variable name="this.div" 
      select="ancestor-or-self::d:*[@xml:id = $rootid][1]"/&gt;
    &lt;xsl:variable name="target.div"
      select="$target/ancestor-or-self::d:*[@xml:id = $rootid][1]"/&gt;

    &lt;xsl:choose&gt;
      &lt;xsl:when test="generate-id($this.div) = generate-id($target.div)"&gt;
        &lt;xsl:copy-of select="."/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;phrase xmlns="http://docbook.org/ns/docbook" remap="xref"&gt;
          &lt;xsl:choose&gt;
            &lt;xsl:when test="@linkend"&gt;
              &lt;xsl:attribute name="role"&gt;
                &lt;xsl:value-of select="@linkend"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$xlink.idref != ''"&gt;
              &lt;xsl:attribute name="role"&gt;
                &lt;xsl:value-of select="$xlink.idref"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
              &lt;xsl:attribute name="role"&gt;
                &lt;xsl:value-of select="$xhref"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/xsl:otherwise&gt;
          &lt;/xsl:choose&gt;
          &lt;xsl:apply-templates
            select="@*[local-name() != 'linkend' and
                       local-name() != 'href']"
            mode="process.root"/&gt;
          &lt;xsl:apply-templates
            select="($target/ancestor-or-self::d:*[d:title])[last()]/d:title/node()"
            mode="process.root"/&gt;
        &lt;/phrase&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <para>The stylesheet in <xref linkend="ex.rootid-resolve-xrefs.xsl"/> imports the
      <filename>rootid.xsl</filename> and inherits all templates. To
      implement a different behaviour we need to add a new template
      matching for the <tag>xref</tag> element in mode
      <literal>process.root</literal>.</para>
            <para>The template contains mostly code from the DocBook XSL
      stylesheets with some minor changes. The general behaviour is
      described in the following sequence:</para>
            <orderedlist>
               <listitem>
                  <para>Make sure, everything is in place and a <tag class="attribute">xlink:href</tag> attribute does not contain
          a <literal>://</literal> string. If this is the case emit an
          error message.</para>
               </listitem>
               <listitem>
                  <para>Populate the variables <varname>xlink.targets</varname>
          and <varname>linkend.targets</varname> with the target node.
          For <varname>xlink.targets</varname> use the XLink attribute <tag class="attribute">xlink:href</tag>, for the variable
          <varname>linkend.targets</varname> use the <tag class="attribute">linkend</tag>
          attribute. As only one of these attributes can be available,
          but not both, the variables are filled with zero nodes or
          more.</para>
               </listitem>
               <listitem>
                  <para>Create the set union of the variables
            <varname>xlink.targets</varname> and
            <varname>linkend.targets</varname> and select only one node.
        </para>
               </listitem>
               <listitem>
                  <para>Now it gets interesting: our context node is in
            <tag>xref</tag>. We need to know the node where  the value
          of the <tag class="attribute">xml:id</tag> attribute equals
          our <parameter>rootid</parameter> parameter. We climb up tree
          with the <function>ancestor-or-self</function> axis specifier
          and select every DocBook element. With the predicate
            <markup>[@xml:id = $rootid]</markup> the node set is
          filtered and only those element(s) are preserved where this
          expression is true. Only one node from the node set is
          selected.</para>
                  <para>This is done also for the target node and the result is
          saved in the variable <varname>target.div</varname>
                  </para>
               </listitem>
               <listitem>
                  <para>The two node from the previous operation are compared
          through the <function>generate-id</function> function. That
          leaves two options:</para>
                  <itemizedlist>
                     <listitem>
                        <formalpara>
                           <title>Both nodes are equal</title>
                           <para>The <tag>xref</tag> points somewhere inside the tree
                under the <parameter>rootid</parameter> element. That
                means, we can copy the <tag>xref</tag> element.</para>
                        </formalpara>
                     </listitem>
                     <listitem>
                        <formalpara>
                           <title>Both nodes are not equal</title>
                           <para>The <tag>xref</tag> points outside of the
                  <parameter>rootid</parameter> element. That means, you
                need to <quote>resolve</quote> the <tag>xref</tag>
                element to prevent validation errors.</para>
                        </formalpara>
                     </listitem>
                  </itemizedlist>
        
        
               </listitem>
               <listitem>
                  <para>If the <tag>xref</tag> needs to be revamped, we use the
            <tag>phrase</tag> element, copy all attributes (except <tag class="attribute">linkend</tag> and <tag class="attribute">xlink:href</tag>), and copy anything inside the title of
          the target node. As the target node could not be a title
          itself, we use again the <function>ancestor-or-self</function>
          axis to climb up the tree and select the first emerging
          title.</para>
               </listitem>
            </orderedlist>
    
            <remark>TODO: Add graphic to illustrate the method</remark>
    
            <!--    <programlisting language="xml" linenumbering="numbered"
>&lt;&#x21;&#x2d;&#x2d; From lib/lib.xsl &#x2d;&#x2d;>
&lt;xsl:template name="xpointer.idref">
  &lt;xsl:param name="xpointer">http://...&lt;/xsl:param>
  &lt;xsl:choose>
    &lt;xsl:when test="starts-with($xpointer, '#xpointer(id(')">
      &lt;xsl:variable name="rest"
         select="substring-after($xpointer, '#xpointer(id(')"/>
      &lt;xsl:variable name="quote" select="substring($rest, 1, 1)"/>
      &lt;xsl:value-of
         select="substring-before(substring-after($xpointer, $quote), $quote)"
        />
    &lt;/xsl:when>
    &lt;xsl:when test="starts-with($xpointer, '#')">
      &lt;xsl:value-of select="substring-after($xpointer, '#')"/>
    &lt;/xsl:when>
    &lt;&#x21;&#x2d;&#x2d; otherwise it's a pointer to some other document &#x2d;&#x2d;>
  &lt;/xsl:choose>
&lt;/xsl:template></programlisting>
-->
  </section>
         <section role="seealso">
            <title>See Also</title>
            <para>
               <xref linkend="dbc.structure.splitdb"/> uses a different
      approach without needing an ID attribute.</para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.sectX-to-section" remap="topic" userlevel="easy">
         <title>Transforming <tag>sectX</tag> Elements into <tag>section</tag> Elements</title>
         <info>
    
  </info>
  
         <section>
            <title>Problem</title>
            <para>You need to transform every <tag>sectX</tag> element into a
        <tag>section</tag> element.</para>
         </section>
         <section>
            <title>Solution</title>
            <para>This problem is solved through the following XSLT stylesheet:</para>
            <example xml:id="ex.structure.sectX-to-section">
               <title>Transforms every <tag>sectX</tag> Element into a
          <tag>section</tag> Element</title>
               <programlisting linenumbering="numbered" language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:import href="copy.xsl"/&gt;
  
  &lt;xsl:template match="d:sect1|d:sect2|d:sect3|d:sect4|d:sect5"&gt;
    &lt;xsl:element name="section" namespace="http://docbook.org/ns/docbook"&gt;
      &lt;xsl:apply-templates select="node()"/&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
         </section>
         <section>
            <title>Discussion</title>
            <para>The stylesheet from <xref linkend="ex.structure.sectX-to-section"/> is very easy: it
      imports the standard rules to copy every node from
        <filename>copy.xsl</filename> and create special rules for all
        <tag>sectX</tag> elements. As every <tag>sectX</tag> element
      creates the same structure, we can collect it in one template
      rule. </para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.section-to-sectX" remap="topic" userlevel="easy">
         <title>Transforming <tag>section</tag> Elements into <tag>sectX</tag> Elements</title>
         <info>
    
  </info>
  
         <section>
            <title>Problem</title>
            <para>You need to transform every <tag>sectX</tag> element into a
        <tag>section</tag> element.</para>
         </section>
         <section>
            <title>Solution</title>
            <para>This problem is solved through the following XSLT stylesheet:</para>
            <example xml:id="ex.structure.section-to-sectX">
               <title>Transforms every <tag>sectX</tag> Element into a
          <tag>section</tag> Element</title>
               <programlisting linenumbering="numbered" language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"&gt;
  
  &lt;xsl:import href="copy.xsl"/&gt;
  
  &lt;xsl:template match="d:section"&gt;
    &lt;xsl:variable name="level" select="count(ancestor::*)"/&gt;
    &lt;xsl:element name="sect{$level}" namespace="http://docbook.org/ns/docbook"&gt;
      &lt;xsl:copy-of select="@*"/&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
         </section>
         <section>
            <title>Discussion</title>
            <para>The above stylesheet calculates the section level with the
        <function>ancestor</function> axis, because the amount of
      elements is directly correlated with the level of the
      corresponding section. With an <emphasis xlink:href="http://www.w3.org/TR/xslt#attribute-value-templates">attribute value template</emphasis> it is
      inserted in the <tag class="attribute">name</tag>
      attribute.</para>
            <para>There is one caveat: The stylesheet does not check if the
      limit is reached. Currently (with version 5.1), DocBook supports
      levels up to 5. If you nest your <tag>section</tag> elements too
      deep, you can end up with, let's say, <tag>sect8</tag> which
      is not allowed in DocBook. To avoid making 
      mistakes, it is better to check the level:</para>
            <example xml:id="ex.structure.sectX-to-section.check">
               <title>Error Checking of Section Levels</title>
               <programlisting linenumbering="numbered" language="xml">&lt;xsl:template match="d:section"&gt;
  &lt;xsl:variable name="level" select="count(ancestor::*)"/&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$level &amp;lt;= 5"&gt;
      &lt;xsl:element name="sect{$level}"
          namespace="http://docbook.org/ns/docbook"&gt;
        &lt;xsl:copy-of select="@*"/&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/xsl:element&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:message&gt;ERROR: section &lt;xsl:value-of
          select="normalize-space(d:title)"/&gt; to deep&lt;/xsl:message&gt;
      &lt;!-- What to do if the section is too deeply nested? --&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;    
&lt;/xsl:template&gt;</programlisting>
            </example>
            <para>Amend the stylesheet when the section is too
      deeply nested (see above comment). You could avoid the section
      level (which is a bad idea) but it's better to rework the source
      document.</para>
            <para>If you want, you can stop the transformation if the section
      level is too high. Change the <tag>xsl:message</tag> as
      follows:</para>
            <programlisting language="xslt">&lt;xsl:message <emphasis role="strong">terminate="yes"</emphasis>&gt;...</programlisting>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.bridgehead-to-section" remap="topic" userlevel="hard">
         <title>Transforming <tag>bridgehead</tag> Elements into <tag>section</tag> Elements</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You have a DocBook document which contains several
      <tag>bridgehead</tag> elements. The <tag>bridgehead</tag> has to
      be transformed into the correct <tag>section</tag> structure.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>A <tag>bridgehead</tag> element is a <quote>free-floating
        heading</quote>. In most cases it is a bad idea as it is
      difficult to handle in XSLT. To create the correct section
      hierarchy, a stylesheet need to collect all nodes between a
        <tag>bridgehead</tag> element and the next one. The following
      stylesheet uses a set difference method:</para>
            <example>
               <title>Transforms every <tag>bridgehead</tag> Element into
         a <tag>section</tag> Element</title>
               <programlisting linenumbering="numbered" language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"  
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  
  &lt;xsl:import href="copy.xsl"/&gt;
  
  &lt;xsl:output indent="yes"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;
  &lt;xsl:preserve-space elements="d:screen d:programlisting d:literallayout"/&gt;
  
  &lt;xsl:template match="d:section[d:bridgehead]"&gt;
    &lt;!-- All nodes inside our section: --&gt;
    &lt;xsl:variable name="node1" select="node()"/&gt;
    &lt;!-- All nodes --&gt;
    &lt;xsl:variable name="node2" 
      select="d:bridgehead[1]|
              d:bridgehead[1]/following-sibling::node()"/&gt;
    
    &lt;!-- Copy our section with all attributes, apply the set difference
      and investigate the first bridgehead 
    --&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:copy-of select="@*"/&gt;
      &lt;xsl:apply-templates select="$node1[count(.|$node2) != count($node2)]"/&gt;
      &lt;xsl:apply-templates select="d:bridgehead[1]"/&gt;
    &lt;/xsl:copy&gt;
    &lt;xsl:text&gt;&amp;#10;&lt;/xsl:text&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="d:bridgehead"&gt;
    &lt;!-- All nodes who follow bridgeheads: --&gt;
    &lt;xsl:variable name="node1" 
      select="following-sibling::node()"/&gt;
    &lt;!-- All nodes who follow the next bridgehead including the next
         bridgehead.
         The next bridgehead element is included as we don't want it
         in the set difference:
    --&gt;
    &lt;xsl:variable name="node2"
      select="following-sibling::d:bridgehead[1]|
              following-sibling::d:bridgehead[1]/following-sibling::node()"/&gt;   

    &lt;!-- Create the section element with all attributes and apply
      standard rules for the diff set --&gt;
    &lt;xsl:element name="section"&gt;
      &lt;xsl:copy-of select="@*"/&gt;
      &lt;xsl:text&gt;&amp;#10;  &lt;/xsl:text&gt;
      &lt;xsl:element name="title"&gt;
        &lt;xsl:apply-templates select="node()"/&gt;
      &lt;/xsl:element&gt;
      &lt;xsl:apply-templates select="$node1[count(.|$node2) != count($node2)]"/&gt;
    &lt;/xsl:element&gt;
    
    &lt;!-- Process the next bridgehead --&gt;
    &lt;xsl:apply-templates select="following-sibling::d:bridgehead[1]"/&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The solution is unfortunately not very trivial in XSLT 1.0.
      The template rule <code>d:section[d:bridgehead]</code> matches
      only <tag>section</tag>s which contain one or more
        <tag>bridgehead</tag> elements.
      <!--This might speed up the stylesheet a little bit.--> The
      template rule performs the following steps:</para>
            <orderedlist>
               <listitem>
                  <para>Collect all nodes inside a <tag>section</tag> and save it
          in variable <varname>node1</varname>.</para>
               </listitem>
               <listitem>
                  <para>Collect all nodes who follows the next
            <tag>bridgehead</tag> including the next
            <tag>bridgehead</tag> itself and save it in variable
            <varname>node2</varname>.</para>
               </listitem>
               <listitem>
                  <para>Creates a <tag>section</tag> element and copy all
          attributes from the <tag>bridgehead</tag> element.</para>
               </listitem>
               <listitem>
                  <para>Creates a <tag>title</tag> element and apply the content
          from the <tag>bridgehead</tag> element. This copies the
          content from <tag>bridgehead</tag>.</para>
               </listitem>
               <listitem>
                  <para>Calculates the set difference between
            <varname>node1</varname> and <varname>node2</varname>. This
          weird expression is needed in XSLT 1.0 to create a node set
          which contains only those nodes up to the first
            <tag>bridgehead</tag>.</para>
               </listitem>
               <listitem>
                  <para>Handle the first <tag>bridgehead</tag> element which is
          covered by our <tag>bridgehead</tag> template rule.</para>
               </listitem>
            </orderedlist>
            <para>The <tag>bridgehead</tag> template rule is responsible for
      transforming the current <tag>bridgehead</tag> element into a
        <tag>section</tag>. It is also responsible for the next
        <tag>bridgehead</tag>s. The rule performs the following
      steps:</para>
            <orderedlist>
               <listitem>
                  <para>Collect all nodes following of the current
            <tag>bridgehead</tag> element and save it in variable
            <varname>node1</varname>.</para>
               </listitem>
               <listitem>
                  <para>Collect all nodes following of the next
            <tag>bridgehead</tag> element including the next
            <tag>bridgehead</tag> element itself. Save the node set in
          variable <varname>node2</varname>.</para>
               </listitem>
               <listitem>
                  <para>Creates a <tag>section</tag> element and copy all
          attributes from the <tag>bridgehead</tag> element.</para>
               </listitem>
               <listitem>
                  <para>Creates a <tag>title</tag> element and apply the content
          from the <tag>bridgehead</tag> element. This copies the
          content from <tag>bridgehead</tag>.</para>
               </listitem>
               <listitem>
                  <para>Calculate the set difference between
            <varname>node1</varname> and <varname>node2</varname> and
          apply the correct template rule (usually they are just
          copied).</para>
               </listitem>
               <listitem>
                  <para>Close the <tag>section</tag> element and handle the next
            <tag>bridgehead</tag> element.</para>
               </listitem>
            </orderedlist>
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.remove-blocks-in-para" remap="topic" userlevel="hard">
         <title>Moving Block Elements Outside of Paragraphs</title>
         <info>
            <authorgroup>
               <othercredit>
                  <personname>
                     <firstname>Jeni</firstname>
                     <surname>Tennison</surname>
                  </personname>
               </othercredit>
               <othercredit>
                  <personname>
                     <firstname>Dave</firstname>
                     <surname>Pawson</surname>
                  </personname>
                  <uri>http://www.dpawson.co.uk/xsl/sect2/N4486.html#d5509e529</uri>
               </othercredit>
            </authorgroup>    
    
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>DocBook allows to insert block elements like
      <tag>example</tag>, <tag>figure</tag>, etc. to be inserted in
      <tag>para</tag>s. This is sometimes hard to process with XSLT and
      you want to move those block elements outside of your paragraph.
      After this modification, the paragraph contains only text and
      inline elements (like <tag>simpara</tag>).</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>The solution explained</para>
            <example xml:id="ex.">
               <title>
                  <filename>move-blocks-outof-para.xsl</filename>
               </title>
               <programlisting language="xml" linenumbering="numbered">&lt;!DOCTYPE xsl:stylesheet
[
 &lt;!ENTITY dbblocks "d:address|d:bibliolist|d:blockquote|d:bridgehead|d:calloutlist|d:caution|d:classsynopsis|d:cmdsynopsis|d:constraintdef|d:constructorsynopsis|d:destructorsynopsis|d:epigraph|d:equation|d:example|d:fieldsynopsis|d:figure|d:funcsynopsis|d:glosslist|d:important|d:informalexample|d:informalfigure|d:informaltable|d:itemizedlist|d:literallayout|d:mediaobject|d:methodsynopsis|d:msgset|d:note|d:orderedlist|d:procedure|d:procedure|d:productionset|d:programlisting|d:programlistingco|d:qandaset|d:revhistory|d:screen|d:screenco|d:screenshot|d:segmentedlist|d:sidebar|d:simplelist|d:synopsis|d:table|d:task|d:tip|d:variablelist|d:warning"&gt;
 &lt;!ENTITY dbselfblocks "self::d:address|self::d:bibliolist|self::d:blockquote|self::d:bridgehead|self::d:calloutlist|self::d:caution|self::d:classsynopsis|self::d:cmdsynopsis|self::d:constraintdef|self::d:constructorsynopsis|self::d:destructorsynopsis|self::d:epigraph|self::d:equation|self::d:example|self::d:fieldsynopsis|self::d:figure|self::d:funcsynopsis|self::d:glosslist|self::d:important|self::d:informalexample|self::d:informalfigure|self::d:informaltable|self::d:itemizedlist|self::d:literallayout|self::d:mediaobject|self::d:methodsynopsis|self::d:msgset|self::d:note|self::d:orderedlist|self::d:procedure|self::d:procedure|self::d:productionset|self::d:programlisting|self::d:programlistingco|self::d:qandaset|self::d:revhistory|self::d:screen|self::d:screenco|self::d:screenshot|self::d:segmentedlist|self::d:sidebar|self::d:simplelist|self::d:synopsis|self::d:table|self::d:task|self::d:tip|self::d:variablelist|self::d:warning"&gt;
 &lt;!ENTITY dbblocksinpara "d:para/d:address|d:para/d:bibliolist|d:para/d:blockquote|d:para/d:bridgehead|d:para/d:calloutlist|d:para/d:caution|d:para/d:classsynopsis|d:para/d:cmdsynopsis|d:para/d:constraintdef|d:para/d:constructorsynopsis|d:para/d:destructorsynopsis|d:para/d:epigraph|d:para/d:equation|d:para/d:example|d:para/d:fieldsynopsis|d:para/d:figure|d:para/d:funcsynopsis|d:para/d:glosslist|d:para/d:important|d:para/d:informalexample|d:para/d:informalfigure|d:para/d:informaltable|d:para/d:itemizedlist|d:para/d:literallayout|d:para/d:mediaobject|d:para/d:methodsynopsis|d:para/d:msgset|d:para/d:note|d:para/d:orderedlist|d:para/d:procedure|d:para/d:procedure|d:para/d:productionset|d:para/d:programlisting|d:para/d:programlistingco|d:para/d:qandaset|d:para/d:revhistory|d:para/d:screen|d:para/d:screenco|d:para/d:screenshot|d:para/d:segmentedlist|d:para/d:sidebar|d:para/d:simplelist|d:para/d:synopsis|d:para/d:table|d:para/d:task|d:para/d:tip|d:para/d:variablelist|d:para/d:warning"&gt;
]&gt;
&lt;xsl:stylesheet xmlns:d="http://docbook.org/ns/docbook"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

  &lt;xsl:import href="copy.xsl"/&gt;

  &lt;xsl:strip-space elements="d:para"/&gt;
  &lt;xsl:preserve-space elements="d:screen d:programlisting d:literallayout"/&gt;
  &lt;xsl:output indent="yes"/&gt;

  &lt;xsl:template match="d:para"&gt;
    &lt;xsl:apply-templates select="node()[1]"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="&amp;dbblocksinpara;"&gt;
    &lt;xsl:copy-of select="."/&gt;
    &lt;xsl:text&gt;&amp;#10;&lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="following-sibling::node()[1]"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="d:para/*|d:para/text()"&gt;
    &lt;xsl:element name="{local-name(..)}"&gt;
      &lt;xsl:apply-templates select="." mode="copy"/&gt;
    &lt;/xsl:element&gt;
    &lt;xsl:text&gt;&amp;#10;&lt;/xsl:text&gt;
    &lt;xsl:apply-templates
      select="following-sibling::*[&amp;dbselfblocks;][1]"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="d:para/*|d:para/text()" mode="copy"&gt;
    &lt;xsl:copy-of select="."/&gt;
    &lt;xsl:if test="not(following-sibling::node()[1][&amp;dbselfblocks;])"&gt;
      &lt;xsl:apply-templates select="following-sibling::node()[1]"
        mode="copy"/&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>Some discussion about problem and solution.</para>
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.adding-indexterms" remap="topic" userlevel="medium">
         <title>Adding Index Entries (Semi-)Automatically</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to add index entries (also known as
        <tag>indexterm</tag>s) automatically into your document. </para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>To see how the automatic addition works, the following
      procedure demonstrate this for the element
      <tag>envar</tag>.</para>
    
            <procedure>
               <title>Adding <tag>indexterm</tag> Elements to <tag>envar</tag>
               </title>
               <step>
                  <para>Use the element <tag>envar</tag> in your document as
          usual. By default all <tag>envar</tag> elements get an
            <tag>indexterm</tag>. In cases you do not want this, add the
          attribute <tag class="attribute">condition</tag> with its
          value <tag class="attvalue">noindex</tag> to suppress
          indexterm generation. This is done in the second
            <tag>para</tag> element:</para>
                  <example xml:id="ex.profile-envar.xml">
                     <title>
                        <filename>profile-envar.xml</filename>
                     </title>
                     <programlisting language="xml" linenumbering="numbered">&lt;article  version="5.0"
  xmlns="http://docbook.org/ns/docbook"&gt;
  &lt;title&gt;Profiling Test&lt;/title&gt;
  &lt;para&gt;Environment variable &lt;envar&gt;XML_CATALOG_FILES&lt;/envar&gt;&lt;/para&gt;
  &lt;para&gt;Environment variable &lt;envar condition="noindex"&gt;FOO&lt;/envar&gt;&lt;/para&gt;
  &lt;para&gt;Environment variable &lt;envar os="windows"&gt;Path&lt;/envar&gt;&lt;envar 
    os="linux"&gt;PATH&lt;/envar&gt;&lt;/para&gt;
&lt;/article&gt;
</programlisting>
                  </example>
               </step>
               <step>
                  <para>Create a stylesheet <filename>profile-tags.xsl</filename>
        with the following content:</para>
                  <example xml:id="ex.profile-tag.xsl">
                     <title>
                        <filename>profile-tag.xsl</filename>
                     </title>
                     <programlisting language="xml" linenumbering="numbered">&lt;xsl:stylesheet version="1.0"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  
&lt;xsl:param name="preferred"&gt;pref&lt;/xsl:param&gt;

&lt;xsl:template name="check.index"&gt;
  &lt;xsl:param name="node" select="."/&gt;
  &lt;xsl:param name="default" select="1"/&gt;
    
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$node/@condition = 'noindex'"&gt;0&lt;/xsl:when&gt;
      &lt;xsl:when test="$node/@condition = 'index'"&gt;1&lt;/xsl:when&gt;    
      &lt;xsl:otherwise&gt;&lt;xsl:value-of select="$default"/&gt;&lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;  
&lt;/xsl:template&gt;

&lt;xsl:template match="d:footnote|d:title|d:indexterm" mode="profile"&gt;
  &lt;!-- Indexterms doesn't/shouldn't occur in the descendants of
       these elements so just copy it --&gt;
  &lt;xsl:copy-of select="."/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="d:envar" mode="profile"&gt;
    &lt;xsl:variable name="do.index"&gt;
      &lt;xsl:call-template name="check.index"/&gt;
    &lt;/xsl:variable&gt;

    &lt;!-- Copy original element --&gt;
    &lt;xsl:copy-of select="."/&gt;
  
    &lt;xsl:if test="$do.index != 0"&gt;
      &lt;indexterm&gt;
        &lt;primary&gt;&lt;xsl:value-of select="."/&gt;&lt;/primary&gt;
      &lt;/indexterm&gt;
      &lt;indexterm&gt;
        &lt;xsl:if test="contains(@conformance, $preferred)"&gt;
           &lt;xsl:attribute name="significance"&gt;preferred&lt;/xsl:attribute&gt;
        &lt;/xsl:if&gt;
        &lt;primary&gt;environment variables&lt;/primary&gt;
        &lt;secondary&gt;&lt;xsl:value-of select="."/&gt;&lt;/secondary&gt;
      &lt;/indexterm&gt;
    &lt;/xsl:if&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
                  </example>
               </step>
               <step>
                  <para>Create the stylesheet
            <filename>add-indexterms.xsl</filename>. This stylesheet is
          based on <filename>profile.xsl</filename> of the DocBook XSL
          stylesheets. It contains the special mode
            <literal>profile</literal> to process elements to observe
          profiling conditions.</para>
                  <example>
                     <title>
                        <filename>add-indexterms.xsl</filename>
                     </title>
                     <programlisting language="xml" linenumbering="numbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE xsl:stylesheet
[
  &lt;!ENTITY db "http://docbook.sourceforge.net/release/xsl-ns/current"&gt; 
]&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" &gt;

&lt;xsl:import href="&amp;db;/profiling/profile.xsl"/&gt;
&lt;xsl:output indent="yes" method="xml"/&gt;
&lt;xsl:include href="profile-tags.xsl"/&gt;

&lt;/xsl:stylesheet&gt;
</programlisting>
                  </example>
               </step>
               <step>
                  <para>Transform your document:</para>
                  <screen>
                     <command>xsltproc</command> add-indexterms.xsl profile-envar.xml</screen>
               </step>
            </procedure>
    
            <para>After applying the stylesheet
        <filename>add-indexterms.xsl</filename> you will get the
      following output:</para>
            <example>
               <title>Output of the Transformation</title>
               <programlisting language="xml">&lt;article xmlns="http://docbook.org/ns/docbook" version="5.0"&gt;
  &lt;title&gt;Profiling Test&lt;/title&gt;
  &lt;para&gt;Environment variable &lt;envar&gt;XML_CATALOG_FILES&lt;/envar&gt;&lt;indexterm&gt;
    &lt;primary&gt;XML_CATALOG_FILES&lt;/primary&gt;
  &lt;/indexterm&gt;&lt;indexterm&gt;
    &lt;primary&gt;environment variables&lt;/primary&gt;
    &lt;secondary&gt;XML_CATALOG_FILES&lt;/secondary&gt;
    &lt;/indexterm&gt;&lt;/para&gt;
  &lt;para&gt;Environment variable &lt;envar condition="noindex"&gt;FOO&lt;/envar&gt;&lt;/para&gt;
  &lt;para&gt;Environment variable &lt;envar os="windows"
        &gt;Path&lt;/envar&gt;&lt;indexterm&gt;&lt;primary&gt;Path&lt;/primary&gt;&lt;/indexterm&gt;&lt;indexterm&gt;&lt;primary&gt;environment
        variables&lt;/primary&gt;&lt;secondary&gt;Path&lt;/secondary&gt;&lt;/indexterm&gt;&lt;envar
      os="linux"
      &gt;PATH&lt;/envar&gt;&lt;indexterm&gt;
        &lt;primary&gt;PATH&lt;/primary&gt;
      &lt;/indexterm&gt;&lt;indexterm&gt;
        &lt;primary&gt;environment variables&lt;/primary&gt;
        &lt;secondary&gt;PATH&lt;/secondary&gt;
      &lt;/indexterm&gt;&lt;/para&gt;
&lt;/article&gt;
</programlisting>
            </example>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>Let´s go back at the beginning first. Assume you want to show
      an environment variable in the index. Usually you would mark up
      the text with the <tag>envar</tag> element and add an
        <tag>indexterm</tag> right after the first one. As is is useful
      to find the index term also under the primary term
        <quote>environment variables</quote>, you add an additional
        <tag>indexterm</tag>. This could look like this:</para>
            <programlisting language="xml">&lt;para&gt;Use the &lt;envar&gt;PATH&lt;/envar&gt;&lt;indexterm&gt;
        &lt;primary&gt;PATH&lt;/primary&gt;
      &lt;/indexterm&gt;&lt;indexterm&gt;
        &lt;primary&gt;environment variables&lt;/primary&gt;
        &lt;secondary&gt;PATH&lt;/secondary&gt;
      &lt;/indexterm&gt;
      to do ...
&lt;/para&gt;</programlisting>
            <para>Although this is the usual method, it has some
      drawbacks:</para>
            <itemizedlist>
               <listitem>
                  <formalpara>
                     <title>It is hard to read</title>
                     <para>If you are get used to read the bare XML code, it is
            hard to read as the text is broken into pieces. The text is
            cluttered with <tag>indexterm</tag> elements all
            along.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>It may be inconsistent</title>
                     <para>If you forgot the <quote>s</quote> in the primary index
            term it will lead to double entries (one singular and one
            plural form). This lead to inconsistencies. It can be
            painful if you have to go through the complete document just
            to fix the singular form into the plural form (or vice
            versa).</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Whitespace could matter</title>
                     <para>The <tag>indexterm</tag> element(s) start
              <emphasis>directly</emphasis> after your term. If you or
            your editor introduces one or more whitespaces after your
            dedicated index term, in the worst case it could lead to a
            wrong page number in the index. This mainly affects the PDF
            rather than any online formats but could confuse your
            readers.</para>
                  </formalpara>
               </listitem>
            </itemizedlist>
    
            <para>All of the above problems can be solved with the stylesheet
      from <xref linkend="ex.profile-tag.xsl"/>. It exploits the DocBook
      XSL stylesheet´s profiling mechanism. Normally, profiling is a
      method to <emphasis>remove</emphasis> certain structures from a
      document rather than <emphasis>add</emphasis> something. In our
      case we use the special <literal>profile</literal> mode to
      customize the automatic index term addition.</para>
            <para>With the above stylesheet, it is possible to influence how
      your index terms appear. This is done with the
      <tag class="attribute">condition</tag>
               <footnote>
                  <para>Theoretically you could use any of the several common
          attributes available on every DocBook element. The <tag class="attribute">condition</tag> was the one attribute 
          that has fitted the best in the authors mind.</para>
               </footnote> attribute, demonstrated on our <tag>envar</tag>
      example:</para>
            <variablelist>
               <varlistentry>
                  <term>
                     <tag class="starttag">envar</tag>…<tag class="endtag">envar</tag>
                  </term>
                  <listitem>
                     <para>Adds the <tag>indexterm</tag>s directly after the
            <tag>envar</tag> element.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <tag class="starttag">envar condition="index"</tag>…<tag class="endtag">envar</tag>
                  </term>
                  <listitem>
                     <para>Same as the previous entry.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <tag class="starttag">envar condition="noindex"</tag>…<tag class="endtag">envar</tag>
                  </term>
                  <listitem>
                     <para>Suppresses any automatic generation of index entries.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <tag class="starttag">envar condition="pref"</tag>…<tag class="endtag">envar</tag>
                  </term>
                  <listitem>
                     <para>Adds an <emphasis>preferred</emphasis> index entry. The
            keyword <quote>pref</quote> can be customized through the 
            <parameter>preferred</parameter> parameter. If the keyword
            is added in the <tag class="attribute">condition</tag>
            attribute, the following code is created:</para>
                     <programlisting language="xml">&lt;indexterm significance="preferred"&gt;...&lt;/indexterm&gt;</programlisting>
                  </listitem>
               </varlistentry>
            </variablelist>
        
            <para>This method can not solve all index problems. You should know
      some of its limits:</para>
    
            <itemizedlist>
               <listitem>
                  <formalpara>
                     <title>Document Type</title>
                     <para>Technical documents are more applicable than novels as
            the former contains usually a set of elements which are
            consistently used. </para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Consistent Elements</title>
                     <para>The document needs not only consistently use the same
            elements for the same structure, it has to use a specific
            element in the first place. For example, if you want to show
            your configuration files in your index, you need to mark
            it up with <tag>filename</tag>, otherwise this method has no
            chance.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Needed Elements</title>
                     <para>Similar to the previous point, you have to know which
            elements you need to show up in the index. You have to
            select from all possible inline elements only a handful
            which you consider important enough.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Only for Inline Elements</title>
                     <para>This method works only for inline elements well.
            DocBook´s inline elements occur usually inside a paragraph
            but can also show up in a title.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Hard-coded Primary Entry</title>
                     <para>It can be critized to add hard-coded text into the
            stylesheet <filename>profile-tag.xsl</filename> (here:
            <quote>environment variables</quote>). If you maintain 
            different languages, you should replace it with a more
            general solution and move the language specific text into
            language files as described in <xref linkend="dbc.common.l10n"/>.</para>
                  </formalpara>
               </listitem>
            </itemizedlist>
     
            <para>Although this method does not replace hand-written index
      entries, it can ease the pain. Especially for those entries which
      can be be inserted automatically it improves consistency. The
      method described above can also implemented for other inline
      elements, like persons, functions, etc.</para>
    
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.structure.revision-list" remap="topic" userlevel="medium">
         <title>Including Revision Information from Version Control Systems</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to include revision information into your DocBook
      document from your version control systems, like Bazaar, Subversion,
      Mercurial, Git, and others.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Usually, the solution for each version control system is to
      output its log into its specific XML output and transform it with
      XSLT into a <tag>revhistory</tag> element. </para>
    
            <section xml:id="sec.structure.revision-list.bazaar">
               <title>Bazaar</title>
               <para>
                  <application xlink:href="http://bazaar.canonical.com">Bazaar</application>
        does not come with a predefined XML output. If you need this
        functionality, you have to install the
        <package>xmloutput</package> plugin first. This brings the
        <option>--xml</option> option to the <command>log</command>
        subcommand. Proceed as follows:</para>
               <procedure>
                  <title>Installing the Bazaar Plugin xmloutput</title>
                  <step>
                     <para>Download the tar archive from <link xlink:href="http://wiki.bazaar.canonical.com/XMLOutput"/>.</para>
                  </step>
                  <step>
                     <para>Unpack the archive.</para>
                  </step>
                  <step>
                     <para>Change to the extension directory (usually something
            like
            <filename>bzr-xmloutput-<replaceable>VERSION</replaceable>
                        </filename>)
            and run:</para>
                     <screen>
                        <command>python</command> setup build_ext</screen>
                  </step>
                  <step>
                     <para>Copy the result directory <filename class="directory">build/lib/bzrlib/plugins/xmloutput/</filename> to your
            plugin directory. For Linux it is something like <filename class="directory">$HOME/.bazaar/plugins/</filename>, for
            Windows copy it to <filename class="directory">$APPDATA/bazaar/<replaceable>VERSION</replaceable>/plugins</filename>
                     </para>
                  </step>
                  <step>
                     <para>Check if the plugin is correctly detected:</para>
                     <screen>
                        <command>bzr</command> plugins</screen>
                     <para>You should see the following line:</para>
                     <screen>xmloutput <replaceable>VERSION</replaceable>
    This plugin adds an option (--xml) to log and provides an xml version of 
    some built-in commands.</screen>
                  </step>
               </procedure>
               <para>After you have successully installed the plugin, create the 
        log output in XML with the following command:</para>
               <screen>
                  <command>bzr</command> log --xml <replaceable>REPO</replaceable> &gt; bzr-log.xml</screen>
               <para>To convert the previous log file into DocBook's
        <tag>revhistory</tag>, use the following stylesheet:</para>
               <example>
                  <title>Stylesheet to Convert Bazaar's Log File</title>
                  <programlisting>TBD</programlisting>
               </example>
            </section>
            <section xml:id="sec.structure.revision-list.git">
               <title>Git</title>
               <para>
                  <application xlink:href="http://git-scm.com">Git</application> does not have any options to turn the log
        into XML. However, with the <option>--pretty</option> option you
        can collect the information and wrap it into any XML elements
        you wish. The following command uses this option and
          <command>sed</command> to insert the <tag class="starttag">logs</tag> start tag in the first line and <tag class="endtag">logs</tag> end tag in the last line:</para>
               <screen>
                  <command>git</command> log --date=iso<!--
       --> --pretty=format:"&lt;logentry revision='%h'&gt;%n<!--
        --> &lt;author email='%ae'&gt;%an&lt;/author&gt;%n<!--
        --> &lt;date&gt;%ad&lt;/date&gt;%n<!-- 
        --> &lt;msg xml:space='preserve'&gt;%s&lt;/msg&gt;%n<!-- 
        -->&lt;/logentry&gt;" \
  | sed -e '1i&lt;logs&gt;' -e '$a&lt;/logs&gt;' &gt; git-log.xml</screen>
               <para>As the element names can be freely chosen, we use the same
        names as in <xref linkend="ex.mercurial-logfile"/>. This allows
        us to use the stylesheet from <xref linkend="ex.hg2revhistory.xsl"/>. </para>
            </section>
            <section xml:id="sec.structure.revision-list.mercurial">
               <title>Mercurial</title>
               <para>
                  <application xlink:href="http://mercurial.selenic.com">Mercurial</application>
        has the <option>--style</option> option to output its log into
        XML:</para>
               <screen>
                  <command>hg</command> log --style xml &gt; hg-log.xml</screen>
               <para>The XML file of the Mercurial log looks like this:</para>
               <example xml:id="ex.mercurial-logfile">
                  <title>Mercurial Log File in XML</title>
                  <programlisting linenumbering="numbered" language="xml">&lt;log&gt;
  &lt;logentry revision="69"
    node="dfadd024594c4083362fe6919264362803dcd285"&gt;
    &lt;tag&gt;tip&lt;/tag&gt;
    &lt;author email="tux@example.de"&gt;Tux Penguin&lt;/author&gt;
    &lt;date&gt;2011-05-22T01:56:21+02:00&lt;/date&gt;
    &lt;msg xml:space="preserve"&gt;Corrected xml:id attribute&lt;/msg&gt;
    &lt;paths&gt;
      &lt;path action="M"&gt;xml/structure/topic.extract-element.xml&lt;/path&gt;
    &lt;/paths&gt;
  &lt;/logentry&gt;
  &lt;logentry revision="68"
    node="833287df8943d0bab5ec65ec8aafe5bc42002289"&gt;
    &lt;author email="wilber@example.de"&gt;Wilber Gimp&lt;/author&gt;
    &lt;date&gt;2011-05-22T01:56:03+02:00&lt;/date&gt;
    &lt;msg xml:space="preserve"&gt;Changed chapter title&lt;/msg&gt;
    &lt;paths&gt;
      &lt;path action="M"&gt;xml/structure/topic.revision-list.xml&lt;/path&gt;
    &lt;/paths&gt;
  &lt;/logentry&gt;
  &lt;!-- Many more entries ... --&gt;
&lt;/log</programlisting>
               </example>
               <para>The following stylesheet converts the log file from <xref linkend="ex.mercurial-logfile"/> into DocBook's
        <tag>revhistory</tag>:</para>
               <example xml:id="ex.hg2revhistory.xsl">
                  <title>Stylesheet <filename>hg2revhistory.xsl</filename> to Convert
          Mercurial XML Log Files into  DocBook's <tag>revhistory</tag>
                  </title>
                  <programlisting linenumbering="numbered" language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE xsl:stylesheet
[
  &lt;!ENTITY dbns "http://docbook.org/ns/docbook"&gt;
]&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  
  &lt;xsl:output method="xml" indent="yes"/&gt;
  
  &lt;xsl:param name="include.paths" select="1"/&gt;
  &lt;xsl:param name="include.copies" select="1"/&gt;
  
  &lt;xsl:template match="log"&gt;
    &lt;revhistory xmlns="&amp;dbns;"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/revhistory&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="logentry"&gt;
    &lt;revhistory xmlns="&amp;dbns;"&gt;
      &lt;xsl:apply-templates select="@revision|*"/&gt;
    &lt;/revhistory&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="logentry/@revision"&gt;
    &lt;revnumber xmlns="&amp;dbns;"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/revnumber&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="tag"&gt;
    &lt;revremark xmlns="&amp;dbns;"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/revremark&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="date"&gt;
    &lt;date xmlns="&amp;dbns;"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/date&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="author"&gt;
    &lt;xsl:variable name="firstname" select="substring-before(., ' ')"/&gt;
    &lt;xsl:variable name="surname" select="substring-after(., ' ')"/&gt;
    &lt;author xmlns="&amp;dbns;"&gt;
      &lt;personname&gt;
        &lt;firstname&gt;&lt;xsl:value-of select="$firstname"/&gt;&lt;/firstname&gt;
        &lt;!--&lt;othername&gt;&lt;/othername&gt;--&gt;
        &lt;surname&gt;&lt;xsl:value-of select="$surname"/&gt;&lt;/surname&gt;
      &lt;/personname&gt;
      &lt;email&gt;&lt;xsl:value-of select="@email"/&gt;&lt;/email&gt;
    &lt;/author&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="msg"&gt;
    &lt;revdescription xmlns="&amp;dbns;"&gt;
      &lt;para&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/para&gt;
    &lt;/revdescription&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="paths"&gt;
    &lt;xsl:if test="$include.paths != 0"&gt;
      &lt;itemizedlist xmlns="&amp;dbns;"&gt;
        &lt;title&gt;Paths&lt;/title&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/itemizedlist&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="path"&gt;
    &lt;listitem xmlns="&amp;dbns;"&gt;
      &lt;para&gt;
        &lt;xsl:apply-templates select="@action|text()"/&gt;
      &lt;/para&gt;
    &lt;/listitem&gt;    
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="path/@action"&gt;
    &lt;xsl:text&gt;[&lt;/xsl:text&gt;
    &lt;xsl:value-of select="."/&gt;
    &lt;xsl:text&gt;] &lt;/xsl:text&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="path/text()"&gt;
    &lt;filename xmlns="&amp;dbns;"&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/filename&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="copyies"&gt;
    &lt;xsl:if test="$include.paths != 0"&gt;
      &lt;listitem xmlns="&amp;dbns;"&gt;
        &lt;title&gt;Copies&lt;/title&gt;
        &lt;para&gt;
          &lt;xsl:apply-templates select="@*|text()"/&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="copy"&gt;
    &lt;listitem xmlns="&amp;dbns;"&gt;
      &lt;para&gt;
        &lt;xsl:apply-templates select="@*|text()"/&gt;
      &lt;/para&gt;
    &lt;/listitem&gt;    
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="copy/@source"&gt;
    &lt;filename xmlns="&amp;dbns;"&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/filename&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="copy/text()"&gt;
    &lt;xsl:text&gt; -&gt; &lt;/xsl:text&gt;
    &lt;filename xmlns="&amp;dbns;"&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/filename&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;
</programlisting>
               </example>
            </section>
            <section xml:id="sec.structure.revision-list.svn">
               <title>Subversion</title>
               <para>
                  <application xlink:href="http://subversion.tigris.org">Subversion</application>
        is similar to Mercurial: It has an
        <option>--xml</option> option to turn the log output into XML:</para>
               <screen>
                  <command>svn</command> log --xml &gt; svn-log.xml</screen>
               <para>With the <option>-v</option> option (verbose) you get
        additional path information. As the output is very similar to
        Mercurial, you can apply the stylesheet shown in <xref linkend="ex.hg2revhistory.xsl"/>
        also for Subversion's log file.
      </para>
               <para>As an alternative, the DocBook Subversion repository (see
          <link xlink:href="https://docbook.svn.sourceforge.net/svnroot/docbook/trunk"/>) contains the XSLT stylesheet
          <filename>releasetools/svnlog2docbook.xsl</filename> with
        additional features.</para>
            </section>    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>
               <remark>TBD</remark>
            </para>
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--<xi:include href="structure/topic.preserve-entities.xml"/>-->
  <!--<xi:include href="structure/topic.impl-style-checking.xml"/>-->
</chapter> 
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><chapter xml:id="dbc.fo" version="5.1">
      <title>Print Customizations</title>
      <info>
    
         <biblioid class="other" otherclass="ticket">22</biblioid>
         <abstract>
            <para>The DocBook XSL stylesheets has got more than 200 parameters
      which can customize some aspects of the layout very easily. This
      chapter shows you to go beyond simple parameter change.</para>
         </abstract>
      </info>

      <section xml:id="dbc.fo.intro">
         <title>Introduction</title>
         <para>
            <remark>TBD</remark>
         </para>
      </section>
      <!-- 
  Print Customizations
    - Designing Pages for Novels
    - Designing Pages for Lexicons, Referene Book and Catalogs
    - Designing Pages for Magazines and News Papers
    - Designing Pages for Technical Books
    - Adapting Chapter and Sections Titles
    - Make Font Sizes Consistent
    - Index
    - Hyphenating URLs
    - Designing TOCs
    - Colorizing Table Rows
    - Adding Logos in Title Page
    - Adding Logos in Header or Footer
    - Adding Current Time and Date Information
    - Separating Chapter Number from Titel
    - Footnotes
    - Marginalia
    - Endnotes
    - Adorning Paragraphs with Initials (Openings)
    - Formatting Titles
    - Numbering Titles
    - Choosing Open Source Fonts
    - Standardizing Font Sizes (Le Corbusier)
    - Adding Change Bars
    - Initials/Drop Caps
    - Influence Leading in Flow Text (=line-height in paras)
    - Hyphenating in Verbatim Environments (long lines in screen, programlisting)
    - Showing Cropmarks
      http://svn.apache.org/viewvc/xmlgraphics/fop/trunk/examples/fo/advanced/bleed-and-crop-marks.fo?view=markup&pathrev=800143
    - Barcode
    - Add Typographical Superiors and Inferiors
    - Adding Fonts to FO Formatter
    - Creating Page Definitions with Inkscape
    - Styling Labels Differently than Titles (Separating Labels and
      Titles) 
    - Using Text Figures http://en.wikipedia.org/wiki/Text_figures
    - Using MathML in Formulas
    - Influencing the TOC Bookmark Levels in PDF
  -->
  
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.fo.cover" remap="topic" userlevel="medium">
         <title>Designing a Title Page</title>
         <info>
    
            <keywordset>
               <keyword>title page</keyword>
               <keyword>cover</keyword>
               <keyword>recto page</keyword>
               <keyword>verso page</keyword>
               <keyword>title page template</keyword>
            </keywordset>
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to design a title page of your book or
      article.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>To design your title page there are two ways to do it,
      regardless if it is a book or an article:</para>
            <orderedlist>
               <listitem>
                  <formalpara>
                     <title>Indirectly</title>
                     <para>Write a title page template which contains the wanted
            elements in their respective order.</para>
                  </formalpara>
               </listitem>
               <listitem>
                  <formalpara>
                     <title>Directly</title>
                     <para>Customize the specific named templates.</para>
                  </formalpara>
               </listitem>
            </orderedlist>
            <para>Both methods are shown below. Although the following
      descriptions focus on a book title page, the same procedure can be
      applied for an article title page as well.</para>
            <para>For this example, we use the following requisites:</para>
    
            <itemizedlist xml:id="li.fo.cover.rectopage.defs">
               <title>Recto (Right) Page</title>
               <para>This is the <quote>main page</quote> and the content appears
      in the following order:</para>
               <listitem>
                  <para>the book title, from <code>/book/title</code> or
            <code>/book/info/title</code>
                  </para>
               </listitem>
               <listitem>
                  <para>the book subtitle, from <code>/book/subtitle</code> or
            <code>/book/info/subtitle</code>
                  </para>
               </listitem>
               <listitem>
                  <para>the book's author, from
          <code>/book/info/author</code>
                  </para>
               </listitem>
               <listitem>
                  <para>the edition, from <code>/book/info/edition</code>
                  </para>
               </listitem>
            </itemizedlist>
            <itemizedlist xml:id="li.fo.cover.versopage.defs">
               <title>Verso (Left) Page</title>
               <para>This usually holds the imprint and the content appears
      in the following order:</para>
               <listitem>
                  <para>the book's title and subtitle in a smaller font
          size</para>
               </listitem>
               <listitem>
                  <para>the author, from <code>/book/info/author</code>
                  </para>
               </listitem>
               <listitem>
                  <para>the edition, from <code>/book/info/edition</code>
                  </para>
               </listitem>
               <listitem>
                  <para>some legal text (copyright), from
            <code>/book/info/legalnotice</code>
                  </para>
               </listitem>
               <listitem>
                  <para>the <acronym>ISBN<alt>International Standard Book Number</alt>
                     </acronym>, from
            <code>/book/info/biblioid</code> with <tag class="attribute">class</tag> and the value <tag class="attvalue">isbn</tag>
                  </para>
               </listitem>
            </itemizedlist>
    
            <section xml:id="dbc.fo.cover.titlepage.indirectly">
               <title>Using Title Page Templates</title>
               <para>To create a title page using a title page template proceed
        as follows:</para>
               <procedure>
                  <step>
                     <para>Prepare the title page template:</para>
                     <substeps>
                        <step>
                           <para>Copy the file
                <filename>fo/titlepage.templates.xml</filename> from the
                DocBook XSL stylesheet distribution to a directory where
                all your FO customization is stored. Use the filename
                <filename>booktitlepage.xml</filename> so we know, it
                contains only a title page for a book.</para>
                        </step>
                        <step>
                           <para>Open the file <filename>booktitlepage.xml</filename>
                and remove anything except the
                root and <tag>t:titlepage</tag> elements with the
                attribute <tag class="attribute">t:element="book"</tag>.
                Your title page template should look like this:</para>
                           <programlisting language="xml">&lt;!DOCTYPE t:templates [
&lt;!ENTITY hsize0 "10pt"&gt;
&lt;!ENTITY hsize1 "12pt"&gt;
&lt;!ENTITY hsize2 "14.4pt"&gt;
&lt;!ENTITY hsize3 "17.28pt"&gt;
&lt;!ENTITY hsize4 "20.736pt"&gt;
&lt;!ENTITY hsize5 "24.8832pt"&gt;
&lt;!ENTITY hsize0space "7.5pt"&gt; &lt;!-- 0.75 * hsize0 --&gt;
&lt;!ENTITY hsize1space "9pt"&gt; &lt;!-- 0.75 * hsize1 --&gt;
&lt;!ENTITY hsize2space "10.8pt"&gt; &lt;!-- 0.75 * hsize2 --&gt;
&lt;!ENTITY hsize3space "12.96pt"&gt; &lt;!-- 0.75 * hsize3 --&gt;
&lt;!ENTITY hsize4space "15.552pt"&gt; &lt;!-- 0.75 * hsize4 --&gt;
&lt;!ENTITY hsize5space "18.6624pt"&gt; &lt;!-- 0.75 * hsize5 --&gt;
]&gt;
&lt;t:templates xmlns:t="http://nwalsh.com/docbook/xsl/template/1.0"
             xmlns:param="http://nwalsh.com/docbook/xsl/template/1.0/param"
             xmlns:fo="http://www.w3.org/1999/XSL/Format"
             xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;t:titlepage t:element="book" t:wrapper="fo:block"&gt;
     &lt;!-- Content disabled for better legibility --&gt;
   &lt;/t:titlepage&gt;
&lt;/t:templates&gt;</programlisting>
                        </step>
                     </substeps>
                  </step>
                  <step>
                     <para>Customize the content of your titlepage and save your
            changes into the <filename>booktitlepage.xml</filename>
            file.</para>
                     <substeps>
                        <step>
                           <para>Change the recto page and locate the
                  <tag>t:titlepage-content</tag> element with its
                attribute <tag>t:side="recto"</tag>. As definied in
                  <xref linkend="li.fo.cover.rectopage.defs"/>, we
                remove everything what is not needed. Additionally we
                have to output edition, which we get from an empty <tag class="emptytag">edition</tag> tag. The content of the
                  <tag>t:titlepage-content</tag> should look like
                this:</para>
                           <programlisting language="xml">&lt;t:titlepage-content t:side="recto"&gt;
  &lt;title     t:named-template="division.title"
             param:node="ancestor-or-self::book[1]"
             text-align="center"
             font-size="&amp;hsize5;"
             space-before="&amp;hsize5space;"
             font-weight="bold"
             font-family="{$title.fontset}"/&gt;
  &lt;subtitle  text-align="center"
             font-size="&amp;hsize4;"
             space-before="&amp;hsize4space;"
             font-family="{$title.fontset}"/&gt;
  &lt;author    font-size="&amp;hsize3;"
             space-before="&amp;hsize2space;"
             keep-with-next.within-column="always"/&gt;
  &lt;edition   font-size="&amp;hsize3;"/&gt;
&lt;/t:titlepage-content&gt;</programlisting>
                        </step>
                        <step>
                           <para>Change the verso page and locate the
                  <tag>t:titlepage-content</tag> element with its
                attribute <tag>t:side="verso"</tag>. As definied in
                  <xref linkend="li.fo.cover.versopage.defs"/>, again,
                we remove everything what is not needed. The content of
                the <tag>t:titlepage-content</tag> should look like
                this: </para>
                           <programlisting language="xml">&lt;t:titlepage-content t:side="verso"&gt;
  &lt;title     t:named-template="book.verso.title"
             font-size="&amp;hsize2;"
             font-weight="bold"
             font-family="{$title.fontset}"/&gt;
  &lt;subtitle  t:named-template="book.verso.title"
             font-size="&amp;hsize2;"
             font-weight="bold"
             font-family="{$title.fontset}"/&gt;
  &lt;author/&gt;
  &lt;edition/&gt;
  &lt;legalnotice/&gt;
  &lt;biblioid  t:predicate="[@class = 'isbn']"/&gt;
&lt;/t:titlepage-content&gt;</programlisting>
                        </step>
                        <step>
                           <para>Leave the other elements
                  (<tag>t:titlepage-separator</tag> and
                  <tag>t:titlepage-before</tag>) as they are.</para>
                        </step>
                     </substeps>
                  </step>
                  <step>
                     <para>Use the <filename>template/titlepage.xsl</filename>
            stylesheet from the DocBook XSL distribution to transform
            your <filename>booktitlepage.xml</filename> title page
            definition to create the
              <filename>booktitlepage.xsl</filename> output:</para>
                     <screen>
                        <command>xsltproc</command> --output booktitlepage.xsl template/titlepage.xsl booktitlepage.xml</screen>
                  </step>
                  <step>
                     <para>Insert the constructed
            <filename>booktitlepage.xsl</filename> into your
            customization layer <filename>mybooktitlepage.xsl</filename>:</para>
                     <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:fo="http://www.w3.org/1999/XSL/Format"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  
  &lt;xsl:import href="http://docbook.sourceforge.net/release/xsl-ns/current/fo/docbook.xsl"/&gt;
  &lt;xsl:include href="booktitlepage.xsl"/&gt;
  &lt;!-- More customizations hidden --&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
                  </step>
                  <step>
                     <para>Build your book as usual with your customization layer.</para>
                  </step>
               </procedure>
            </section>
            <section xml:id="dbc.fo.cover.titlepage.directly">
               <title>Customizing Title Pages Directly</title>
               <para>The DocBook XSL stylesheets use named templates to generate
        a title page. For a book title page, the named templates are
        called in the following order, starting with
        <function>book.titlepage</function>:</para>
               <screen linenumbering="unnumbered">book.titlepage
  book.titlepage.before.recto
  book.titlepage.recto
  book.titlepage.before.verso
  book.titlepage.verso
  book.titlepage.separator</screen>
               <para>This partitioning makes it easy to just only the affected
        named template. As we only need the default, we do not change
         <function>book.titlepage.before.recto</function>,
          <function>book.titlepage.separator</function>, and
          <function>book.titlepage.before.verso</function>.
      </para>
      
            </section>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>There are several reasons to customize the title page of your
    book:</para>
            <itemizedlist>
               <listitem>
                  <para>You want a different order of the default elements</para>
               </listitem>
               <listitem>
                  <para>You want to show or hide elements</para>
               </listitem>
               <listitem>
                  <para>You want to insert corporate logos, links, or other
          graphical illustrations</para>
               </listitem>
               <listitem>
                  <para>You want to distinguish between a document in draft or in
          final state.</para>
               </listitem>
            </itemizedlist>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>
               <link xlink:href="http://www.sagehill.net/docbookxsl/HTMLTitlePage.html"/>
            </para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.fo.line-height" remap="topic" userlevel="easy">
         <title>Influencing the Leading</title>
         <info>
    
            <keywordset>
               <keyword>line height</keyword>
               <keyword>leading</keyword>
               <keyword>half-leading</keyword>
               <keyword>font size</keyword>
            </keywordset>
            <othercredit>
               <personname>
                  <firstname>Tony</firstname>
                  <surname>Graham</surname>
               </personname>
            </othercredit>
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want to change the leading between consecutive lines of text.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Leading is the distance from one baseline to the next, or in
      other words, the <quote>interlinear space.</quote> It is not the
      same as the line height. Unfortunately, the FO specification named
      the property for influencing the leading
        <property>line-height</property> which makes it confusing. </para>
            <para>The DocBook stylesheets introduce the parameter
        <parameter>line-height</parameter> with the same name and
      functionality. It acts as a placeholder for the above
        <property>line-height</property> property. The following
      examples do all the same (except for the value <tag class="attvalue">normal</tag>). It is assumed, you have a base
      font size of 10pt; negative values in
        <property>line-height</property> are not allowed:</para>
            <variablelist>
               <varlistentry>
                  <term>
                     <tag class="attvalue">normal</tag>
                  </term>
                  <listitem>
                     <para>This is the default value. The real value is set by the
            formatter and depends on the font size, usually it is a
            value between 1.0 and 1.2. <remark>Say more about the real
              value</remark>
                     </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>Length</term>
                  <listitem>
                     <para>Sets the line height of the respective value:</para>
                     <screen>&lt;xsl:param name="line-height"&gt;12pt&lt;/xsl:param&gt;</screen>
                     <para>The leading is 2pt (12pt − 10pt).</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>Number</term>
                  <listitem>
                     <para>Sets the line height is the result of  the value
            multiplied by the font size:</para>
                     <screen>&lt;xsl:param name="line-height"&gt;1.2&lt;/xsl:param&gt;</screen>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>Percentage</term>
                  <listitem>
                     <para>Sets the line height is the result of the percentage
            value multiplied by the font size:</para>
                     <screen>&lt;xsl:param name="line-height"&gt;120%&lt;/xsl:param&gt;</screen>
                  </listitem>
               </varlistentry>
            </variablelist>
    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>Unfortunately, the situation with line height in FO is a bit more
      complicated as it first seems. Usually, this is what most people
      expects:</para>
            <screen>First line
 [Gap]
Second Line
 [Gap]
Third Line
 [Gap]</screen>
            <para>However, the <property>line-height</property> property is a
      <quote>half-leading</quote> value which are added before and
      after a line. This leads to the more realistic picture:</para>
            <screen> [1/2 Gap]
First line
 [1/2 Gap]
 [1/2 Gap]
Second Line
 [1/2 Gap]
 [1/2 Gap]
Third Line
 [1/2 Gap]</screen>
            <para>If the line height is constant in each line, the effect is the
      same (except at the top or bottom of a reference area). According
      to the FO specification of <tag class="attribute">line-height</tag> the FO property is a <emphasis xlink:href="http://www.w3.org/TR/xsl11/#spacecond">compound
        datatype</emphasis> which has minimum, optimum, maximum, conditionally,
      and precedence. The minimum, optimum, and maximum constraints are
      length</para>
    
            <para>That said, leading has a direct influence on how easy a text
      is read. If the value is too small, consecutive lines gets
      overlapped. If the value is too big, the cohersion of text gets
      lost. Most text requires positive leading. Usually 9pt/11pt,
      10pt/12pt, 11pt/13pt, and 12pt/15pt are the most common (the two
      values depicting the font size and line height).</para>
            <para>According to <personname>
                  <firstname>Robert</firstname>
                  <surname>Bringhurst</surname>
               </personname> in his book
        <citetitle>The Elements of Typographic Style</citetitle> he
      recommends more lead in the following situations (cited from his
      book from page 37):</para>
            <itemizedlist>
               <listitem>
                  <para>Dark faces need more lead than light ones</para>
               </listitem>
               <listitem>
                  <para>Large-bodied faces need more lead than smaller-bodied ones</para>
               </listitem>
               <listitem>
                  <para>Unserifed faces often need more lead (or a shorter line)
          than their serifed counterparts</para>
               </listitem>
               <listitem>
                  <para>Text with thickened by superscripts, subscripts,
          mathematical expressions, or the frequent use of full
          capitals</para>
               </listitem>
            </itemizedlist>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <link xlink:href="http://en.wikipedia.org/wiki/Leading"/>, the Wikipedia
        article about leading</para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://www.w3.org/TR/xsl11/#line-height"/>, the
          definition of line-height in the XSL-FO specification</para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://old.nabble.com/Line-height-vs.-line-spacing-td30185507.html"/>, the answer from <personname>
                        <firstname>Tony</firstname>
                        <surname>Graham</surname>
                     </personname> about the question <quote>Line height vs. line
            spacing</quote> which influenced this topic</para>
               </listitem>
            </itemizedlist>

         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.fo.hyphen-urls" remap="topic" userlevel="medium">
         <title>Hyphenating URLs</title>
         <info>
            <keywordset>
               <keyword>hyphenation</keyword>
               <keyword>URLs</keyword>
               <keyword>zero width space</keyword>
               <keyword>soft hyphen</keyword>
            </keywordset>
    
         </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You have URLs or paths which you want to hyphenate correctly.
      The URLs have to break on slashes or other characters only, but
      not between words.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>The hyphenation of URLs in the DocBook stylesheets are
      controlled by two parameters: <parameter xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/fo/ulink.hyphenate.html"
                          xlink:show="new">ulink.hyphenate</parameter> and <parameter xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/fo/ulink.hyphenate.chars.html"
                          xlink:show="new">ulink.hyphenate.chars</parameter>. The first
      parameter, if not empty, turns on hyphenation. Specify a
      hyphenation character, usually either a Unicode soft hyphen
      (U+00AD) or a Unicode zero-width space (U+200B). </para>
            <para>The second parameter,
        <parameter>ulink.hyphenate.chars</parameter>, let you define
      your allowable hyphenation points. The default value is a slash
      (/), but URLs can contain more characters where it is desirable to
      hyphenate. For this reason, the DocBook parameter reference recommends the
      following value: </para>
            <screen>&lt;xsl:param name="ulink.hyphenate.chars"&gt;:/@&amp;?.#&lt;/xsl:param</screen>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The easiest way is to set the parameters
        <parameter>ulink.hyphenate.chars</parameter> and
        <parameter>ulink.hyphenate</parameter> to the values showed in
      the last section and be happy. However, for professional needs,
      this is not enough. The parameters and embedded algorithm
      do not take into account protocols, for example <systemitem class="protocol">http</systemitem>. Protocols begin with
      the schema followed by <literal>://</literal> as in
      <literal>http://</literal>. In some situations (although
      rare), a hyphenation can occur between the double slashes or before
      the colon. Furthermore, according to the <citetitle>Chicago
        Manual of Style</citetitle>, it is desirable to distinguish
      characters <emphasis>before</emphasis> and
        <emphasis>after</emphasis> the hyphenation takes place.</para>
            <para>All these requirements are implemented in stylesheet showed in
      <xref linkend="ex.hyphenate-url.xsl"/>. It cuts off the protocol
      with its <literal>://</literal> and iterates through each
      characters and checks, if it needs to be inserted a hyphenation
      point before or after it.</para>
            <example xml:id="ex.hyphenate-url.xsl">
               <title>
                  <filename>hyphenate-url.xsl</filename>
               </title>
               <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;

&lt;xsl:template name="hyphenate-url"&gt;
  &lt;xsl:param name="url" select="''"/&gt;

  &lt;!-- Remove the "schema://" prefix, so it disturbs not the
       algorithm in "hyphenate-url-string" --&gt;
  &lt;xsl:choose&gt;
   &lt;xsl:when test="$ulink.hyphenate = ''"&gt;
      &lt;xsl:value-of select="$url"/&gt;
   &lt;/xsl:when&gt;
   &lt;xsl:when test="contains($url, '://')"&gt;
      &lt;xsl:value-of select="substring-before($url, '://')"/&gt;
      &lt;xsl:text&gt;://&lt;/xsl:text&gt;
      &lt;xsl:copy-of select="$ulink.hyphenate"/&gt;
      &lt;xsl:call-template name="hyphenate-url-string"&gt;
        &lt;xsl:with-param name="url" select="substring-after($url, '://')"/&gt;
      &lt;/xsl:call-template&gt;
   &lt;/xsl:when&gt;
   &lt;xsl:otherwise&gt;
      &lt;xsl:call-template name="hyphenate-url-string"&gt;
        &lt;xsl:with-param name="url" select="normalize-space($url)"/&gt;
      &lt;/xsl:call-template&gt;
   &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;


&lt;xsl:template name="hyphenate-url-string"&gt;
  &lt;xsl:param name="url" select="''"/&gt;
  &lt;xsl:variable name="char" select="substring($url, 1,1)"/&gt;

  &lt;xsl:choose&gt;
   &lt;xsl:when test="$url=''"/&gt;
   &lt;!-- Insert breakpoint _before_ the character --&gt;
   &lt;xsl:when test="contains($ulink.hyphenate.before.chars, $char)"&gt;
     &lt;xsl:value-of select="concat($ulink.hyphenate, $char)"/&gt;
     &lt;xsl:call-template name="hyphenate-url-string"&gt;
       &lt;xsl:with-param name="url" select="substring($url, 2)"/&gt;
     &lt;/xsl:call-template&gt;
   &lt;/xsl:when&gt;
   &lt;!-- Insert breakpoint _after_ the character --&gt;
   &lt;xsl:when test="contains($ulink.hyphenate.after.chars, $char)"&gt;
     &lt;xsl:value-of select="concat($char, $ulink.hyphenate)"/&gt;
     &lt;xsl:call-template name="hyphenate-url-string"&gt;
       &lt;xsl:with-param name="url" select="substring($url, 2)"/&gt;
     &lt;/xsl:call-template&gt;
   &lt;/xsl:when&gt;
   &lt;xsl:otherwise&gt;
     &lt;xsl:value-of select="$char"/&gt;
     &lt;xsl:call-template name="hyphenate-url-string"&gt;
       &lt;xsl:with-param name="url" select="substring($url, 2)"/&gt;
     &lt;/xsl:call-template&gt;
   &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <remark>HINT: Runtime behaviour O(n); should not be a problem as
      URLs are short. Negligible?</remark>
    
            <para>Include the above stylesheet into your customization layer
      with additionally the following parameters:</para>
            <programlisting language="xml">&lt;!-- Insert breakpoint /before/ the following characters: --&gt;
&lt;xsl:param name="ulink.hyphenate.before.chars"
  &gt;.,%?&amp;amp;#\-+{_&lt;/xsl:param&gt;
&lt;!-- Insert breakpoint /after/ the following characters: --&gt;
&lt;xsl:param name="ulink.hyphenate.after.chars"
  &gt;/:@=};&lt;/xsl:param&gt;</programlisting>
    
         </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.fo.initials" remap="topic" userlevel="easy">
         <title>Creating Initials and Drop Caps</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You need a <quote>drop cap</quote>, or <link xlink:href="http://en.wikipedia.org/wiki/Initial">Initial</link>,
      which is a <quote>a letter at the beginning of a work, a chapter,
        or a paragraph that is larger than the rest of the
      text.</quote>
            </para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>Typographically, you have different options to place initials:</para>
            <itemizedlist>
               <listitem>
                  <para>on the same baseline as the first line of text,</para>
               </listitem>
               <listitem>
                  <para>as floats, embedded between two or more lines,</para>
               </listitem>
               <listitem>
                  <para>besides the left margin of the text block without
          indentation.</para>
               </listitem>
            </itemizedlist>
            <para>Additionally you can design your initials as graphics, but we
    will come to this later.</para>
    
            <section xml:id="sec.fo.initials.baseline">
               <title>Place Initials on the Same Baseline</title>
               <para>This is the easiest method to implement. The stylesheet
        normalizes the text node of the first paragraph, extract the first character
        and wrap it between an <tag>fo:inline</tag> element with font
        size, family, and weight:</para>
               <example xml:id="ex.initials-baseline.xsl">
                  <title>
                     <filename>initials-baseline.xsl</filename>
                  </title>
                  <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:fo="http://www.w3.org/1999/XSL/Format"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  
  &lt;xsl:param name="drop.caps.size"&gt;20pt&lt;/xsl:param&gt;
  &lt;xsl:param name="drop.caps.font-family" select="$body.font.family"/&gt;
  &lt;xsl:param name="drop.caps.font-weight"&gt;bold&lt;/xsl:param&gt;
  
  &lt;xsl:template name="create.initial"&gt;
    &lt;xsl:param name="initial" select="substring(normalize-space(.),1,1)"/&gt;
    &lt;fo:inline&gt;
      &lt;fo:inline font-size="{$drop.caps.size}"
        font-weight="{$drop.caps.font-weight}"
        font-family="{$drop.caps.font-family}"&gt;
        &lt;xsl:copy-of select="$initial"/&gt;
      &lt;/fo:inline&gt;
      &lt;xsl:value-of select="substring(normalize-space(.), 2)"/&gt;
    &lt;/fo:inline&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
               </example>
               <para>To use it, include it into your customization layer. It is
        usually called in text nodes like the first paragraph from a
        section which parent is an article:</para>
               <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE xsl:stylesheet 
[
 &lt;!ENTITY db "http://docbook.sourceforge.net/release/xsl-ns/current"&gt; 
]&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  
  &lt;xsl:import href="&amp;db;/fo/docbook.xsl"/&gt;
  &lt;xsl:include href="initials-baseline.xsl"/&gt;
  
  &lt;xsl:template match="d:article/d:section/d:para[1]/text()"&gt;
    &lt;xsl:call-template name="create.initial"/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
               <para>It is easy to extend it to chapters, you just have to copy
        the template and correct the content in the <tag class="attribute">match</tag> attribute to:</para>
               <programlisting>&lt;xsl:template<!--
       --> match="d:chapter/d:section/d:para[1]/text()"&gt;</programlisting>
            </section>
            <section xml:id="sec.fo.initials.floats">
               <title>Implement Initials as Floats</title>
               <para>
                  <remark>TBD</remark>
               </para>
            </section>
            <section xml:id="sec.fo.initials.margin">
               <title>Place Initials in Left Margin</title>
               <para>
                  <remark>TBD</remark>
               </para>
            </section>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The solution described in <xref linkend="sec.fo.initials.baseline"/> is in most cases sufficient.
      However, if the first character is <emphasis>not</emphasis> a
      letter, any character is incorrectly made an initial.</para>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>Find information about the property <tag class="attribute">line-height</tag> in <xref linkend="dbc.fo.line-height"/>.</para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.fo.number-titles" remap="topic" userlevel="easy">
         <title>Numbering Part, Chapter, Appendix, and other Titles</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>You want a number in front of your structural elements like
        <tag>appendix</tag>, <tag>chapter</tag>, <tag>section</tag>,
      etc.</para>
         </section>
         <section role="solution" xml:id="sec.fo.number-titles.solution">
            <title>Solution</title>
            <para>The DocBook XSL stylesheets provide already a decent numbering
      scheme for high level divisions like parts, appendices, chapters,
      and references. The most common use is numbering section. If you
      want to automatically number section titles, set the
        <parameter>section.autolabel</parameter> parameter either
      manually or through a customization layer, for example: </para>
            <programlisting language="xml">&lt;xsl:param name="section.autolabel" select="1"/&gt;</programlisting>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The DocBook XSL stylesheets contain autolabel parameters for
      the common elements <tag>appendix</tag>, <tag>chapter</tag>,
        <tag>part</tag>, <tag>preface</tag>, <tag>qandadiv</tag>,
        <tag>reference</tag>, and <tag>section</tag>. These can be set
      individually to change the numbering of for the same elements. The
      default values are shown in <xref linkend="tab.fo.number-titles.autolabel"/>. </para>
            <table xml:id="tab.fo.number-titles.autolabel">
               <title>Autolabel Parameters and their Default Values</title>
               <tgroup cols="3">
                  <thead>
                     <row>
                        <entry>Parameter</entry>
                        <entry>Default</entry>
                        <entry>Example</entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>
                           <parameter>appendix.autolabel</parameter>
                        </entry>
                        <entry>
                           <literal>A</literal>
                        </entry>
                        <entry>Appendix A. Python 3</entry>
                     </row>
                     <row>
                        <entry>
                           <parameter>chapter.autolabel</parameter>
                        </entry>
                        <entry>
                           <literal>1</literal>
                        </entry>
                        <entry>Chapter 1. A Tutorial Introduction</entry>
                     </row>
                     <row>
                        <entry>
                           <parameter>part.autolabel</parameter>
                        </entry>
                        <entry>
                           <literal>I</literal>
                        </entry>
                        <entry>Part I. The Python Language</entry>
                     </row>
                     <row>
                        <entry>
                           <parameter>preface.autolabel</parameter>
                        </entry>
                        <entry>
                           <literal>0</literal>
                        </entry>
                        <entry>Prefaces are usually not numbered</entry>
                     </row>
                     <row>
                        <entry>
                           <parameter>qandadiv.autolabel</parameter>
                        </entry>
                        <entry>
                           <literal>1</literal>
                        </entry>
                        <entry>3.1 Installation Questions</entry>
                     </row>
                     <row>
                        <entry>
                           <parameter>reference.autolabel</parameter>
                        </entry>
                        <entry>
                           <literal>I</literal>
                        </entry>
                        <entry>I. Python Reference</entry>
                     </row>
                     <row>
                        <entry>
                           <parameter>section.autolabel</parameter>
                        </entry>
                        <entry>
                           <literal>0</literal>
                        </entry>
                        <entry>Not numbered by default</entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
    
            <para>The autolabel parameters can contain the following
      values:</para>
    
            <variablelist>
               <varlistentry>
                  <term>Value <literal>0</literal>
                  </term>
                  <listitem>
                     <para>A value of zero disables the automatic numbering. For
            example, if you want to disable automatic numbering for
            appendix elements, use this:</para>
                     <programlisting language="xml">&lt;xsl:param name="appendix.autolabel" select="0"/&gt;</programlisting>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>Value <literal>1</literal>
                  </term>
                  <listitem>
                     <para>A value of one enables the automatic numbering and uses
            arabic numerals. For example, section numbering is disabled
            by default. Use the code in the <xref xrefstyle="select:title" linkend="sec.fo.number-titles.solution"/> section.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>String</term>
                  <listitem>
                     <para>A string enables a different automatic numbering schema,
            for example roman numerals. See the following table to get
            an overview. </para>
                     <table xml:id="tab.fo.">
                        <title>Possible Formats for Autolabel Parameters</title>
                        <tgroup cols="4">
                           <thead>
                              <row>
                                 <entry>Value</entry>
                                 <entry>Alternative Value</entry>
                                 <entry>Style</entry>
                                 <entry>Example</entry>
                              </row>
                           </thead>
                           <tbody>
                              <row>
                                 <entry>
                                    <literal>1</literal>
                                 </entry>
                                 <entry>
                                    <literal>arabic</literal>
                                 </entry>
                                 <entry>Arabic numerals</entry>
                                 <entry>1, 2, 3, 4, …</entry>
                              </row>
                              <row>
                                 <entry>
                                    <literal>I</literal>
                                 </entry>
                                 <entry>
                                    <literal>upperroman</literal>
                                 </entry>
                                 <entry>Uppercase roman numerals</entry>
                                 <entry>I, II, III, IV, …</entry>
                              </row>
                              <row>
                                 <entry>
                                    <literal>i</literal>
                                 </entry>
                                 <entry>
                                    <literal>lowerroman</literal>
                                 </entry>
                                 <entry>Lowercase roman numerals</entry>
                                 <entry>i, ii, iii, iv, …</entry>
                              </row>
                              <row>
                                 <entry>
                                    <literal>A</literal>
                                 </entry>
                                 <entry>
                                    <literal>upperalpha</literal>
                                 </entry>
                                 <entry>Uppercase letters</entry>
                                 <entry>A, B, C, D, …</entry>
                              </row>
                              <row>
                                 <entry>
                                    <literal>a</literal>
                                 </entry>
                                 <entry>
                                    <literal>loweralpha</literal>
                                 </entry>
                                 <entry>Lowercase letters</entry>
                                 <entry>a, b, c, d, …</entry>
                              </row>
                              <row>
                                 <entry>
                                    <tag class="numcharref">x661</tag>
                                 </entry>
                                 <entry>
                                    <literal>arabicindic</literal>
                                 </entry>
                                 <entry>Arabic-Indic numerals</entry>
                                 <entry>١, ٢, ٣, ٤, …</entry>
                              </row>
                           </tbody>
                        </tgroup>
                     </table>
                  </listitem>
               </varlistentry>
            </variablelist>
    
            <para>Mostly you will probably want sections to be numbered
      including its parent numbering. If you do not touch
        <parameter>chapter.autolabel</parameter>, use the parameter
        <parameter>section.label.includes.component.label</parameter>
      and set it to <literal>1</literal>:</para>
            <programlisting language="xml">&lt;xsl:param name="section.autolabel" select="1"/&gt;
&lt;xsl:param name="section.label.includes.component.label" select="1"/&gt;</programlisting>
    
            <para>With the following parameters you can further customize your 
      numbering:</para>
    
            <variablelist>
               <varlistentry>
                  <term>
                     <parameter>component.label.includes.part.label</parameter>
                  </term>
                  <listitem>
                     <para>Controls if appendix or chapter number labels are
          prefixed with their contained part label. </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <parameter>label.from.part</parameter>
                  </term>
                  <listitem>
                     <para>Defines if the components inside a part is renumbered or
          not. A value of non-zero restarts the chapter number and
          counts again from one. Use this numbering if you want
          unambiguous numerals.</para>
                     <para>The value zero (the default) restarts the component
          number throughout each book.</para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <parameter>section.autolabel.max.depth</parameter>
                  </term>
                  <listitem>
                     <para>Controls which sections get a number. By default, all
            sections are get numbered (default value is
              <literal>8</literal>.) If you want to number only sections
            at level 1, set the parameter to the value
              <literal>1</literal>.</para>
                  </listitem>
               </varlistentry>
            </variablelist>
   
            <para>Let us assume the following structure in a book:</para>
    
            <screen>Part: The Python Language
  Chapter: A Tutorial Introduction
     Section: Running Python
     Section: Variables

  Chapter: Lexical Conventions and Syntax
     Section: Line Structure and Indentation
     Section: Identifiers and Reserved Words

Part: The Python Library
  Chapter: Build-In Functions
     Section: Build-In Functions and Types
     Section: Build-In Exceptions
  Chapter: Python Runtime Services
     Section: atext
     Section: copy</screen>
    
            <table>
               <title>Parameter Combinations</title>
               <tgroup cols="2">
                  <thead>
                     <row>
                        <entry>Parameters</entry>
                        <entry>Result</entry>
                     </row>
                  </thead>
                  <tbody valign="top">
                     <row>
                        <entry>No parameters set, using the default settings</entry>
                        <entry>
                           <screen linenumbering="unnumbered">I. The Python Language
  1. A Tutorial Introduction
      Running Python
      Variables
  2. Lexical Conventions and Syntax
      Line Structure and Indentation
      Identifiers and Reserved Words
II. The Python Library
  3. Build-In Functions
      Build-In Functions and Types
      Build-In Exceptions
  4. Python Runtime Services
      atext
      copy</screen>
                        </entry>
                     </row>
                     <row>
                        <entry>
                           <simplelist type="vert">
                              <member>
                                 <literal>section.autolabel=1</literal>
                              </member>
                           </simplelist>
                        </entry>
                        <entry>
                           <screen linenumbering="unnumbered">I. The Python Language
  1. A Tutorial Introduction
      1. Running Python
      2. Variables
  2. Lexical Conventions and Syntax
      1. Line Structure and Indentation
      2. Identifiers and Reserved Words
II. The Python Library
  3. Build-In Functions
      1. Build-In Functions and Types
      2. Build-In Exceptions
  4. Python Runtime Services
      1. atexit
      2. copy</screen>
                        </entry>
                     </row>
                     <row>
                        <entry>
                           <simplelist type="vert">
                              <member>
                                 <literal>section.autolabel=1</literal>
                              </member>
                              <member>
                                 <literal>section.label.includes.component.label=1</literal>
                              </member>
                           </simplelist>
                        </entry>
                        <entry>
                           <screen linenumbering="unnumbered">I. The Python Language
  1. A Tutorial Introduction
      1.1. Running Python
      1.2. Variables
  2. Lexical Conventions and Syntax
      2.1. Line Structure and Indentation
      2.2. Identifiers and Reserved Words
II. The Python Library
  3. Build-In Functions
      3.1. Build-In Functions and Types
      3.2. Build-In Exceptions
  4. Python Runtime Services
      4.1. atexit
      4.2. copy</screen>
                        </entry>
                     </row>
                     <row>
                        <entry>
                           <simplelist type="vert">
                              <member>
                                 <literal>section.autolabel=1</literal>
                              </member>
                              <member>
                                 <literal>section.label.includes.component.label=1</literal>
                              </member>
                              <member>
                                 <literal>component.label.includes.part.label</literal>
                              </member>
                           </simplelist>
                        </entry>
                        <entry>
                           <screen linenumbering="unnumbered">I. The Python Language
  I.1. A Tutorial Introduction
      I.1.1. Running Python
      I.1.2. Variables
  I.2. Lexical Conventions and Syntax
      I.2.1. Line Structure and Indentation
      I.2.2. Identifiers and Reserved Words
II. The Python Library
  II.3. Build-In Functions
      II.3.1. Build-In Functions and Types
      II.3.2. Build-In Exceptions
  II.4. Python Runtime Services
      II.4.1. atexit
      II.4.2. copy</screen>
                        </entry>
                     </row>
                     <row>
                        <entry>
                           <simplelist type="vert">
                              <member>
                                 <literal>section.autolabel=1</literal>
                              </member>
                              <member>
                                 <literal>section.label.includes.component.label=1</literal>
                              </member>
                              <member>
                                 <literal>component.label.includes.part.label</literal>
                              </member>
                              <member>
                                 <literal>label.from.part=1</literal>
                              </member>
                           </simplelist>
                        </entry>
                        <entry>
                           <screen linenumbering="unnumbered">I. The Python Language
  I.1. A Tutorial Introduction
      I.1.1. Running Python
      I.1.2. Variables
  I.2. Lexical Conventions and Syntax
      I.2.1. Line Structure and Indentation
      I.2.2. Identifiers and Reserved Words
II. The Python Library
  II.1. Build-In Functions
      II.1.1. Build-In Functions and Types
      II.1.2. Build-In Exceptions
  II.2. Python Runtime Services
      II.2.1. atexit
      II.2.2. copy</screen>
                        </entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
   
            <para>However, when dealing with other numbering systems, the above
      parameters are not enough. To support, for example, Japanese numbering,
      you need to customize the named template
      <function>autolabel.format</function> from
      <filename>common/labels.xsl</filename>.</para>
    
            <example>
               <title>Extending <function>autolabel.format</function>
               </title>
               <programlisting language="xml">&lt;xsl:template name="autolabel.format"&gt;
  &lt;xsl:param name="context" select="."/&gt;
  &lt;xsl:param name="format"/&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="string($format) != 0"&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="string($format)='001'"&gt;
          &lt;xsl:value-of select="$format"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="$format='loweralpha' or $format='a'"&gt;
          &lt;xsl:value-of select="'a'"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="$format='lowerroman' or $format='i'"&gt;
          &lt;xsl:value-of select="'i'"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="$format='upperalpha' or $format='A'"&gt;
          &lt;xsl:value-of select="'A'"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="$format='upperroman' or $format='I'"&gt;
          &lt;xsl:value-of select="'I'"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="$format='arabicindic' or $format='١'"&gt;
          &lt;xsl:value-of select="'١'"/&gt;
        &lt;/xsl:when&gt;
        <emphasis role="bold">&lt;xsl:when test="$format='japanese' or $format='&amp;#x4e00;'"&gt;
          &lt;xsl:value-of select="'&amp;#x4e00;'"/&gt;
        &lt;/xsl:when&gt;</emphasis>
        &lt;xsl:otherwise&gt;
          &lt;xsl:message&gt;
            &lt;xsl:text&gt;Unexpected &lt;/xsl:text&gt;
            &lt;xsl:value-of select="local-name(.)"/&gt;
            &lt;xsl:text&gt;.autolabel value: &lt;/xsl:text&gt;
            &lt;xsl:value-of select="$format"/&gt;
            &lt;xsl:text&gt;; using default.&lt;/xsl:text&gt;
          &lt;/xsl:message&gt;
          &lt;xsl:call-template name="default.autolabel.format"/&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:when&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;</programlisting>
            </example>
    
            <para>Unfortunately, the <command>xsltproc</command> processor does
      not support this currently (as in version 1.1.24). Only Saxon does
      it correct.</para>
         </section>
  
         <section role="seealso">
            <title>See Also</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <link xlink:href="http://www.sagehill.net/docbookxsl/SectionNumbering.html"/>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <link xlink:href="http://en.wikipedia.org/wiki/Category:Numerals"/>
                  </para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
      <!--<xi:include href="fo/topic.sep-label-and-titles.xml"/>-->
  <!--<xi:include href="fo/topic.pagedefs-with-inkscape.xml"/>-->
  <!--<xi:include href="fo/topic.empty-header-and-footer.xml"/>-->
  
</chapter>  
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!-- <?xml-model href="file:5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><chapter xml:id="dbc.html" version="5.1">
      <title>(X)HTML Customizations</title>
      <info>
    
         <biblioid class="other" otherclass="ticket">23</biblioid>
         <abstract>
            <para>HTML is a very important output format for the DocBook XSL
        stylesheets as it is not only displayed on Web sites, but also
        used <quote>inside</quote> ebooks (<acronym>EPUB<alt>Electronic
          PUBlication</alt>
               </acronym>). It comes in several derivates.</para>
         </abstract>
      </info>
  
      <section xml:id="dbc.html.intro">
         <title>Introduction</title>
         <para>Currently, there are several HTML derivates available as
      target formats. As such, <quote>the</quote> HTML </para>
    
         <variablelist>
            <varlistentry>
               <term>
                  <filename class="directory">html</filename>
               </term>
               <listitem>
                  <para>Contains stylesheets for the <quote>classical</quote>
            HTML version 4.x.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <filename class="directory">htmlhelp</filename>
               </term>
               <listitem>
                  <para>Contains stylesheets for HTMLHelp, the standard help
            system from Windows 3.0 through Windows XP. The main
            stylesheet <filename>htmlhelp.xsl</filename> uses code from
            the HTML 4.x stylesheets. </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <filename class="directory">webhelp</filename>
               </term>
               <listitem>
                  <para>Contains the result of the <acronym>GSOC<alt>Google
                Summer of Code</alt>
                     </acronym> 2010.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <filename class="directory">website</filename>
               </term>
               <listitem>
                  <para>Contains stylesheets to create a <quote>Web
            site</quote>.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <filename class="directory">xhtml</filename>
               </term>
               <listitem>
                  <para>Contains stylesheets for XHTML version 1.0
              (<quote>transitional XHTML</quote>). These stylesheets are
            generated through a XSLT transformation from the HTML core
            stylesheets. </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <filename class="directory">xhtml-1_1</filename>
               </term>
               <listitem>
                  <para>Contains stylesheets for XHTML version 1.1. Like the one
            for XHTML, they are generated through a XSLT transformation.
            In comparison, the XHTML 1.1 omits certain attributes which
            were allowed in XHTML or HTML. The missing part must be
            implemented by CSS.
            The XHTML 1.1 stylesheets are also used for EPUB creation.
          </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <filename class="directory">xhtml5</filename>
               </term>
               <listitem>
                  <para>Contains stylesheets for HTML 5. These are
            currently (as of September 2011) pretty new and in
            development.</para>
               </listitem>
            </varlistentry>
         </variablelist>
    
      </section>
  
      <!-- 
  (X)HTML Customizations
    * Control chunking 
    * Attaching CSS (to your HTML) (explain different methods)
    * Alt Text for Images
    * Syntax Highlighting
    * Adding Permalinks
    * Creating Breadcrumbs (simple, sophisticated)
    * Implementing Clickable TOCs
    * Deciding where to put Customizations (CSS or XSLT)
    * Integrating Google's Web Fonts
  -->
  
  <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.html.permalinks" remap="topic" userlevel="easy">
         <title>Creating Permalinks</title>
         <info>
    
  </info>
  
         <section role="problem">
            <title>Problem</title>
            <para>Your need for every appendix, chapter, section, etc. a small
      hint (often depicted as <quote>¶</quote>) which points to the
      division itself. This <quote>permalink</quote> simplies the
      retrieval and indentification of such a division.</para>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>You need an ID attribute on your division (chapter, section,
      examples, etc.) to make it work. The
        <filename>permalinks.xsl</filename> stylesheet is a named
      template which expects an <parameter>id</parameter>
      parameter.</para>
            <example xml:id="ex.html.permalinks">
               <title>Permalink Stylesheet (<filename>permalinks.xsl</filename>)</title>
               <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:param name="generate.permalink" select="1"/&gt;
  &lt;xsl:param name="permalink.text"&gt;¶&lt;/xsl:param&gt;

  &lt;xsl:template name="permalink"&gt;
    &lt;xsl:param name="id"/&gt;

    &lt;xsl:if test="$generate.permalink != '0'"&gt;
      &lt;span class="permalink"&gt;
        &lt;a alt="Permalink" title="Permalink" href="#{$id}"&gt;
          &lt;xsl:copy-of select="$permalink.text"/&gt;
        &lt;/a&gt;
      &lt;/span&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <para>This is of course not enough. Use the following steps to
    include it into your customization layers:</para>
            <procedure>
               <step>
                  <para>Create a customization layer as shown in <xref linkend="dbc.common.dbcustomize"/>.</para>
               </step>
               <step>
                  <para>Include the stylesheet from <xref linkend="ex.html.permalinks"/> into your customization
            layer:</para>
                  <programlisting language="xml">&lt;xsl:stylesheet version="1.0"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;!-- ... --&gt;
  <emphasis role="bold">&lt;xsl:include href="permalinks.xsl"/&gt;</emphasis>
&lt;/xsl:stylesheet&gt;</programlisting>
               </step>
               <step>
                  <para>Insert one or all of the following codes to include
            <function>permalink</function> in their respective
          elements:</para>
                  <itemizedlist>
                     <listitem>
                        <para>For appendices, chapters, prefaces, etc. use the
              <function>component.title</function> template:
            </para>
                        <programlisting language="xml">&lt;xsl:template name="component.title"&gt;
  &lt;xsl:param name="node" select="."/&gt;
  &lt;!-- Some code omitted --&gt;
  &lt;xsl:element name="h{$level+1}"&gt;
    &lt;xsl:attribute name="class"&gt;title&lt;/xsl:attribute&gt;
    &lt;xsl:if test="$generate.id.attributes = 0"&gt;
      &lt;xsl:call-template name="anchor"&gt;
        &lt;xsl:with-param name="node" select="$node"/&gt;
        &lt;xsl:with-param name="conditional" select="0"/&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:apply-templates select="$node" mode="object.title.markup"&gt;
      &lt;xsl:with-param name="allow-anchors" select="1"/&gt;
    &lt;/xsl:apply-templates&gt;
    <emphasis role="bold">&lt;xsl:call-template name="permalink"&gt;
      &lt;xsl:with-param name="id" select="$id"/&gt;
      &lt;xsl:with-param name="title" select="title"/&gt;
    &lt;/xsl:call-template&gt;</emphasis>
  &lt;/xsl:element&gt;
&lt;/xsl:template&gt;</programlisting>
                     </listitem>
                     <listitem>
                        <para>For figures, examples, procedures, tables, etc. use
              the <function>formal.object.heading</function>
              template:</para>
                        <programlisting language="xml">&lt;xsl:template name="formal.object.heading"&gt;
  &lt;xsl:param name="object" select="."/&gt;
  &lt;xsl:param name="title"&gt;
    &lt;xsl:apply-templates select="$object" mode="object.title.markup"&gt;
      &lt;xsl:with-param name="allow-anchors" select="1"/&gt;
    &lt;/xsl:apply-templates&gt;
  &lt;/xsl:param&gt;
  &lt;p class="title"&gt;
    &lt;b&gt;
      &lt;xsl:copy-of select="$title"/&gt;
    &lt;/b&gt;
    &lt;xsl:if test="@id"&gt;
      <emphasis role="bold">&lt;xsl:call-template name="permalink"&gt;
        &lt;xsl:with-param name="title" select="$title"/&gt;
        &lt;xsl:with-param name="id" select="@id"/&gt;
      &lt;/xsl:call-template&gt;</emphasis>
    &lt;/xsl:if&gt;
  &lt;/p&gt;   
&lt;/xsl:template&gt;</programlisting>
                     </listitem>
                     <listitem>
                        <para>
                           <remark>FIXME: What about parts?</remark>
                        </para>
                     </listitem>
                  </itemizedlist>
               </step>
               <step>
                  <para>Use your customization layer to transform your DocBook
         document into (X)HTML.</para>
               </step>
            </procedure>
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>
               <remark>TBD</remark>
            </para>
         </section>
         <section role="seealso">
            <title>See Also</title>
            <para>
               <remark>TBD</remark>
            </para>
         </section>
      </section>
      <!--
    License CC BY-NC-SA 3.0
  
   This work is licensed under the 
   "Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.de
   
   Read the English translation here:
   
   "Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)" 
   http://creativecommons.org/licenses/by-nc-sa/3.0/
   
--><!--<?xml-model href="file:../5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><section xml:id="dbc.html.texinfo-navig" remap="topic" userlevel="medium">
         <title>Creating Simple Navigation in Chapters</title>
         <info>
    
            <keywordset>
               <keyword>HTML</keyword>
               <keyword>simple navigation</keyword>
               <keyword>next</keyword>
               <keyword>previous</keyword>
               <keyword>sections</keyword>
               <keyword>generate.simple.navigation</keyword>
            </keywordset>
         </info>
         <section role="problem">
            <title>Problem</title>
            <para>You need a simple navigation for your single HTML file. The
      navigation should contain for each chapter a link to
      the next and previous chapters including an up link pointing to
      the enclosing part or book. This is depicted in the following
      graphic:</para>
            <mediaobject>
               <imageobject>
                  <imagedata fileref="png/simplenavig.png" align="center"/>
               </imageobject>
            </mediaobject>
         </section>
         <section role="solution">
            <title>Solution</title>
            <para>The following file defines the named template
        <function>generate.simple.navigation</function>:</para>
            <example xml:id="ex.simple-navigation.xsl">
               <title>
                  <filename>simple-navigation.xsl</filename>
               </title>
               <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns="http://www.w3.org/1999/xhtml"
  exclude-result-prefixes="d"&gt;
    
  &lt;xsl:template name="generate.simple.navigation"&gt;
    &lt;xsl:param name="node" select="."/&gt;
    &lt;xsl:variable name="prev" select="$node/preceding-sibling::d:chapter"/&gt;
    &lt;xsl:variable name="next" select="$node/following-sibling::d:chapter"/&gt;
    &lt;xsl:variable name="up"   select="$node/parent::d:*"/&gt;
   
    &lt;div class="chapter-navigation"&gt;
      &lt;ul&gt;
        &lt;xsl:if test="count($next) &gt;0"&gt;
          &lt;li class="next"&gt;
            &lt;xsl:call-template name="gentext.nav.next"/&gt;
            &lt;xsl:text&gt;: &lt;/xsl:text&gt;
            &lt;a&gt;
              &lt;xsl:attribute name="href"&gt;
                &lt;xsl:call-template name="href.target"&gt;
                  &lt;xsl:with-param name="object" select="$next"/&gt;
                &lt;/xsl:call-template&gt;
              &lt;/xsl:attribute&gt;
              &lt;xsl:value-of select="$next/d:title"/&gt;
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:if test="count($prev) &gt;0"&gt;
          &lt;li class="prev"&gt;
            &lt;xsl:call-template name="gentext.nav.prev"/&gt;
            &lt;xsl:text&gt;: &lt;/xsl:text&gt;
            &lt;a&gt;
              &lt;xsl:attribute name="href"&gt;
                &lt;xsl:call-template name="href.target"&gt;
                  &lt;xsl:with-param name="object" select="$prev"/&gt;
                &lt;/xsl:call-template&gt;
              &lt;/xsl:attribute&gt;
              &lt;xsl:value-of select="$prev/d:title"/&gt;
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:if test="count($up) &gt;0"&gt;
          &lt;li class="up"&gt;
            &lt;xsl:call-template name="gentext.nav.up"/&gt;
            &lt;xsl:text&gt;: &lt;/xsl:text&gt;
            &lt;a&gt;
              &lt;xsl:attribute name="href"&gt;
                &lt;xsl:call-template name="href.target"&gt;
                  &lt;xsl:with-param name="object" select="$up"/&gt;
                &lt;/xsl:call-template&gt;
              &lt;/xsl:attribute&gt;
              &lt;xsl:value-of select="$up/d:title"/&gt;
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;/xsl:if&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>
            </example>
            <para>This is not enough, of course. Use the following steps to
      include it into your customization layers:</para>
            <procedure>
               <step>
                  <para>Create a customization layer as shown in <xref linkend="dbc.common.dbcustomize"/>.</para>
               </step>
               <step>
                  <para>Include the stylesheet from <xref linkend="ex.simple-navigation.xsl"/> into your customization
            layer:</para>
                  <example xml:id="ex.db-simple-navigation.xsl">
                     <title>
                        <filename>db-simple-navigation.xsl</filename>
                     </title>
                     <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE xsl:stylesheet [
  &lt;!ENTITY db "http://docbook.sourceforge.net/release/xsl-ns/current"&gt;
]&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:d="http://docbook.org/ns/docbook"
  xmlns="http://www.w3.org/1999/xhtml" 
  exclude-result-prefixes="d"&gt;
  
  &lt;xsl:import href="&amp;db;/xhtml/docbook.xsl"/&gt;
  &lt;xsl:import href="simple-navigation.xsl"/&gt;
  
  &lt;xsl:param name="generate.simple.navigation" select="1"/&gt;
  &lt;xsl:param name="html.stylesheet"&gt;book.css&lt;/xsl:param&gt;

  &lt;xsl:template name="chapter.titlepage.before.recto"&gt;
    &lt;xsl:if test="$generate.simple.navigation != 0"&gt;
      &lt;xsl:call-template name="generate.simple.navigation"/&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</programlisting>      
                  </example>        
               </step>
               <step>
                  <para>Use the file <filename>db-simple-navigation.xsl</filename>
        to transform your documents.</para>
               </step>
            </procedure>
    
            <para>If you want to switch on or off the above behaviour, use the
      parameter <parameter>generate.simple.navigation</parameter>
               <footnote>
                  <para>It is not an error to have a parameter with the same name
          as a named template.</para>
               </footnote> and set it to <literal>0</literal>.</para>    
         </section>
         <section role="discussion">
            <title>Discussion</title>
            <para>The named template
        <function>generate.simple.navigation</function> works as
        follows:</para>
    
            <orderedlist>
               <listitem>
                  <para>Three variables are definied for the previous, next, and
          up links. All depends on the <varname>node</varname> parameter
          which is by default the context node. This is useful as you
          can change the behaviour very easily by just changing the
          context node when calling the template with
            <function>xsl:call-template</function>.</para>
               </listitem>
               <listitem>
                  <para>The <varname>prev</varname> and <varname>next</varname>
          variables are filled with the previous or next chapter
          elements along their sibling axis. In comparison, the
            <varname>up</varname> variable needs to find its enclosing
          element; it uses the <function>parent</function> axis
          for this purpose.</para>
                  <para>If there are no previous or next chapters, the node set will
          be empty. For the <varname>up</varname> variable, this depends
          on where a chapter belongs; usually it is enclosed in a
            <tag>book</tag> or <tag>part</tag> element. As we need only
          the parent element As such this variable can not be empty
          (only if the chapter would be the root element.)</para>
               </listitem>
               <listitem>
                  <para>The simple navigation is implemented as a unordered list
          inside a <tag>div</tag> element. The enclosing <tag>div</tag>
          element is used to make styling with CSS easier.</para>
               </listitem>
               <listitem>
                  <para>With <tag>xsl:if</tag> we check the amount of nodes in our
            <varname>prev</varname> and <varname>next</varname>
          variables. Only if the variable contains more than zero nodes
          it will a listitem created.</para>
               </listitem>
               <listitem>
                  <para>If we create a listitem, we want to insert a text to help
          our readers and to distinguish the different directions. The
          text has to be independent from the used language; so
          hard-coding the text would not be sufficient. For this reason,
          the DocBook stylesheets contains named templates to generate
          localized text. The next, previous, and up link texts are
          created through the named templates
            <function>generate.nav.next</function>,
            <function>generate.nav.prev</function>, and
            <function>generate.nav.up</function>.</para>
               </listitem>
               <listitem>
                  <para>As the generated localized text contains only the text
          without interpunctations, we append <quote>: </quote>.</para>
               </listitem>
               <listitem>
                  <para>We create the link with the <tag>a</tag> link. The needed
            <tag class="attribute">href</tag> attribute is created by
          calling <function>href.target</function> (origin
            <filename>html.xsl</filename>). This template is responsible
          for the correct linking value.</para>
               </listitem>
               <listitem>
                  <para>The content of the <tag>a</tag> element is inserted from
          the <tag>title</tag> element of the corresponding node. As we
          are only interested in the string value, we can use
            <function>xsl:value-of</function>.</para>
               </listitem>
            </orderedlist>
    
            <para>The <function>generate.simple.navigation</function> template
      matches only chapters along the sibling axis. As such it can not
      find a glossary or appendix after a chapter. If you want to create
      links for <emphasis>any</emphasis> component elements, not only
      chapters, you need to change the variables <varname>prev</varname>
      and <varname>next</varname>. A first attempt would lead to
      this:</para>
            <programlisting>&lt;xsl:variable name="prev" select="$node/preceding-sibling::d:*[1]"/&gt;
&lt;xsl:variable name="next" select="$node/following-sibling::d:*[1]"/&gt;</programlisting>
            <para>This works for the <varname>next</varname> variables. However,
      our expression for the <varname>prev</varname> variable contains a
      bug. Consider the following structure:</para>
            <screen>book
  title
  info
  <emphasis role="bold">chapter</emphasis>
  ...</screen>
            <para>The <function>preceding-sibling</function> axis returns the
        <tag>info</tag> and <tag>title</tag> elements. This is not what
      you want as these are no component elements for our
        <varname>prev</varname> link. In that case we need an expression
      to filter out the unwanted elements. This is done with an
      predicate:</para>
            <programlisting>&lt;xsl:variable name="prev" select="$node/preceding-sibling::d:*[not(self::d:title|self::d:info)][1]"/&gt;</programlisting>
            <para>That expression first creates a node set with
        <emphasis>all</emphasis> preceding elements. In a second step
      they are check against the term
        <code>not(self::d:title|self::d:info)</code>; only those
      elements are remain in the node set which are not <tag>title</tag> or
        <tag>info</tag> elements. In our above example, this leads to a
      node set with zero nodes and is exactly what we wanted to
      achieve.</para>
            <para>With the previous change, we allow <emphasis>any</emphasis>
      structural element to be included in a next or previous link.
      However, we show our navigation links only in chapter titlepages
      at the moment (the named template
        <function>chapter.titlepage.before.recto</function>.) We need to
      extend the stylesheet
        <filename>db-simple-navigation.xsl</filename> to allow elements
      like <tag>appendix</tag>, <tag>glossary</tag>, etc. Refer to the
      content modell of DocBook´s <tag xlink:href="http://www.docbook.org/tdg51/en/html/book.html">book</tag> element for details. For an <tag>appendix</tag> this
      looks like this:</para>
            <programlisting>&lt;xsl:template name="appendix.titlepage.before.recto"&gt;
  &lt;xsl:if test="$generate.simple.navigation != 0"&gt;
    &lt;xsl:call-template name="generate.simple.navigation"/&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;</programlisting>
            <para>For the other elements this is exactly the same except the
      name. Just use the element name and append
      <literal>.titlepage.before.recto</literal>.</para>
            <!--
      <xsl:message>
      prev: <xsl:value-of select="concat(count($prev), ':',
      local-name($prev))"/>
      next: <xsl:value-of select="concat(count($next), ':',
      local-name($next))"/>
      up:   <xsl:value-of select="concat(count($up), ':',
      local-name($up))"/>
      </xsl:message>
-->
  </section>
         <!--<section role="seealso">
    <title>See Also</title>
    <para></para>
  </section>-->
</section>
      <!--<xi:include href="html/topic.consistent-ids.xml"/>-->
</chapter>
  <!-- <xi:include href="dbc-epub.xml"/> -->
  
  <!--<?xml-model href="file:5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><appendix xml:id="cc-by-nc-sa-30-de" xml:lang="de">
      <title>Namensnennung – Keine kommerzielle Nutzung – Weitergabe unter
    gleichen Bedingungen 3.0 Deutschland</title>
      <para>Entnommen von <link xlink:href="http://creativecommons.org/licenses/by-nc-sa/3.0/de/"/>.</para>

      <blockquote>
         <para>CREATIVE COMMONS IST KEINE RECHTSANWALTSKANZLEI UND LEISTET
      KEINE RECHTSBERATUNG. DIE BEREITSTELLUNG DIESER LIZENZ FÜHRT ZU
      KEINEM MANDATSVERHÄLTNIS. CREATIVE COMMONS STELLT DIESE
      INFORMATIONEN OHNE GEWÄHR ZUR VERFÜGUNG. CREATIVE COMMONS
      ÜBERNIMMT KEINE GEWÄHRLEISTUNG FÜR DIE GELIEFERTEN INFORMATIONEN
      UND SCHLIEßT DIE HAFTUNG FÜR SCHÄDEN AUS, DIE SICH AUS DEREN
      GEBRAUCH ERGEBEN. </para>
      </blockquote>

      <blockquote>
         <title>Licenz</title>
         <para>DER GEGENSTAND DIESER LIZENZ (WIE UNTER
        <quote>SCHUTZGEGENSTAND</quote> DEFINIERT) WIRD UNTER DEN
      BEDINGUNGEN DIESER CREATIVE COMMONS PUBLIC LICENSE
        (<quote>CCPL</quote>, <quote>LIZENZ</quote> ODER
        <quote>LIZENZVERTRAG</quote>) ZUR VERFÜGUNG GESTELLT. DER
      SCHUTZGEGENSTAND IST DURCH DAS URHEBERRECHT UND/ODER ANDERE
      GESETZE GESCHÜTZT. JEDE FORM DER NUTZUNG DES SCHUTZGEGENSTANDES,
      DIE NICHT AUFGRUND DIESER LIZENZ ODER DURCH GESETZE GESTATTET IST,
      IST UNZULÄSSIG.</para>
         <para>DURCH DIE AUSÜBUNG EINES DURCH DIESE LIZENZ GEWÄHRTEN RECHTS
      AN DEM SCHUTZGEGENSTAND ERKLÄREN SIE SICH MIT DEN
      LIZENZBEDINGUNGEN RECHTSVERBINDLICH EINVERSTANDEN. SOWEIT DIESE
      LIZENZ ALS LIZENZVERTRAG ANZUSEHEN IST, GEWÄHRT IHNEN DER
      LIZENZGEBER DIE IN DER LIZENZ GENANNTEN RECHTE UNENTGELTLICH UND
      IM AUSTAUSCH DAFÜR, DASS SIE DAS GEBUNDENSEIN AN DIE
      LIZENZBEDINGUNGEN AKZEPTIEREN.</para>
      </blockquote>

      <orderedlist>
         <listitem xml:id="cc-de.def">
            <para>Definitionen</para>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem xml:id="cc-de.def.adaption">
                  <para>Der Begriff <quote>
                        <emphasis role="bold">Abwandlung</emphasis>
                     </quote> im Sinne dieser Lizenz
            bezeichnet das Ergebnis jeglicher Art von Veränderung des
            Schutzgegenstandes, solange die eigenpersönlichen Züge des
            Schutzgegenstandes darin nicht verblassen und daran eigene
            Schutzrechte entstehen. Das kann insbesondere eine
            Bearbeitung, Umgestaltung, Änderung, Anpassung, Übersetzung
            oder Heranziehung des Schutzgegenstandes zur Vertonung von
            Laufbildern sein. Nicht als Abwandlung des
            Schutzgegenstandes gelten seine Aufnahme in eine Sammlung
            oder ein Sammelwerk und die freie Benutzung des
            Schutzgegenstandes. </para>
               </listitem>
               <listitem xml:id="cc-de.def.collection">
                  <para>Der Begriff <quote>
                        <emphasis role="bold">Sammelwerk</emphasis>
                     </quote> im Sinne dieser Lizenz
            meint eine Zusammenstellung von literarischen,
            künstlerischen oder wissenschaftlichen Inhalten, sofern
            diese Zusammenstellung aufgrund von Auswahl und Anordnung
            der darin enthaltenen selbständigen Elemente eine geistige
            Schöpfung darstellt, unabhängig davon, ob die Elemente
            systematisch oder methodisch angelegt und dadurch einzeln
            zugänglich sind oder nicht.</para>
               </listitem>
               <listitem xml:id="cc-de.def.distribute">
                  <para>
                     <quote>
                        <emphasis role="bold">Verbreiten</emphasis>
                     </quote> im Sinne dieser Lizenz
            bedeutet, den Schutzgegenstand oder Abwandlungen im Original
            oder in Form von Vervielfältigungsstücken, mithin in
            körperlich fixierter Form der Öffentlichkeit anzubieten oder
            in Verkehr zu bringen.</para>
               </listitem>
               <listitem xml:id="cc-de.def.license-elements">
                  <para>Unter <quote>
                        <emphasis role="bold">Lizenzelementen</emphasis>
                     </quote> werden im Sinne
            dieser Lizenz die folgenden übergeordneten
            Lizenzcharakteristika verstanden, die vom Lizenzgeber
            ausgewählt wurden und in der Bezeichnung der Lizenz zum
            Ausdruck kommen: <quote>Namensnennung</quote>, <quote>Keine
              kommerzielle Nutzung</quote>, <quote>Weitergabe unter
              gleichen Bedingungen</quote>.</para>
               </listitem>
               <listitem xml:id="cc-de.def.licensor">
                  <para>Der <quote>
                        <emphasis role="bold">Lizenzgeber</emphasis>
                     </quote> im Sinne dieser Lizenz ist
            diejenige natürliche oder juristische Person oder Gruppe,
            die den Schutzgegenstand unter den Bedingungen dieser Lizenz
            anbietet und insoweit als Rechteinhaberin auftritt.</para>
               </listitem>
               <listitem xml:id="cc-de.def.original-author">
                  <para>
                     <quote>
                        <emphasis role="bold">Rechteinhaber</emphasis>
                     </quote> im Sinne dieser Lizenz
            ist der Urheber des Schutzgegenstandes oder jede andere
            natürliche oder juristische Person oder Gruppe von Personen,
            die am Schutzgegenstand ein Immaterialgüterrecht erlangt
            hat, welches die in Abschnitt <!--3--><xref linkend="cc-de.license-grant"/> genannten Handlungen
            erfasst und bei dem eine Einräumung von Nutzungsrechten oder
            eine Weiterübertragung an Dritte möglich ist.</para>
               </listitem>
               <listitem xml:id="cc-de.def.work">
                  <para>Der Begriff <quote>
                        <emphasis role="bold">Schutzgegenstand</emphasis>
                     </quote> bezeichnet in
            dieser Lizenz den literarischen, künstlerischen oder
            wissenschaftlichen Inhalt, der unter den Bedingungen dieser
            Lizenz angeboten wird. Das kann insbesondere eine
            persönliche geistige Schöpfung jeglicher Art, ein Werk der
            kleinen Münze, ein nachgelassenes Werk oder auch ein
            Lichtbild oder anderes Objekt eines verwandten Schutzrechts
            sein, unabhängig von der Art seiner Fixierung und unabhängig
            davon, auf welche Weise jeweils eine Wahrnehmung erfolgen
            kann, gleichviel ob in analoger oder digitaler Form. Soweit
            Datenbanken oder Zusammenstellungen von Daten einen
            immaterialgüterrechtlichen Schutz eigener Art genießen,
            unterfallen auch sie dem Begriff "Schutzgegenstand" im Sinne
            dieser Lizenz.</para>
               </listitem>
               <listitem xml:id="cc-de.def.you">
                  <para>Mit <quote>
                        <emphasis role="bold">Sie</emphasis>
                     </quote>
            bzw. <quote>
                        <emphasis role="bold">Ihnen</emphasis>
                     </quote>
            ist die natürliche oder juristische Person gemeint, die in
            dieser Lizenz im Abschnitt <!--3--><xref linkend="cc-de.license-grant"/> genannte Nutzungen des
            Schutzgegenstandes vornimmt und zuvor in Hinblick auf den
            Schutzgegenstand nicht gegen Bedingungen dieser Lizenz
            verstoßen oder aber die ausdrückliche Erlaubnis des
            Lizenzgebers erhalten hat, die durch diese Lizenz gewährten
            Nutzungsrechte trotz eines vorherigen Verstoßes
            auszuüben.</para>
               </listitem>
               <listitem xml:id="cc-de.def.publicly-perform">
                  <para>Unter <quote>
                        <emphasis role="bold">Öffentlich
                Zeigen</emphasis>
                     </quote> im Sinne dieser Lizenz sind
            Veröffentlichungen und Präsentationen des Schutzgegenstandes
            zu verstehen, die für eine Mehrzahl von Mitgliedern der
            Öffentlichkeit bestimmt sind und in unkörperlicher Form
            mittels öffentlicher Wiedergabe in Form von Vortrag,
            Aufführung, Vorführung, Darbietung, Sendung, Weitersendung,
            zeit- und ortsunabhängiger Zugänglichmachung oder in
            körperlicher Form mittels Ausstellung erfolgen, unabhängig
            von bestimmten Veranstaltungen und unabhängig von den zum
            Einsatz kommenden Techniken und Verfahren, einschließlich
            drahtgebundener oder drahtloser Mittel und Einstellen in das
            Internet.</para>
               </listitem>
               <listitem xml:id="cc-de.def.reproduce">
                  <para>
                     <quote>
                        <emphasis role="bold">Vervielfältigen</emphasis>
                     </quote> im Sinne dieser Lizenz
            bedeutet, mittels beliebiger Verfahren
            Vervielfältigungsstücke des Schutzgegenstandes herzustellen,
            insbesondere durch Ton- oder Bildaufzeichnungen, und umfasst
            auch den Vorgang, erstmals körperliche Fixierungen des
            Schutzgegenstandes sowie Vervielfältigungsstücke dieser
            Fixierungen anzufertigen, sowie die Übertragung des
            Schutzgegenstandes auf einen Bild- oder Tonträger oder auf
            ein anderes elektronisches Medium, gleichviel ob in
            digitaler oder analoger Form.</para>
               </listitem>
            </orderedlist>
         </listitem>
         <listitem xml:id="cc-de.fair-dealing-rights">
            <formalpara>
               <title>Schranken des Immaterialgüterrechts</title>
               <para>Diese Lizenz ist in keiner Weise darauf gerichtet,
          Befugnisse zur Nutzung des Schutzgegenstandes zu vermindern,
          zu beschränken oder zu vereiteln, die Ihnen aufgrund der
          Schranken des Urheberrechts oder anderer Rechtsnormen bereits
          ohne Weiteres zustehen oder sich aus dem Fehlen eines
          immaterialgüterrechtlichen Schutzes ergeben.</para>
            </formalpara>
         </listitem>
         <listitem xml:id="cc-de.license-grant">
            <formalpara>
               <title>Einräumung von Nutzungsrechten</title>
               <para>Unter den Bedingungen dieser Lizenz räumt Ihnen der
          Lizenzgeber – unbeschadet unverzichtbarer Rechte und
          vorbehaltlich des Abschnitts <!--4.f)--><xref linkend="cc-de.restrictions.f"/> – das vergütungsfreie,
          räumlich und zeitlich (für die Dauer des Schutzrechts am
          Schutzgegenstand) unbeschränkte einfache Recht ein, den
          Schutzgegenstand auf die folgenden Arten und Weisen zu nutzen
            (<quote>unentgeltlich eingeräumtes einfaches Nutzungsrecht
            für jedermann</quote>):</para>
            </formalpara>
            <orderedlist numeration="loweralpha">
               <listitem xml:id="cc-de.license-grant.a">
                  <para>Den Schutzgegenstand in beliebiger Form und Menge zu
            vervielfältigen, ihn in Sammelwerke zu integrieren und ihn
            als Teil solcher Sammelwerke zu vervielfältigen;</para>
               </listitem>
               <listitem xml:id="cc-de.license-grant.b">
                  <para>Abwandlungen des Schutzgegenstandes anzufertigen,
            einschließlich Übersetzungen unter Nutzung jedweder Medien,
            sofern deutlich erkennbar gemacht wird, dass es sich um
            Abwandlungen handelt;</para>
               </listitem>
               <listitem xml:id="cc-de.license-grant.c">
                  <para>den Schutzgegenstand, allein oder in Sammelwerke
            aufgenommen, öffentlich zu zeigen und zu verbreiten;</para>
               </listitem>
               <listitem xml:id="cc-de.license-grant.d">
                  <para>Abwandlungen des Schutzgegenstandes zu veröffentlichen,
            öffentlich zu zeigen und zu verbreiten.</para>
               </listitem>
            </orderedlist>
            <para>Das vorgenannte Nutzungsrecht wird für alle bekannten sowie
        für alle noch nicht bekannten Nutzungsarten eingeräumt. Es
        beinhaltet auch das Recht, solche Änderungen am Schutzgegenstand
        vorzunehmen, die für bestimmte nach dieser Lizenz zulässige
        Nutzungen technisch erforderlich sind. Alle sonstigen Rechte,
        die über diesen Abschnitt hinaus nicht ausdrücklich durch den
        Lizenzgeber eingeräumt werden, bleiben diesem allein
        vorbehalten. Soweit Datenbanken oder Zusammenstellungen von
        Daten Schutzgegenstand dieser Lizenz oder Teil dessen sind und
        einen immaterialgüterrechtlichen Schutz eigener Art genießen,
        verzichtet der Lizenzgeber auf sämtliche aus diesem Schutz
        resultierenden Rechte.</para>
         </listitem>
         <listitem xml:id="cc-de.restrictions">
            <formalpara>
               <title>Bedingungen</title>
               <para>Die Einräumung des Nutzungsrechts gemäß Abschnitt <xref linkend="cc-de.license-grant"/> dieser Lizenz erfolgt
          ausdrücklich nur unter den folgenden Bedingungen:</para>
            </formalpara>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem xml:id="cc-de.restrictions.a">
                  <para>Sie dürfen den Schutzgegenstand ausschließlich unter den
            Bedingungen dieser Lizenz verbreiten oder öffentlich zeigen.
            Sie müssen dabei stets eine Kopie dieser Lizenz oder deren
            vollständige Internetadresse in Form des
            Uniform-Resource-Identifier (URI) beifügen. Sie dürfen keine
            Vertrags- oder Nutzungsbedingungen anbieten oder fordern,
            die die Bedingungen dieser Lizenz oder die durch diese
            Lizenz gewährten Rechte beschränken. Sie dürfen den
            Schutzgegenstand nicht unterlizenzieren. Bei jeder Kopie des
            Schutzgegenstandes, die Sie verbreiten oder öffentlich
            zeigen, müssen Sie alle Hinweise unverändert lassen, die auf
            diese Lizenz und den Haftungsausschluss hinweisen. Wenn Sie
            den Schutzgegenstand verbreiten oder öffentlich zeigen,
            dürfen Sie (in Bezug auf den Schutzgegenstand) keine
            technischen Maßnahmen ergreifen, die den Nutzer des
            Schutzgegenstandes in der Ausübung der ihm durch diese
            Lizenz gewährten Rechte behindern können. Dieser Abschnitt
              <!--4.a)--><xref linkend="cc-de.restrictions.a"/> gilt auch für
            den Fall, dass der Schutzgegenstand einen Bestandteil eines
            Sammelwerkes bildet, was jedoch nicht bedeutet, dass das
            Sammelwerk insgesamt dieser Lizenz unterstellt werden muss.
            Sofern Sie ein Sammelwerk erstellen, müssen Sie auf die
            Mitteilung eines Lizenzgebers hin aus dem Sammelwerk die in
            Abschnitt <!--4.d)--><xref linkend="cc-de.restrictions.d"/>
            aufgezählten Hinweise entfernen. Wenn Sie eine Abwandlung
            vornehmen, müssen Sie auf die Mitteilung eines Lizenzgebers
            hin von der Abwandlung die in Abschnitt <!--4.d)--><xref linkend="cc-de.restrictions.d"/> aufgezählten Hinweise
            entfernen.</para>
               </listitem>
               <listitem xml:id="cc-de.restrictions.b">
                  <para>Sie dürfen eine Abwandlung ausschließlich unter den
          Bedingungen:</para>
                  <orderedlist numeration="lowerroman">
                     <listitem>
                        <para>dieser Lizenz,</para>
                     </listitem>
                     <listitem>
                        <para>einer späteren Version dieser Lizenz mit denselben Lizenzelementen;</para>
                     </listitem>
                     <listitem>
                        <para>einer rechtsordnungsspezifischen
                Creative-Commons-Lizenz mit denselben Lizenzelementen ab
                Version 3.0 aufwärts (z.B. Namensnennung – Keine
                kommerzielle Nutzung – Weitergabe unter gleichen
                Bedingungen 3.0 US) oder</para>
                     </listitem>
                     <listitem>
                        <para>der Creative-Commons-Unported-Lizenz mit denselben
                Lizenzelementen ab Version 3.0 aufwärts</para>
                     </listitem>
                  </orderedlist>
                  <para>verbreiten oder öffentlich zeigen (<quote>Verwendbare Lizenz</quote>).</para>
                  <para>Sie müssen stets eine Kopie der verwendbaren Lizenz oder
            deren vollständige Internetadresse in Form des
            Uniform-Resource-Identifier (URI) beifügen, wenn Sie die
            Abwandlung verbreiten oder öffentlich zeigen. Sie dürfen
            keine Vertrags- oder Nutzungsbedingungen anbieten oder
            fordern, die die Bedingungen der verwendbaren Lizenz oder
            die durch sie gewährten Rechte beschränken. Bei jeder
            Abwandlung, die Sie verbreiten oder öffentlich zeigen,
            müssen Sie alle Hinweise auf die verwendbare Lizenz und den
            Haftungsausschluss unverändert lassen. Wenn Sie die
            Abwandlung verbreiten oder öffentlich zeigen, dürfen Sie (in
            Bezug auf die Abwandlung) keine technischen Maßnahmen
            ergreifen, die den Nutzer der Abwandlung in der Ausübung der
            ihm durch die verwendbare Lizenz gewährten Rechte behindern
            können. Dieser Abschnitt <!--4.b)--><xref linkend="cc-de.restrictions.b"/> gilt auch für den Fall, dass
            die Abwandlung einen Bestandteil eines Sammelwerkes bildet,
            was jedoch nicht bedeutet, dass das Sammelwerk insgesamt der
            verwendbaren Lizenz unterstellt werden muss.</para>
               </listitem>
               <listitem xml:id="cc-de.restrictions.c">
                  <para>Die Rechteeinräumung gemäß Abschnitt <!--3--><xref linkend="cc.license-grant"/> gilt nur für
            Handlungen, die nicht vorrangig auf einen geschäftlichen
            Vorteil oder eine geldwerte Vergütung gerichtet sind
              (<quote>nicht-kommerzielle Nutzung</quote>,
              <quote>Non-commercial-Option</quote>). Wird Ihnen in
            Zusammenhang mit dem Schutzgegenstand dieser Lizenz ein
            anderer Schutzgegenstand überlassen, ohne dass eine
            vertragliche Verpflichtung hierzu besteht (etwa im Wege von
            File-Sharing), so wird dies nicht als auf geschäftlichen
            Vorteil oder geldwerte Vergütung gerichtet angesehen, wenn
            in Verbindung mit dem Austausch der Schutzgegenstände
            tatsächlich keine Zahlung oder geldwerte Vergütung geleistet
            wird.</para>
               </listitem>
               <listitem xml:id="cc-de.restrictions.d">
                  <para>Die Verbreitung und das öffentliche Zeigen des
            Schutzgegenstandes oder auf ihm aufbauender Abwandlungen
            oder ihn enthaltender Sammelwerke ist Ihnen nur unter der
            Bedingung gestattet, dass Sie, vorbehaltlich etwaiger
            Mitteilungen im Sinne von Abschnitt <!--4.a)--><xref linkend="cc-de.restrictions.a"/>, alle dazu gehörenden
            Rechtevermerke unberührt lassen. Sie sind verpflichtet, die
            Rechteinhaberschaft in einer der Nutzung entsprechenden,
            angemessenen Form anzuerkennen, indem Sie – soweit bekannt –
            Folgendes angeben:</para>
                  <orderedlist numeration="lowerroman">
                     <listitem>
                        <para>Den Namen (oder das Pseudonym, falls ein solches
                verwendet wird) des Rechteinhabers und / oder, falls der
                Lizenzgeber im Rechtevermerk, in den Nutzungsbedingungen
                oder auf andere angemessene Weise eine Zuschreibung an
                Dritte vorgenommen hat (z.B. an eine Stiftung, ein
                Verlagshaus oder eine Zeitung)
                (<quote>Zuschreibungsempfänger</quote>), Namen bzw. Bezeichnung
                dieses oder dieser Dritten;</para>
                     </listitem>
                     <listitem>
                        <para>den Titel des Inhaltes;</para>
                     </listitem>
                     <listitem>
                        <para>in einer praktikablen Form den
                Uniform-Resource-Identifier (URI, z.B. Internetadresse),
                den der Lizenzgeber zum Schutzgegenstand angegeben hat,
                es sei denn, dieser URI verweist nicht auf den
                Rechtevermerk oder die Lizenzinformationen zum
                Schutzgegenstand;</para>
                     </listitem>
                     <listitem>
                        <para>und im Falle einer Abwandlung des Schutzgegenstandes
                in Übereinstimmung mit Abschnitt <!--3.b)--><xref linkend="cc-de.license-grant.b" xrefstyle="template:                   3.%n"/> einen Hinweis
                darauf, dass es sich um eine Abwandlung handelt.</para>
                     </listitem>
                  </orderedlist>
                  <para>Die nach diesem Abschnitt <!--4.d)--><xref linkend="cc-de.restrictions.d"/> erforderlichen Angaben
            können in jeder angemessenen Form gemacht werden; im Falle
            einer Abwandlung des Schutzgegenstandes oder eines
            Sammelwerkes müssen diese Angaben das Minimum darstellen und
            bei gemeinsamer Nennung mehrerer Rechteinhaber dergestalt
            erfolgen, dass sie zumindest ebenso hervorgehoben sind wie
            die Hinweise auf die übrigen Rechteinhaber. Die Angaben nach
            diesem Abschnitt dürfen Sie ausschließlich zur Angabe der
            Rechteinhaberschaft in der oben bezeichneten Weise
            verwenden. Durch die Ausübung Ihrer Rechte aus dieser Lizenz
            dürfen Sie ohne eine vorherige, separat und schriftlich
            vorliegende Zustimmung des Lizenzgebers und / oder des
            Zuschreibungsempfängers weder explizit noch implizit
            irgendeine Verbindung zum Lizenzgeber oder
            Zuschreibungsempfänger und ebenso wenig eine Unterstützung
            oder Billigung durch ihn andeuten.</para>
               </listitem>
               <listitem xml:id="cc-de.restrictions.e">
                  <para>Die oben unter <!--4.a)--><xref linkend="cc-de.restrictions.a"/> bis <!--d)--><xref linkend="cc-de.restrictions.d"/> genannten Einschränkungen
            gelten nicht für solche Teile des Schutzgegenstandes, die
            allein deshalb unter den Schutzgegenstandsbegriff fallen,
            weil sie als Datenbanken oder Zusammenstellungen von Daten
            einen immaterialgüterrechtlichen Schutz eigener Art
            genießen.</para>
               </listitem>
               <listitem xml:id="cc-de.restrictions.f">
                  <para>Bezüglich Vergütung für die Nutzung des
          Schutzgegenstandes gilt Folgendes:</para>
                  <orderedlist numeration="lowerroman">
                     <listitem xml:id="cc-de.restrictions.f.i">
                        <formalpara>
                           <title>Unverzichtbare gesetzliche Vergütungsansprüche:</title>
                           <para>Soweit unverzichtbare Vergütungsansprüche im
                  Gegenzug für gesetzliche Lizenzen vorgesehen oder
                  Pauschalabgabensysteme (zum Beispiel für Leermedien)
                  vorhanden sind, behält sich der Lizenzgeber das
                  ausschließliche Recht vor, die entsprechende Vergütung
                  einzuziehen für jede Ausübung eines Rechts aus dieser
                  Lizenz durch Sie.</para>
                        </formalpara>
                     </listitem>
                     <listitem xml:id="cc-de.restrictions.f.ii">
                        <formalpara>
                           <title>Vergütung bei Zwangslizenzen:</title>
                           <para>Sofern Zwangslizenzen außerhalb dieser Lizenz
                  vorgesehen sind und zustande kommen, behält sich der
                  Lizenzgeber das ausschließliche Recht auf Einziehung
                  der entsprechenden Vergütung für den Fall vor, dass
                  Sie eine Nutzung des Schutzgegenstandes für andere als
                  die in Abschnitt <!--4.c)--><xref linkend="cc-de.restrictions.c"/> als nicht-kommerziell
                  definierten Zwecke vornehmen, verzichtet für alle
                  übrigen, lizenzgerechten Fälle von Nutzung jedoch auf
                  jegliche Vergütung.</para>
                        </formalpara>
                     </listitem>
                     <listitem>
                        <formalpara>
                           <title>Vergütung in sonstigen Fällen:</title>
                           <para>Bezüglich lizenzgerechter Nutzung des
                  Schutzgegenstandes durch Sie, die nicht unter die
                  beiden vorherigen Abschnitte <!--(i)--><xref linkend="cc-de.restrictions.f.i" xrefstyle="template: (%n) "/> und <!--(ii)--><xref linkend="cc-de.restrictions.f.ii" xrefstyle="template: (%n) "/> fällt,
                  verzichtet der Lizenzgeber auf jegliche Vergütung,
                  unabhängig davon, ob eine Einziehung der Vergütung
                  durch ihn selbst oder nur durch eine
                  Verwertungsgesellschaft möglich wäre. Der Lizenzgeber
                  behält sich jedoch das ausschließliche Recht auf
                  Einziehung der entsprechenden Vergütung (durch ihn
                  selbst oder eine Verwertungsgesellschaft) für den Fall
                  vor, dass Sie eine Nutzung des Schutzgegenstandes für
                  andere als die in Abschnitt <!--4.c)--><xref linkend="cc-de.restrictions.c"/> als nicht-kommerziell
                  definierten Zwecke vornehmen.</para>
                        </formalpara>
                     </listitem>
                  </orderedlist>
               </listitem>
               <listitem>
                  <para>Persönlichkeitsrechte bleiben – soweit sie bestehen –
            von dieser Lizenz unberührt.</para>
               </listitem>
            </orderedlist>
         </listitem>
         <listitem xml:id="cc-de.representation-warranties-disclaimer">
            <formalpara>
               <title>Gewährleistung</title>
               <para>SOFERN KEINE ANDERS LAUTENDE, SCHRIFTLICHE VEREINBARUNG
          ZWISCHEN DEM LIZENZGEBER UND IHNEN GESCHLOSSEN WURDE UND
          SOWEIT MÄNGEL NICHT ARGLISTIG VERSCHWIEGEN WURDEN, BIETET DER
          LIZENZGEBER DEN SCHUTZGEGENSTAND UND DIE EINRÄUMUNG VON
          RECHTEN UNTER AUSSCHLUSS JEGLICHER GEWÄHRLEISTUNG AN UND
          ÜBERNIMMT WEDER AUSDRÜCKLICH NOCH KONKLUDENT GARANTIEN
          IRGENDEINER ART. DIES UMFASST INSBESONDERE DAS FREISEIN VON
          SACH- UND RECHTSMÄNGELN, UNABHÄNGIG VON DEREN ERKENNBARKEIT
          FÜR DEN LIZENZGEBER, DIE VERKEHRSFÄHIGKEIT DES
          SCHUTZGEGENSTANDES, SEINE VERWENDBARKEIT FÜR EINEN BESTIMMTEN
          ZWECK SOWIE DIE KORREKTHEIT VON BESCHREIBUNGEN. DIESE
          GEWÄHRLEISTUNGSBESCHRÄNKUNG GILT NICHT, SOWEIT MÄNGEL ZU
          SCHÄDEN DER IN ABSCHNITT <!--6--><xref linkend="cc-de.limitation-on-liability"/> BEZEICHNETEN ART FÜHREN UND AUF
          SEITEN DES LIZENZGEBERS DAS JEWEILS GENANNTE VERSCHULDEN BZW.
          VERTRETENMÜSSEN EBENFALLS VORLIEGT.</para>
            </formalpara>
         </listitem>
         <listitem xml:id="cc-de.limitation-on-liability">
            <formalpara>
               <title>Haftungsbeschränkung</title>
               <para>DER LIZENZGEBER HAFTET IHNEN GEGENÜBER IN BEZUG AUF
          SCHÄDEN AUS DER VERLETZUNG DES LEBENS, DES KÖRPERS ODER DER
          GESUNDHEIT NUR, SOFERN IHM WENIGSTENS FAHRLÄSSIGKEIT
          VORZUWERFEN IST, FÜR SONSTIGE SCHÄDEN NUR BEI GROBER
          FAHRLÄSSIGKEIT ODER VORSATZ, UND ÜBERNIMMT DARÜBER HINAUS
          KEINERLEI FREIWILLIGE HAFTUNG.</para>
            </formalpara>
         </listitem>
         <listitem xml:id="cc-de.termination">
            <formalpara>
               <title>Erlöschen</title>
               <para/>
            </formalpara>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem>
                  <para>Diese Lizenz und die durch sie eingeräumten
            Nutzungsrechte erlöschen mit Wirkung für die Zukunft im
            Falle eines Verstoßes gegen die Lizenzbedingungen durch Sie,
            ohne dass es dazu der Kenntnis des Lizenzgebers vom Verstoß
            oder einer weiteren Handlung einer der Vertragsparteien
            bedarf. Mit natürlichen oder juristischen Personen, die
            Abwandlungen des Schutzgegenstandes oder diesen enthaltende
            Sammelwerke unter den Bedingungen dieser Lizenz von Ihnen
            erhalten haben, bestehen nachträglich entstandene
            Lizenzbeziehungen jedoch solange weiter, wie die genannten
            Personen sich ihrerseits an sämtliche Lizenzbedingungen
            halten. Darüber hinaus gelten die Ziffern <!--1--><xref linkend="cc-de.def"/>, <!--2--><xref linkend="cc-de.fair-dealing-rights"/>, <!--5--><xref linkend="cc-de.representation-warranties-disclaimer"/>,
              <!--6--><xref linkend="cc-de.limitation-on-liability"/>,
              <!--7--><xref linkend="cc-de.termination"/> und
              <!--8--><xref linkend="cc-de.misc"/> auch nach einem
            Erlöschen dieser Lizenz fort. </para>
               </listitem>
               <listitem>
                  <para>Vorbehaltlich der oben genannten Bedingungen gilt diese
            Lizenz unbefristet bis der rechtliche Schutz für den
            Schutzgegenstand ausläuft. Davon abgesehen behält der
            Lizenzgeber das Recht, den Schutzgegenstand unter anderen
            Lizenzbedingungen anzubieten oder die eigene Weitergabe des
            Schutzgegenstandes jederzeit einzustellen, solange die
            Ausübung dieses Rechts nicht einer Kündigung oder einem
            Widerruf dieser Lizenz (oder irgendeiner Weiterlizenzierung,
            die auf Grundlage dieser Lizenz bereits erfolgt ist bzw.
            zukünftig noch erfolgen muss) dient und diese Lizenz unter
            Berücksichtigung der oben zum Erlöschen genannten
            Bedingungen vollumfänglich wirksam bleibt.</para>
               </listitem>
            </orderedlist>
         </listitem>
         <listitem xml:id="cc-de.misc">
            <formalpara>
               <title>Sonstige Bestimmungen</title>
               <para/>
            </formalpara>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem xml:id="cc-de.misc.a">
                  <para>Jedes Mal wenn Sie den Schutzgegenstand für sich
            genommen oder als Teil eines Sammelwerkes verbreiten oder
            öffentlich zeigen, bietet der Lizenzgeber dem Empfänger eine
            Lizenz zu den gleichen Bedingungen und im gleichen Umfang
            an, wie Ihnen in Form dieser Lizenz.</para>
               </listitem>
               <listitem xml:id="cc-de.misc.b">
                  <para>Jedes Mal wenn Sie eine Abwandlung des
            Schutzgegenstandes verbreiten oder öffentlich zeigen, bietet
            der Lizenzgeber dem Empfänger eine Lizenz am ursprünglichen
            Schutzgegenstand zu den gleichen Bedingungen und im gleichen
            Umfang an, wie Ihnen in Form dieser Lizenz.</para>
               </listitem>
               <listitem xml:id="cc-de.misc.c">
                  <para>Sollte eine Bestimmung dieser Lizenz unwirksam sein, so
            bleibt davon die Wirksamkeit der Lizenz im Übrigen
            unberührt.</para>
               </listitem>
               <listitem xml:id="cc-de.misc.d">
                  <para>Keine Bestimmung dieser Lizenz soll als abbedungen und
            kein Verstoß gegen sie als zulässig gelten, solange die von
            dem Verzicht oder von dem Verstoß betroffene Seite nicht
            schriftlich zugestimmt hat.</para>
               </listitem>
               <listitem xml:id="cc-de.misc.e">
                  <para>Diese Lizenz (zusammen mit in ihr ausdrücklich
            vorgesehenen Erlaubnissen, Mitteilungen und Zustimmungen,
            soweit diese tatsächlich vorliegen) stellt die vollständige
            Vereinbarung zwischen dem Lizenzgeber und Ihnen in Bezug auf
            den Schutzgegenstand dar. Es bestehen keine Abreden,
            Vereinbarungen oder Erklärungen in Bezug auf den
            Schutzgegenstand, die in dieser Lizenz nicht genannt sind.
            Rechtsgeschäftliche Änderungen des Verhältnisses zwischen
            dem Lizenzgeber und Ihnen sind nur über Modifikationen
            dieser Lizenz möglich. Der Lizenzgeber ist an etwaige
            zusätzliche, einseitig durch Sie übermittelte Bestimmungen
            nicht gebunden. Diese Lizenz kann nur durch schriftliche
            Vereinbarung zwischen Ihnen und dem Lizenzgeber modifiziert
            werden. Derlei Modifikationen wirken ausschließlich zwischen
            dem Lizenzgeber und Ihnen und wirken sich nicht auf die
            Dritten gemäß Ziffern <!--8.a)--><xref linkend="cc-de.misc.a"/> und
            <!--b)--><xref linkend="cc-de.misc.b"/> angeboteten Lizenzen
            aus.</para>
               </listitem>
               <listitem xml:id="cc-de.misc.f">
                  <para>Sofern zwischen Ihnen und dem Lizenzgeber keine
            anderweitige Vereinbarung getroffen wurde und soweit
            Wahlfreiheit besteht, findet auf diesen Lizenzvertrag das
            Recht der Bundesrepublik Deutschland Anwendung.</para>
               </listitem>
            </orderedlist>
         </listitem>
      </orderedlist>

      <sidebar>
         <title>Creative Commons Notice</title>
         <para>Creative Commons ist nicht Partei dieser Lizenz und übernimmt
      keinerlei Gewähr oder dergleichen in Bezug auf den
      Schutzgegenstand. Creative Commons haftet Ihnen oder einer anderen
      Partei unter keinem rechtlichen Gesichtspunkt für irgendwelche
      Schäden, die – abstrakt oder konkret, zufällig oder vorhersehbar –
      im Zusammenhang mit dieser Lizenz entstehen. Unbeschadet der
      vorangegangen beiden Sätze, hat Creative Commons alle Rechte und
      Pflichten eines Lizenzgebers, wenn es sich ausdrücklich als
      Lizenzgeber im Sinne dieser Lizenz bezeichnet.</para>
         <para>Creative Commons gewährt den Parteien nur insoweit das Recht,
      das Logo und die Marke "Creative Commons" zu nutzen, als dies
      notwendig ist, um der Öffentlichkeit gegenüber kenntlich zu
      machen, dass der Schutzgegenstand unter einer CCPL steht. Ein
      darüber hinaus gehender Gebrauch der Marke "Creative Commons" oder
      einer verwandten Marke oder eines verwandten Logos bedarf der
      vorherigen schriftlichen Zustimmung von Creative Commons. Jeder
      erlaubte Gebrauch richtet sich nach der Creative Commons
      Marken-Nutzungs-Richtlinie in der jeweils aktuellen Fassung, die
      von Zeit zu Zeit auf der Website veröffentlicht oder auf andere
      Weise auf Anfrage zugänglich gemacht wird. Zur Klarstellung: Die
      genannten Einschränkungen der Markennutzung sind nicht Bestandteil
      dieser Lizenz. </para>
         <para>Creative Commons kann kontaktiert werden über <link xlink:href="http://creativecommons.org"/>.</para>
      </sidebar>
   </appendix>
  <!--<?xml-model href="file:5.1/dbref.rnc" type="application/relax-ng-compact-syntax"?>--><appendix xml:id="cc-by-nc-sa-30-unported">
      <title>Attribution-NonCommercial-ShareAlike 3.0 Unported</title>
      <para>Taken from <link xlink:href="http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en"/>.</para>
      <blockquote>
         <para>CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT
      PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT
      CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES
      THIS INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO
      WARRANTIES REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS
      LIABILITY FOR DAMAGES RESULTING FROM ITS USE.</para>
      </blockquote>

      <blockquote>
         <title>License</title>
         <para>THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF
      THIS CREATIVE COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE
      WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY
      USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR
      COPYRIGHT LAW IS PROHIBITED.</para>
         <para>BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT
      AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT
      THIS LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR
      GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR
      ACCEPTANCE OF SUCH TERMS AND CONDITIONS.</para>
      </blockquote>

      <orderedlist>
         <listitem xml:id="cc.def">
            <para>Definitions</para>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem xml:id="cc.def.adaption">
                  <formalpara>
                     <title>
                        <quote>Adaptation</quote>
                     </title>
                     <para>means a work based upon the Work, or upon the Work and
              other pre-existing works, such as a translation,
              adaptation, derivative work, arrangement of music or other
              alterations of a literary or artistic work, or phonogram
              or performance and includes cinematographic adaptations or
              any other form in which the Work may be recast,
              transformed, or adapted including in any form recognizably
              derived from the original, except that a work that
              constitutes a Collection will not be considered an
              Adaptation for the purpose of this License. For the
              avoidance of doubt, where the Work is a musical work,
              performance or phonogram, the synchronization of the Work
              in timed-relation with a moving image
                (<quote>synching</quote>) will be considered an
              Adaptation for the purpose of this License.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.collection">
                  <formalpara>
                     <title>
                        <quote>Collection</quote>
                     </title>
                     <para>means a collection of literary or artistic works, such
              as encyclopedias and anthologies, or performances,
              phonograms or broadcasts, or other works or subject matter
              other than works listed in Section <xref linkend="cc.def.work"/> below, which, by reason of the
              selection and arrangement of their contents, constitute
              intellectual creations, in which the Work is included in
              its entirety in unmodified form along with one or more
              other contributions, each constituting separate and
              independent works in themselves, which together are
              assembled into a collective whole. A work that constitutes
              a Collection will not be considered an Adaptation (as
              defined above) for the purposes of this License.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.distribute">
                  <formalpara>
                     <title>
                        <quote>Distribute</quote>
                     </title>
                     <para>means to make available to the public the original and
              copies of the Work or Adaptation, as appropriate, through
              sale or other transfer of ownership.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.license-elements">
                  <formalpara>
                     <title>
                        <quote>License Elements</quote>
                     </title>
                     <para>means the following high-level license attributes as
              selected by Licensor and indicated in the title of this
              License: Attribution, Noncommercial, ShareAlike.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.licensor">
                  <formalpara>
                     <title>
                        <quote>Licensor</quote>
                     </title>
                     <para>means the individual, individuals, entity or entities
              that offer(s) the Work under the terms of this
              License.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.original-author">
                  <formalpara>
                     <title>
                        <quote>Original Author</quote>
                     </title>
                     <para>means, in the case of a literary or artistic work, the
              individual, individuals, entity or entities who created
              the Work or if no individual or entity can be identified,
              the publisher; and in addition (i) in the case of a
              performance the actors, singers, musicians, dancers, and
              other persons who act, sing, deliver, declaim, play in,
              interpret or otherwise perform literary or artistic works
              or expressions of folklore; (ii) in the case of a
              phonogram the producer being the person or legal entity
              who first fixes the sounds of a performance or other
              sounds; and, (iii) in the case of broadcasts, the
              organization that transmits the broadcast.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.work">
                  <formalpara>
                     <title>
                        <quote>Work</quote>
                     </title>
                     <para>means the literary and/or artistic work offered under
              the terms of this License including without limitation any
              production in the literary, scientific and artistic
              domain, whatever may be the mode or form of its expression
              including digital form, such as a book, pamphlet and other
              writing; a lecture, address, sermon or other work of the
              same nature; a dramatic or dramatico-musical work; a
              choreographic work or entertainment in dumb show; a
              musical composition with or without words; a
              cinematographic work to which are assimilated works
              expressed by a process analogous to cinematography; a work
              of drawing, painting, architecture, sculpture, engraving
              or lithography; a photographic work to which are
              assimilated works expressed by a process analogous to
              photography; a work of applied art; an illustration, map,
              plan, sketch or three-dimensional work relative to
              geography, topography, architecture or science; a
              performance; a broadcast; a phonogram; a compilation of
              data to the extent it is protected as a copyrightable
              work; or a work performed by a variety or circus performer
              to the extent it is not otherwise considered a literary or
              artistic work.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.you">
                  <formalpara>
                     <title>
                        <quote>You</quote>
                     </title>
                     <para>means an individual or entity exercising rights under
              this License who has not previously violated the terms of
              this License with respect to the Work, or who has received
              express permission from the Licensor to exercise rights
              under this License despite a previous violation.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.publicly-perform">
                  <formalpara>
                     <title>
                        <quote>Publicly Perform</quote>
                     </title>
                     <para>means to perform public recitations of the Work and to
              communicate to the public those public recitations, by any
              means or process, including by wire or wireless means or
              public digital performances; to make available to the
              public Works in such a way that members of the public may
              access these Works from a place and at a place
              individually chosen by them; to perform the Work to the
              public by any means or process and the communication to
              the public of the performances of the Work, including by
              public digital performance; to broadcast and rebroadcast
              the Work by any means including signs, sounds or
              images.</para>
                  </formalpara>
               </listitem>
               <listitem xml:id="cc.def.reproduce">
                  <formalpara>
                     <title>
                        <quote>Reproduce</quote>
                     </title>
                     <para>means to make copies of the Work by any means
              including without limitation by sound or visual recordings
              and the right of fixation and reproducing fixations of the
              Work, including storage of a protected performance or
              phonogram in digital form or other electronic
              medium.</para>
                  </formalpara>
               </listitem>
            </orderedlist>
         </listitem>
         <listitem xml:id="cc.fair-dealing-rights">
            <formalpara>
               <title>Fair Dealing Rights.</title>
               <para>Nothing in this License is intended to reduce, limit, or
          restrict any uses free from copyright or rights arising from
          limitations or exceptions that are provided for in connection
          with the copyright protection under copyright law or other
          applicable laws.</para>
            </formalpara>
         </listitem>
         <listitem xml:id="cc.license-grant">
            <formalpara>
               <title>License Grant.</title>
               <para>Subject to the terms and conditions of this License,
          Licensor hereby grants You a worldwide, royalty-free,
          non-exclusive, perpetual (for the duration of the applicable
          copyright) license to exercise the rights in the Work as
          stated below:</para>
            </formalpara>
            <orderedlist numeration="loweralpha">
               <listitem xml:id="cc.license-grant.a">
                  <para>to Reproduce the Work, to incorporate the Work into one
            or more Collections, and to Reproduce the Work as
            incorporated in the Collections;</para>
               </listitem>
               <listitem xml:id="cc.license-grant.b">
                  <para>to create and Reproduce Adaptations provided that any
            such Adaptation, including any translation in any medium,
            takes reasonable steps to clearly label, demarcate or
            otherwise identify that changes were made to the original
            Work. For example, a translation could be marked <quote>The
              original work was translated from English to
              Spanish,</quote> or a modification could indicate
              <quote>The original work has been
            modified.</quote>;</para>
               </listitem>
               <listitem xml:id="cc.license-grant.c">
                  <para>to Distribute and Publicly Perform the Work including as
            incorporated in Collections; and,</para>
               </listitem>
               <listitem xml:id="cc.license-grant.d">
                  <para>to Distribute and Publicly Perform Adaptations.</para>
               </listitem>
            </orderedlist>
            <para>The above rights may be exercised in all media and formats
        whether now known or hereafter devised. The above rights include
        the right to make such modifications as are technically
        necessary to exercise the rights in other media and formats.
        Subject to Section <!--8(f)--><xref linkend="cc.misc.rightsgranted"/>,
        all rights not expressly granted by Licensor are hereby
        reserved, including but not limited to the rights described in
        Section <!--4(e)--><xref linkend="cc.restrictions.e"/>.</para>
         </listitem>
         <listitem xml:id="cc.restrictions">
            <formalpara>
               <title>Restrictions.</title>
               <para>The license granted in Section <!--3--><xref linkend="cc.license-grant"/> above is expressly made subject
          to and limited by the following restrictions:</para>
            </formalpara>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem xml:id="cc.restrictions.a">
                  <para>You may Distribute or Publicly Perform the Work only
            under the terms of this License. You must include a copy of,
            or the Uniform Resource Identifier (URI) for, this License
            with every copy of the Work You Distribute or Publicly
            Perform. You may not offer or impose any terms on the Work
            that restrict the terms of this License or the ability of
            the recipient of the Work to exercise the rights granted to
            that recipient under the terms of the License. You may not
            sublicense the Work. You must keep intact all notices that
            refer to this License and to the disclaimer of warranties
            with every copy of the Work You Distribute or Publicly
            Perform. When You Distribute or Publicly Perform the Work,
            You may not impose any effective technological measures on
            the Work that restrict the ability of a recipient of the
            Work from You to exercise the rights granted to that
            recipient under the terms of the License. This Section
              <!--4(a)--><xref linkend="cc.restrictions.a"/> applies to the
            Work as incorporated in a Collection, but this does not
            require the Collection apart from the Work itself to be made
            subject to the terms of this License. If You create a
            Collection, upon notice from any Licensor You must, to the
            extent practicable, remove from the Collection any credit as
            required by Section <!--4(d)--><xref linkend="cc.restrictions.d"/>,
            as requested. If You create an Adaptation, upon notice from
            any Licensor You must, to the extent practicable, remove
            from the Adaptation any credit as required by Section
              <!--4(d)--><xref linkend="cc.restrictions.d"/>, as
            requested.</para>
               </listitem>
               <listitem xml:id="cc.restrictions.b">
                  <para>You may Distribute or Publicly Perform an Adaptation
            only under: (i) the terms of this License; (ii) a later
            version of this License with the same License Elements as
            this License; (iii) a Creative Commons jurisdiction license
            (either this or a later license version) that contains the
            same License Elements as this License (e.g.,
            Attribution-NonCommercial-ShareAlike 3.0 US)
              (<quote>Applicable License</quote>). You must include a
            copy of, or the URI, for Applicable License with every copy
            of each Adaptation You Distribute or Publicly Perform. You
            may not offer or impose any terms on the Adaptation that
            restrict the terms of the Applicable License or the ability
            of the recipient of the Adaptation to exercise the rights
            granted to that recipient under the terms of the Applicable
            License. You must keep intact all notices that refer to the
            Applicable License and to the disclaimer of warranties with
            every copy of the Work as included in the Adaptation You
            Distribute or Publicly Perform. When You Distribute or
            Publicly Perform the Adaptation, You may not impose any
            effective technological measures on the Adaptation that
            restrict the ability of a recipient of the Adaptation from
            You to exercise the rights granted to that recipient under
            the terms of the Applicable License. This Section <!--4(b)--><xref linkend="cc.restrictions.b"/> applies to the Adaptation as
            incorporated in a Collection, but this does not require the
            Collection apart from the Adaptation itself to be made
            subject to the terms of the Applicable License.</para>
               </listitem>
               <listitem xml:id="cc.restrictions.c">
                  <para>You may not exercise any of the rights granted to You in
            Section <xref linkend="cc.license-grant"/> above in any
            manner that is primarily intended for or directed toward
            commercial advantage or private monetary compensation. The
            exchange of the Work for other copyrighted works by means of
            digital file-sharing or otherwise shall not be considered to
            be intended for or directed toward commercial advantage or
            private monetary compensation, provided there is no payment
            of any monetary compensation in con-nection with the
            exchange of copyrighted works.</para>
               </listitem>
               <listitem xml:id="cc.restrictions.d">
                  <para>If You Distribute, or Publicly Perform the Work or any
            Adaptations or Collections, You must, unless a request has
            been made pursuant to Section <!--4(a)--><xref linkend="cc.restrictions.a"/>, keep intact all copyright
            notices for the Work and provide, reasonable to the medium
            or means You are utilizing: (i) the name of the Original
            Author (or pseudonym, if applicable) if supplied, and/or if
            the Original Author and/or Licensor designate another party
            or parties (e.g., a sponsor institute, publishing entity,
            journal) for attribution (<quote>Attribution
            Parties</quote>) in Licensor's copyright notice, terms of
            service or by other reasonable means, the name of such party
            or parties; (ii) the title of the Work if supplied; (iii) to
            the extent reasonably practicable, the URI, if any, that
            Licensor specifies to be associated with the Work, unless
            such URI does not refer to the copyright notice or licensing
            information for the Work; and, (iv) consistent with Section
              <!--3(b)--><xref linkend="cc.license-grant.b"/>, in the case of
            an Adaptation, a credit identifying the use of the Work in
            the Adaptation (e.g., <quote>French translation of the Work
              by Original Author,</quote> or <quote>Screenplay based on
              original Work by Original Author</quote>). The credit
            required by this Section <!--4(d)--><xref linkend="cc.restrictions.d"/> may be implemented in any
            reasonable manner; provided, however, that in the case of a
            Adaptation or Collection, at a minimum such credit will
            appear, if a credit for all contributing authors of the
            Adaptation or Collection appears, then as part of these
            credits and in a manner at least as prominent as the credits
            for the other contributing authors. For the avoidance of
            doubt, You may only use the credit required by this Section
            for the purpose of attribution in the manner set out above
            and, by exercising Your rights under this License, You may
            not implicitly or explicitly assert or imply any connection
            with, sponsorship or endorsement by the Original Author,
            Licensor and/or Attribution Parties, as appropriate, of You
            or Your use of the Work, without the separate, express prior
            written permission of the Original Author, Licensor and/or
            Attribution Parties.</para>
               </listitem>
               <listitem xml:id="cc.restrictions.e">
                  <para>For the avoidance of doubt:</para>
                  <orderedlist numeration="lowerroman" inheritnum="inherit">
                     <listitem xml:id="cc.restriction.e.i">
                        <formalpara>
                           <title>Non-waivable Compulsory License Schemes.</title>
                           <para>In those jurisdictions in which the right to
                  collect royalties through any statutory or compulsory
                  licensing scheme cannot be waived, the Licensor
                  reserves the exclusive right to collect such royalties
                  for any exercise by You of the rights granted under
                  this License;</para>
                        </formalpara>
                     </listitem>
                     <listitem xml:id="cc.restriction.e.ii">
                        <formalpara>
                           <title>Waivable Compulsory License Schemes.</title>
                           <para>In those jurisdictions in which the right to
                  collect royalties through any statutory or compulsory
                  licensing scheme can be waived, the Licensor reserves
                  the exclusive right to collect such royalties for any
                  exercise by You of the rights granted under this
                  License if Your exercise of such rights is for a
                  purpose or use which is otherwise than noncommercial
                  as permitted under Section <!--4(c)--><xref linkend="cc.restrictions.c"/> and otherwise waives
                  the right to collect royalties through any statutory
                  or compulsory licensing scheme; and,</para>
                        </formalpara>
                     </listitem>
                     <listitem xml:id="cc.restriction.e.iii">
                        <formalpara>
                           <title>Voluntary License Schemes.</title>
                           <para>The Licensor reserves the right to collect
                  royalties, whether individually or, in the event that
                  the Licensor is a member of a collecting society that
                  administers voluntary licensing schemes, via that
                  society, from any exercise by You of the rights
                  granted under this License that is for a purpose or
                  use which is otherwise than noncommercial as permitted
                  under Section <!--4(c)--><xref linkend="cc.restrictions.c"/>.</para>
                        </formalpara>
                     </listitem>
                  </orderedlist>
               </listitem>
               <listitem>
                  <para>Except as otherwise agreed in writing by the Licensor or
            as may be otherwise permitted by applicable law, if You
            Reproduce, Distribute or Publicly Perform the Work either by
            itself or as part of any Adaptations or Collections, You
            must not distort, mutilate, modify or take other derogatory
            action in relation to the Work which would be prejudicial to
            the Original Author's honor or reputation. Licensor agrees
            that in those jurisdictions (e.g. Japan), in which any
            exercise of the right granted in Section <!--3(b)--><xref linkend="cc.license-grant.b"/> of this License (the right
            to make Adaptations) would be deemed to be a distortion,
            mutilation, modification or other derogatory action
            prejudicial to the Original Author's honor and reputation,
            the Licensor will waive or not assert, as appropriate, this
            Section, to the fullest extent permitted by the applicable
            national law, to enable You to reasonably exercise Your
            right under Section <!--3(b)--><xref linkend="cc.license-grant.b"/>
            of this License (right to make Adaptations) but not
            otherwise.</para>
               </listitem>
            </orderedlist>
         </listitem>
         <listitem xml:id="cc.representation-warranties-disclaimer">
            <formalpara>
               <title>Representations, Warranties and Disclaimer</title>
               <para>UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN
          WRITING AND TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW,
          LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR
          WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,
          STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION,
          WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
          PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER
          DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS,
          WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW
          THE EXCLUSION OF IMPLIED WARRANTIES, SO THIS EXCLUSION MAY NOT
          APPLY TO YOU.</para>
            </formalpara>
         </listitem>
         <listitem xml:id="cc.limitation-on-liability">
            <formalpara>
               <title>Limitation on Liability.</title>
               <para>EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO
          EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR
          ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY
          DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK,
          EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
          DAMAGES.</para>
            </formalpara>
         </listitem>
         <listitem xml:id="cc.termination">
            <formalpara>
               <title>Termination</title>
               <para/>
            </formalpara>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem>
                  <para>This License and the rights granted hereunder will
            terminate automatically upon any breach by You of the terms
            of this License. Individuals or entities who have received
            Adaptations or Collections from You under this License,
            however, will not have their licenses terminated provided
            such individuals or entities remain in full compliance with
            those licenses. Sections <!--1--><xref linkend="cc.def"/>, 
            <!--2--><xref linkend="cc.fair-dealing-rights"/>, <!--5--><xref linkend="cc.representation-warranties-disclaimer"/>,
              <!--6--><xref linkend="cc.limitation-on-liability"/>, <!--7--><xref linkend="cc.termination"/>, and <!--8--><xref linkend="cc.misc"/>
            will survive any termination of this License.</para>
               </listitem>
               <listitem>
                  <para>Subject to the above terms and conditions, the license
            granted here is perpetual (for the duration of the
            applicable copyright in the Work). Notwithstanding the
            above, Licensor reserves the right to release the Work under
            different license terms or to stop distributing the Work at
            any time; provided, however that any such election will not
            serve to withdraw this License (or any other license that
            has been, or is required to be, granted under the terms of
            this License), and this License will continue in full force
            and effect unless terminated as stated above.</para>
               </listitem>
            </orderedlist>
         </listitem>
         <listitem xml:id="cc.misc">
            <formalpara>
               <title>Miscellaneous</title>
               <para/>
            </formalpara>
            <orderedlist numeration="loweralpha" inheritnum="inherit">
               <listitem>
                  <para>Each time You Distribute or Publicly Perform the Work or
            a Collection, the Licensor offers to the recipient a license
            to the Work on the same terms and conditions as the license
            granted to You under this License.</para>
               </listitem>
               <listitem>
                  <para>Each time You Distribute or Publicly Perform an
            Adaptation, Licensor offers to the recipient a license to
            the original Work on the same terms and conditions as the
            license granted to You under this License.</para>
               </listitem>
               <listitem>
                  <para>If any provision of this License is invalid or
            unenforceable under applicable law, it shall not affect the
            validity or enforceability of the remainder of the terms of
            this License, and without further action by the parties to
            this agreement, such provision shall be reformed to the
            minimum extent necessary to make such provision valid and
            enforceable.</para>
               </listitem>
               <listitem>
                  <para>No term or provision of this License shall be deemed
            waived and no breach consented to unless such waiver or
            consent shall be in writing and signed by the party to be
            charged with such waiver or consent.</para>
               </listitem>
               <listitem>
                  <para>This License constitutes the entire agreement between
            the parties with respect to the Work licensed here. There
            are no understandings, agreements or representations with
            respect to the Work not specified here. Licensor shall not
            be bound by any additional provisions that may appear in any
            communication from You. This License may not be modified
            without the mutual written agreement of the Licensor and
            You.</para>
               </listitem>
               <listitem xml:id="cc.misc.rightsgranted">
                  <para>The rights granted under, and the subject matter
            referenced, in this License were drafted utilizing the
            terminology of the Berne Convention for the Protection of
            Literary and Artistic Works (as amended on September 28,
            1979), the Rome Convention of 1961, the WIPO Copyright
            Treaty of 1996, the WIPO Performances and Phonograms Treaty
            of 1996 and the Universal Copyright Convention (as revised
            on July 24, 1971). These rights and subject matter take
            effect in the relevant jurisdiction in which the License
            terms are sought to be enforced according to the
            corresponding provisions of the implementation of those
            treaty provisions in the applicable national law. If the
            standard suite of rights granted under applicable copyright
            law includes additional rights not granted under this
            License, such additional rights are deemed to be included in
            the License; this License is not intended to restrict the
            license of any rights under applicable law.</para>
               </listitem>
            </orderedlist>
         </listitem>
      </orderedlist>

      <sidebar>
         <title>Creative Commons Notice</title>
         <para>Creative Commons is not a party to this License, and makes no
      warranty whatsoever in connection with the Work. Creative Commons
      will not be liable to You or any party on any legal theory for any
      damages whatsoever, including without limitation any general,
      special, incidental or consequential damages arising in connection
      to this license. Notwithstanding the foregoing two (2) sentences,
      if Creative Commons has expressly identified itself as the
      Licensor hereunder, it shall have all rights and obligations of
      Licensor.</para>
         <para>Except for the limited purpose of indicating to the public
      that the Work is licensed under the CCPL, Creative Commons does
      not authorize the use by either party of the trademark
        <quote>Creative Commons</quote> or any related trademark or logo
      of Creative Commons without the prior written consent of Creative
      Commons. Any permitted use will be in compliance with Creative
      Commons' then-current trademark usage guidelines, as may be
      published on its website or otherwise made available upon request
      from time to time. For the avoidance of doubt, this trademark
      restriction does not form part of this License.</para>
         <para>Creative Commons may be contacted at <link xlink:href="http://creativecommons.org"/>.</para>
      </sidebar>
   </appendix>
</book>